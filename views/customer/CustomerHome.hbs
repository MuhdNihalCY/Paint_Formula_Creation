<div id='center' class="main" style="text-align: left;">

    <div id="fullscreen-popup">
        <!-- Popup content -->
        <div class="popupContent">
            <div class="PopHeaderDiv">
                <p class="PopHeader">Select Date</p>
                <button class="Popclose-button" onclick="closeFullscreenPopup()">X</button>
            </div>
            <hr>
            <div class="PopUpDatesDiv">
                <p class="PopUpLabel">Start Date</p>
                <input type="date" placeholder="Select Start Date" name="StartDate" id="StartDate">
                <p class="PopUpLabel">End Date</p>
                <input type="date" placeholder="Select Start Date" name="EndDate" id="EndDate">
            </div>
            <div class="PopButtonDiv">
                <button class="PopSubmitBtn" onclick="submitDateRange()">Apply Dates</button>
                <button class="PopCancelBtn" onclick="ClearDate()">Clear Filters</button>
            </div>
        </div>
    </div>


    <div class="mainInner">
        <div>Welcome {{CustomerName}}</div>
        <input type="text" value="{{CustomerName}}" id="CustomerName" hidden>
        <br>
        <div class="MainInnerDiv">
            <a href="/Customer/CreateFormulas" class="btn newFromulaBTN">New Formula</a>
        </div>

        <div class="SearchFormDiv">
            <div class="searchInput">
                <input type="search" id="FormSearch" placeholder="Search" class="autocomplete-input SearchInP">
                <div class="autocomplete-options" id="FormSearchList"></div>
            </div>

            <div id="dateRangeContainer">
                <input readonly type="text" id="DateRange" placeholder="Select Date Range"
                    class="autocomplete-input DateInputS" />
            </div>

        </div>

        {{!-- <div class="EMSearchFormDiv">
            <div class="input-container">
                <label for="customerName">Customer Name</label>
                <input type="text" id="customerName" placeholder="Enter Customer Name" class="autocomplete-input" />
                <div class="autocomplete-options" id="customerNameOptions"></div>
            </div>

            <div class="input-container">
                <label for="colorCode">Color Code</label>
                <input type="text" id="colorCode" placeholder="Enter Color Code" class="autocomplete-input" />
                <div class="autocomplete-options" id="colorCodeOptions"></div>
            </div>

            <div class="input-container">
                <label for="colorName">Color Name</label>
                <input type="text" id="colorName" placeholder="Enter Color Name" class="autocomplete-input" />
                <div class="autocomplete-options" id="colorNameOptions"></div>
            </div>

            <div class="input-container">
                <label for="Date">Date</label>
                <div id="dateRangeContainer">
                    <input readonly type="text" id="DateRange" placeholder="Select Date Range"
                        class="autocomplete-input DateInputS" />
                </div>
            </div>
        </div> --}}
        {{!-- <div class="FormSubmitDivArea">
            <button onclick="SearchFromForm()" class="FormSearchBTN">Search</button>
            <button onclick="onClearAllForm()" class="FormClearBTN">Clear Form</button>
        </div> --}}

        <hr>

        <div class="SearchFoundResult">
            <p id="SerachREsultCount" class="SerachREsultCount"></p>
        </div>
        <div class="SearchTableDiv">
            <table id="myTable">
                <thead>
                    <tr>
                        <th>File no.:</th>
                        <th>Customer Name</th>
                        <th>Color code</th>
                        <th>Color name</th>
                        <th>Date of production</th>
                        <th>Category</th>
                        <th>Sub-Category</th>
                        <th>Created by</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody class="SearchTableBody">

                </tbody>
            </table>

        </div>
    </div>
</div>



<!-- Add this script tag in the <head> section of your HTML file -->
<script>
    // Replace this dummy data with your actual data fetched via Ajax API call
    var Formulations = [];

    document.addEventListener('DOMContentLoaded', function () {
        // Initial fetch to populate table
        var CustomerName = document.getElementById('CustomerName').value;

        fetch(`/customer/getAllFormula/api/${CustomerName}`) // Replace with your API URL
            .then(response => response.json())
            .then(data => {
                // Handle the successful response here
                Formulations = data;
                populateTable(Formulations); // Assuming populateTable is defined
            })
            .catch(error => {
                // Handle errors here
                console.log('Error:', error);
            });

        // Get search input element
        const searchInput = document.getElementById('FormSearch');

        // Get date range input element
        const dateRangeInput = document.getElementById("DateRange");

        // Add an event listener to handle search input changes
        searchInput.addEventListener('input', function (event) {
            handleInputChange();
        });



    });


    // Handle input changes for both search and date range
    function handleInputChange() {
        // Get search input element
        const searchInput = document.getElementById('FormSearch');

        const searchTerm = searchInput.value.toLowerCase();

        let results = searchInFormulations(searchTerm); // Assuming searchInFormulations is defined
        results = seletedDates(results); // Assuming seletedDates is defined

        console.log('results');
        console.log(results);

        populateTable(results); // Assuming populateTable is defined
    }


    // The search function
    function searchInFormulations(term) {
        return Formulations.filter(item => {
            // Convert the properties to lower case for case-insensitive search
            const customerName = item.CustomerName ? item.CustomerName.toLowerCase() : '';
            const colorCode = item.ColorCode ? item.ColorCode.toLowerCase() : '';
            const colorName = item.ColorName ? item.ColorName.toLowerCase() : '';

            // Check if the search term is present in any of the properties
            return customerName.includes(term) || colorCode.includes(term) || colorName.includes(term);
        });

    }



    function formatDates(dateString) {
        const [day, month, year] = dateString.split("/");
        const formattedDate = `${year}-${month}-${day}`;
        return formattedDate;
    }



    function seletedDates(results) {
        const dateRange = document.getElementById("DateRange").value;
        var startDateString = formatDates(document.getElementById("StartDate").value);
        var endDateString = formatDates(document.getElementById("EndDate").value);

        console.log("dateRange = ", dateRange);
        console.log("startDate = ", startDateString);
        console.log("endDate = ", endDateString);

        // Check dateRange and filter if there's a value
        if (dateRange !== "") {
            var startDate = new Date(startDateString);
            var endDate = new Date(endDateString);

            // Ensure we are only comparing the date portion
            startDate.setHours(0, 0, 0, 0);
            endDate.setHours(0, 0, 0, 0);

            const filteredFormulations = results.filter((formulation) => {
                const formulationDate = new Date(formulation.Date);
                formulationDate.setHours(0, 0, 0, 0);  // Ensure we are only comparing the date portion
                return formulationDate >= startDate && formulationDate <= endDate;
            });

            console.log('filteredFormulations', filteredFormulations);
            return filteredFormulations;

        } else {
            return results;
        }
    }



    /* const customerNameInput = document.getElementById("customerName");
     const colorCodeInput = document.getElementById("colorCode");
     const colorNameInput = document.getElementById("colorName");
 */

    /*
        customerNameInput.addEventListener("input", handleInput);
        colorCodeInput.addEventListener("input", handleInput);
        colorNameInput.addEventListener("input", handleInput);
    
    */
    /*
        document.addEventListener("click", (event) => {
            const target = event.target;
            if (
                target !== customerNameInput &&
                target !== colorCodeInput &&
                target !== colorNameInput
            ) {
                hideAutocompleteOptions();
            }
        });
    */

    /*
    function handleInput(event) {
        const inputElement = event.target;
        const inputValue = inputElement.value.trim();
        const optionsContainerId = `${inputElement.id}Options`;
        const optionsContainer = document.getElementById(optionsContainerId);

        // Clear previous options
        optionsContainer.innerHTML = "";

        if (inputValue) {
            const matchingData = getMatchingData(inputElement.id, inputValue);

            // Convert the array to a Set to remove duplicates
            const uniqueData = new Set(matchingData);

            // Convert the Set back to an array
            const uniqueMatchingData = Array.from(uniqueData);

            // Update the original array with the unique values
            matchingData.length = 0; // Clear the original array
            matchingData.push(...uniqueMatchingData);

            // console.log(matchingData);

            if (matchingData.length > 0) {
                matchingData.forEach((data) => {
                    const optionElement = document.createElement("p");
                    optionElement.textContent = data;
                    optionElement.addEventListener("click", () => {
                        inputElement.value = data;
                        hideAutocompleteOptions();
                    });
                    optionsContainer.appendChild(optionElement);
                });

                showAutocompleteOptions(optionsContainer);
            } else {
                hideAutocompleteOptions();
            }
        } else {
            hideAutocompleteOptions();
        }
    }
*/


    function getMatchingData(inputId, inputValue) {
        const key = inputId === "customerName" ? "CustomerName" : inputId === "colorCode" ? "ColorCode" : "ColorName";
        const matchingData = Formulations.filter((item) =>
            item[key].toLowerCase().includes(inputValue.toLowerCase())
        );

        return matchingData.map((item) => item[key]);
    }

    function showAutocompleteOptions(optionsContainer) {
        optionsContainer.style.display = "block";
    }

    function hideAutocompleteOptions() {
        const allOptionsContainers = document.querySelectorAll(".autocomplete-options");
        allOptionsContainers.forEach((container) => {
            container.style.display = "none";
        });
    }


    // Date Popup

    const dateRangeContainer = document.getElementById("dateRangeContainer");

    /* dateRangeContainer.addEventListener("click", openFullScreenPopup);
 
     // add alternative to date popup
     const DateRange = document.getElementById("DateRange");
     DateRange.addEventListener("click", openFullScreenPopup);*/

    dateRangeContainer.addEventListener("click", function (event) {
        if (event.target.id === "DateRange") {
            openFullScreenPopup();
        }
    });


    function openFullScreenPopup() {
        var element = document.getElementById('fullscreen-popup');
        element.style.display = "flex";
    }

    function closeFullscreenPopup() {
        var element = document.getElementById('fullscreen-popup');
        element.style.display = "none";
    }



    function ClearDate() {
        var StartDate = document.getElementById('StartDate');
        var EndDate = document.getElementById('EndDate');
        var DateRange = document.getElementById('DateRange');

        StartDate.value = "";
        EndDate.value = "";
        DateRange.value = "";
        StartDate.max = "";
        EndDate.min = "";
    }

    function HandleStartDate() {
        var startDateInp = document.getElementById('StartDate');
        var endDateInp = document.getElementById('EndDate');
        endDateInp.min = startDateInp.value;
    }

    function HandleEndDate() {
        var startDateInp = document.getElementById('StartDate');
        var endDateInp = document.getElementById('EndDate');
        startDateInp.max = endDateInp.value;
    }

    const startDateInput = document.getElementById('StartDate');
    const endDateInput = document.getElementById('EndDate');

    // When the Start Date changes, update the minimum date for the End Date
    startDateInput.addEventListener('change', () => {
        HandleStartDate()
    });

    // When the End Date changes, update the maximum date for the Start Date
    endDateInput.addEventListener('change', () => {
        HandleEndDate()
    });

    function submitDateRange() {
        var startDateIn = document.getElementById('StartDate').value;
        var endDateIn = document.getElementById('EndDate').value;

        // Check if both start date and end date are selected
        if (startDateIn && endDateIn) {
            // Convert to Date objects
            const startDate = new Date(startDateIn);
            const endDate = new Date(endDateIn);

            // Function to format the date as "day month year" (e.g., "5 July 2023")
            function formatDate(date) {
                const day = date.getDate();
                const month = date.toLocaleString('default', { month: 'long' });
                const year = date.getFullYear();
                return `${day} ${month} ${year}`;
            }

            // Convert to formatted date strings
            const formattedStartDate = formatDate(startDate);
            const formattedEndDate = formatDate(endDate);

            // Output
            // console.log("Formatted Date:", formattedStartDate, " to ", formattedEndDate);

            var FormattedDate = formattedStartDate + " to " + formattedEndDate;

            document.getElementById('DateRange').value = FormattedDate;
            closeFullscreenPopup();
        } else {
            // Handle case when no date is selected
            document.getElementById('DateRange').value = "";
            alert("Select two Dates!")
        }
        
        handleInputChange();

    }

    function onClearAllForm() {
        document.getElementById('customerName').value = "";
        document.getElementById('colorCode').value = "";
        document.getElementById('colorName').value = "";
        document.getElementById('DateRange').value = "";
        document.getElementById('StartDate').value = "";
        document.getElementById('EndDate').value = "";
    }

    // Function to populate the table with data from the Formulations array
    function populateTable(Formulationss) {

        console.log(Formulationss);

        //alert("ds");
        var table = document.getElementById('myTable').getElementsByTagName('tbody')[0];

        // Clear the table body before adding new rows
        table.innerHTML = '';

        Formulationss.forEach(function (formulation) {
            var newRow = table.insertRow(table.rows.length);
            newRow.insertCell(0).textContent = formulation.FileNo;
            newRow.insertCell(1).textContent = formulation.CustomerName;
            newRow.insertCell(2).textContent = formulation.ColorCode;
            newRow.insertCell(3).textContent = formulation.ColorName;
            newRow.insertCell(4).textContent = formatDate(formulation.Date); // Format the date
            newRow.insertCell(5).textContent = formulation.CategoryName;
            newRow.insertCell(6).textContent = formulation.SubCategoryName;
            newRow.insertCell(7).textContent = formulation.MixerName;
            //newRow.insertCell(8).textContent = `<a href="/BulkOrders/${formulation.FileNo }" class="btn btn-primary">View Bulk Order</a>`

            // Create a new cell for the button
            var buttonCell = newRow.insertCell(8);
            var viewButton = document.createElement('a');
            viewButton.href = `/customer/BulkOrders/${formulation.FileNo}`;
            viewButton.className = 'btn btn-primary';
            viewButton.textContent = 'View Bulk Order';
            buttonCell.appendChild(viewButton);

        });
    }

    // Function to format the date as "DD Month YYYY"
    function formatDate(dateString) {
        const date = new Date(dateString);
        const day = date.getDate();
        const monthIndex = date.getMonth();
        const year = date.getFullYear();

        const monthNames = [
            "January", "February", "March", "April", "May", "June", "July",
            "August", "September", "October", "November", "December"
        ];

        return `${day} ${monthNames[monthIndex]} ${year}`;
    }


    /*// Check if any of the variables are empty
     if (
         //startDate === "" &&
         //endDate === "" &&
         customerName === "" &&
         colorCode === "" &&
         colorName === "" &&
         dateRange === ""
     ) {
         // Display an alert if any of the variables are empty
         alert("Please fill in all the data.");
         return; // Stop further processing
     }*/

    function formatDateToApiFormat(dateString) {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }




    // Function to compare only the date parts (year, month, and day) of two dates
    function compareDatesOnly(date1, date2) {
        return (
            date1.getFullYear() === date2.getFullYear() &&
            date1.getMonth() === date2.getMonth() &&
            date1.getDate() === date2.getDate()
        );
    }

    function SearchFromForm() {
        // Get values from the input fields
        const startDate = formatDate(document.getElementById("StartDate").value);
        const endDate = formatDate(document.getElementById("EndDate").value);
        const customerName = document.getElementById("customerName").value;
        const colorCode = document.getElementById("colorCode").value;
        const colorName = document.getElementById("colorName").value;
        const dateRange = document.getElementById("DateRange").value;

        // Check if any of the variables are empty
        if (customerName === "" && colorCode === "" && colorName === "" && dateRange === "") {
            // Display an alert if any of the variables are empty
            alert("Please fill in at least one search criteria.");
            return; // Stop further processing
        }

        // Filter the Formulations array based on the search criteria
        let SearchedFormula = Formulations;

        // Check customerName and filter if there's a value
        if (customerName !== "") {
            SearchedFormula = SearchedFormula.filter(formulation => formulation.CustomerName.includes(customerName));
        }

        // Check colorCode and filter if there's a value
        if (colorCode !== "") {
            SearchedFormula = SearchedFormula.filter(formulation => formulation.ColorCode === colorCode);
        }

        // Check colorName and filter if there's a value
        if (colorName !== "") {
            SearchedFormula = SearchedFormula.filter(formulation => formulation.ColorName.includes(colorName));
        }

        // Check dateRange and filter if there's a value
        if (dateRange !== "") {
            const searchStartDate = new Date(startDate);
            const searchEndDate = new Date(endDate);

            SearchedFormula = SearchedFormula.filter(formulation => {
                const formulationDate = new Date(formulation.Date);

                // Check if the date falls within the search range
                const dateInRange = (
                    compareDatesOnly(formulationDate, searchStartDate) ||
                    compareDatesOnly(formulationDate, searchEndDate) ||
                    (formulationDate > searchStartDate && formulationDate < searchEndDate)
                );

                return dateInRange;
            });
        }

        // Call the populateTable function with the filtered results
        var SerachREsultCount = document.getElementById('SerachREsultCount');
        SerachREsultCount.style.display = "Flex";
        SerachREsultCount.textContent = SearchedFormula.length + " Records Found!"
        populateTable(SearchedFormula);
    }












    // new update 3.0



    /*
        // Get the input element by its ID
        const searchInput = document.getElementById("FormSearch");
    
        // Attach an event listener to the input element
        searchInput.addEventListener('input', function () {
            // Get the current value of the input
            const query = searchInput.value;
    
            // Perform the search
            const results = searchInFormulations(query);
    
            // Clear previous results
            const resultList = document.getElementById("FormSearchList");
            resultList.innerHTML = '';
    
            // Display new results
            results.forEach(result => {
                const resultDiv = document.createElement('div');
                resultDiv.textContent = result.name; // Assuming you want to display the 'name' field
                resultList.appendChild(resultDiv);
            });
        });
    
    
    
        function searchInFormulations(query) {
            // Filter Formulations based on the 'name' field
            return Formulations.filter(item => item.name.toLowerCase().includes(query.toLowerCase()));
        }
    */


</script>








<style>
    body {
        background-color: #eef0fd;
    }

    .main {
        display: block;
        margin-top: 60px;
        display: flex;
        flex-direction: column;
        align-items: start;
        margin-top: 80px;
        margin-left: 25px;
        padding-bottom: 5rem;
    }

    #fullscreen-popup {
        position: fixed;
        top: 0;
        bottom: 0;
        right: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(34, 37, 49, .7);
        z-index: 9999;
        overflow: hidden;
        display: none;
        justify-content: center;
        align-items: center;
    }

    .popupContent {
        width: 40rem;
        height: 18rem;
        background-color: rgb(229, 233, 242);
    }

    .PopHeaderDiv {
        display: flex;
        justify-content: space-between;
        padding-left: 3rem;
        padding-right: 2rem;
    }

    .PopHeader {
        font-size: 25px;
        font-weight: 600;
        margin-top: 2rem;
    }

    .Popclose-button {
        border: none;
        font-size: 30px;
        font-weight: 700;
        background-color: rgb(229, 233, 242);
        color: gray;
    }

    .Popclose-button:hover {
        color: rgb(20, 20, 20);
    }

    .PopUpDatesDiv {
        display: flex;
        justify-content: space-around;
    }

    .PopUpLabel {
        font-size: 20px;
        font-weight: 600;
        margin-top: 1rem;
        margin-left: 2rem;
    }

    #StartDate,
    #EndDate {
        padding: 1rem;
        margin-right: 2rem;
    }

    .PopButtonDiv {
        display: flex;
        justify-content: center;
    }

    .PopButtonDiv button {
        margin: 2rem;
        background-color: #3b3be1;
        padding: 1rem 2rem;
        color: whitesmoke;
        font-size: 20px;
        font-weight: 600;
    }

    .PopButtonDiv button:hover {
        background-color: #2121be;
    }

    .mainInner {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: left;
        height: 100%;
        margin: 0 auto;
        /* Add this line */
    }


    .mainInner div {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .newFromulaBTN {
        padding: .5rem 4rem;
        font-size: 20px;
        font-weight: 600;
        border-radius: 25px;
        background-color: #3b3be1;
        color: whitesmoke;
    }

    .newFromulaBTN:hover {
        background-color: #1111be;
        color: whitesmoke;
    }

    .EMSearchFormDiv {
        margin: 2rem 0;
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        width: 100%;
        flex-wrap: wrap
    }

    /*From Starts*/
    .input-container {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
    }

    label {
        font-size: 15px;
        margin: 0 1rem;
    }

    .InputContainerDate {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .autocomplete-input {
        border: 1px solid lightgray;
        border-left-color: blue;
        border-left-width: 5px;
        padding-left: 15px;
        font-size: 20px;
        font-weight: 600;
        margin: 0 1rem;
        border-radius: 14px;
        height: 3rem;

    }

    .SearchFormDiv {
        margin: 2rem 0;
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        width: 100%;
        flex-wrap: wrap;
    }

    .searchInput {
        position: relative;
        width: 60%;
    }

    .SearchInP {
        padding-right: 3rem;
        /* Add padding to make room for the icon */
        background-image: url('/images/Icons/Search_icon.svg');
        /* Replace with the actual path to your SVG image */
        background-position: right 0.5rem center;
        /* Position it on the right with a little padding and center it vertically */
        background-repeat: no-repeat;
        /* We don't want the icon to repeat */
        background-size: 1.5rem;
        /* Set the size of your icon */
        width: 100%;
    }

    .SearchInP:focus,
    #DateRange {
        outline: none;
        /* Add this if you also want to remove the border */
    }

    #dateRangeContainer {
        width: 37%;
    }


    .DateInputS {
        width: 100%;
        background-color: white;
    }

    .autocomplete-options {
        position: absolute;
        background-color: white;
        border: 1px solid lightgray;
        width: 200px;
        max-height: 200px;
        overflow-y: auto;
        display: none;
        z-index: 1;
        margin-top: 46px;
        margin-left: 1rem;
    }

    .autocomplete-options p {
        padding: 5px;
        margin: 0;
        cursor: pointer;
    }

    .autocomplete-options p:hover {
        background-color: lightgray;
    }

    .FormSubmitDivArea {
        display: flex;
        justify-content: start;
        width: 100%;
        margin-left: 35px;
    }

    .FormSearchBTN,
    .FormClearBTN {
        padding: .5rem 2rem;
        margin-right: 2rem;
        background-color: #3b3be1;
        color: whitesmoke;
        border-radius: 10px;
        border: none;
        font-weight: 600;
    }

    .FormClearBTN {
        background-color: gray;
    }

    /*Form ends*/

    hr {
        width: 100%
    }

    .SerachREsultCount {
        display: none;
        font-weight: 400;
    }

    /* CSS for the table header and cells */
    th,
    td {
        border: 1px solid #3b3be1;
        padding: 8px;
    }

    /* CSS for the table header */
    th {
        background-color: #3b3be1;
        color: white;
    }

    /* CSS for the table */
    table {
        border-collapse: collapse;
        border: 2px solid #3b3be1;
    }

    .SearchTableBody tr td {
        padding: 1rem;
    }
</style>