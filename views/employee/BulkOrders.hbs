<section>
    {{!-- loading screen start here --}}
    <div class="loading-screen" id="loadingScreen">
        <div class="loading-spinner">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
    </div>
    {{!-- loading screen ends here --}}


    <div class="AllBoDIv">
        {{#if UpdateOrder}}
        <form id="OrderForm" action="/UpdatedBulkOrder/{{Formulation.FileNo}}" method="post">
            {{else}}
            <form id="OrderForm" action="/BulkOrder/{{Formulation.FileNo}}" method="post">
                {{/if}}
                <div class="boSectionDiv">
                    <div class="BoAllArea">
                        <div class="BoHeader">
                            <p>Order</p>
                            <div class="BoHeaderBTNS">
                                <a class="btn BoClearBTN" href="">Clear All</a>
                                {{#if ManagerLogged}}
                                {{#if UpdateOrder}}
                                <a class="btn BoSaveBTN" href="/UpdatedEditFormula/{{Formulation.FileNo}}">Edit
                                    Formula</a>
                                {{else}}
                                <a class="btn BoSaveBTN" href="/EditFormula/{{Formulation.FileNo}}">Edit Formula</a>
                                {{/if}}
                                {{/if}}

                                <input class="btn BoSaveBTN" id="BoSaveBTN" type="submit" value="Stock Out">
                            </div>
                        </div>
                        <hr>
                        <div class="BoMainSection">
                            <div class="BoTopsection">
                                <div class="BoTopSection1">
                                    <div class="BoDateDiv OrderDateDiv">
                                        <label for="">Date </label>
                                        <input type="text" class="BoInpReadOnly OrderDateInp" name="order_date" id=""
                                            value="{{Formulation.Date}}" readonly>
                                    </div>
                                    <div class="BoDateDiv OrderFileDiv">
                                        <label for="">File No.</label>
                                        <input type="text" class="BoInpReadOnly FileNoInp" name="FileName"
                                            value="{{Formulation.FileNo}}" id="FileNO" readonly>
                                    </div>
                                    <div class="BoDateDiv">
                                        <label for="">Customer Name </label>
                                        <input type="text" class="BoInpReadAndWrite customerINp" name="CustomerName"
                                            value="{{Formulation.CustomerName}}" id="">
                                    </div>

                                    {{!-- <div class="BoCategory">
                                        <label for="">Category :</label>
                                        <input type="text" name="Category" value="{{Formulation.CategoryName}}" id=""
                                            readonly>
                                    </div> --}}
                                    <div class="BoDateDiv">
                                        <label for="">Color Code </label>
                                        <input type="text" class="BoInpReadOnly colorCodeInp" name="ColorCde"
                                            value="{{Formulation.ColorCode}}" id="" readonly>
                                    </div>
                                    <div class="BoDateDiv">
                                        <label for="">ColorName </label>
                                        <input type="text" class="BoInpReadOnly" name="ColorName"
                                            value="{{Formulation.ColorName}}" id="" readonly>
                                    </div>
                                    <div class="BoDateDiv">
                                        <label for="">Customer Ref </label>
                                        <input type="text" class="BoInpReadOnly" name="CustomerRef"
                                            value="{{Formulation.CustomerRef}}" id="" readonly>
                                    </div>
                                    <div class="BoDateDiv" hidden>
                                        <label for="">Mixer : </label>
                                        <input type="text" class="BoInpReadOnly" name="Mixer"
                                            value="{{Formulation.MixerName}}" id="" readonly>
                                    </div>
                                    <div class="BoDateDiv">
                                        <label for="">Project no </label>
                                        <input type="text" class="BoInpReadOnly" name="ProjectNo"
                                            value="{{Formulation.ProjectNo}}" id="" readonly>
                                    </div>
                                    {{!-- <div class="BoSubCategory">
                                        <label for="">Sub - Category</label>
                                        <input type="text" name="SubCategory" value="{{Formulation.SubCategoryName}}"
                                            id="" readonly>
                                    </div> --}}
                                    <div class="BoDateDiv">
                                        <label for="">Referance Image</label>
                                        <div class="BoRefImgDiv">
                                            {{!-- /images/RefImages/{{Formulation.FileNo}}.jpg --}}
                                            <img class="BoRefImg"
                                                src="data:image/jpeg;base64,{{Formulation.ImageBase64}}">
                                        </div>
                                    </div>

                                    {{!-- Last Area --}}

                                    <div class="BoBottomLeftSection">
                                        <div class="BoDateDiv BtSectionDiv">
                                            <label for="">Solid Content (%) : </label>
                                            <input type="text" class="BoInpReadOnly BTsectionINp" name="SolidContent"
                                                value="{{Formulation.SolidContent}}" id="" readonly>
                                        </div>
                                        <div class="BoDateDiv BtSectionDiv">
                                            <label for="">VOC (Kg/Ltr) : </label>
                                            <input type="text" class="BoInpReadOnly BTsectionINp" name="VOC"
                                                value="{{Formulation.VOC}}" id="" readonly>
                                        </div>
                                        <div class="BoDateDiv BtSectionDiv">
                                            <label for="">Density (Kg/Ltr) :</label>
                                            <input type="text" class="BoInpReadOnly BTsectionINp" name="Density"
                                                value="{{Formulation.Density}}" id="" readonly>
                                        </div>
                                        <div class="BoDateDiv BtSectionDiv">
                                            <label for="">Costing</label>
                                            <input type="text" class="BoInpReadOnly BTsectionINp" name="Costing"
                                                value="0" id="BoCosting" readonly>
                                        </div>
                                        <div class="BoDateDiv BtSectionDiv">
                                            <label for="">Sampled Qty : </label>
                                            <input type="text" class="BoInpReadOnly BTsectionINp" name="SampledQTY"
                                                value="{{Formulation.SampleQty}}" id="" readonly>
                                        </div>
                                    </div>


                                </div>

                                <div class="BoTopSection2">

                                    <div class="BoTopHeaderSec">

                                        <div class="BoCategory">
                                            <label for="">Category :</label>
                                            {{#if UpdateOrder}}
                                            <a href="/UpdatedEditFormula/{{Formulation.FileNo}}">
                                                <input type="text" name="Category" value="{{Formulation.CategoryName}}"
                                                    id="" readonly>
                                                <i class="fa fa-arrow-down"></i>
                                            </a>
                                            {{else}}
                                            <a href="/EditFormula/{{Formulation.FileNo}}">
                                                <input type="text" name="Category" value="{{Formulation.CategoryName}}"
                                                    id="" readonly>
                                                <i class="fa fa-arrow-down"></i>
                                            </a>
                                            {{/if}}
                                        </div>

                                        <div class="BoSubCategory">
                                            <label for="">Sub - Category :</label>
                                            {{#if UpdateOrder}}
                                            <a href="/UpdatedEditFormula/{{Formulation.FileNo}}">
                                                <input type="text" name="SubCategory"
                                                    value="{{Formulation.SubCategoryName}}" id="" readonly>
                                                <i class="fa fa-arrow-down"></i>
                                            </a>
                                            {{else}}
                                            <a href="/EditFormula/{{Formulation.FileNo}}">
                                                <input type="text" name="SubCategory"
                                                    value="{{Formulation.SubCategoryName}}" id="" readonly>
                                                <i class="fa fa-arrow-down"></i>
                                            </a>
                                            {{/if}}
                                        </div>
                                    </div>

                                    {{#if NoQty}}
                                    <div class="BOLowStockAlert">
                                        <p class="BoLowStocks">{{NoQty}}</p>
                                        <input type="text" value="0" id="BoTotalQTYLOW" hidden>
                                    </div>
                                    {{/if}}


                                    {{#if TotalQTY}}
                                    <div class="BOLowStockAlert">
                                        {{#if Item}}
                                        <p class="BoLowStocks">Stocks Not available for {{Item}}</p>
                                        {{else}}
                                        <p class="BoLowStocks">Stocks Not available for Products</p>
                                        {{/if}}
                                        <input type="text" value="{{TotalQTY}}" id="BoTotalQTYLOW" hidden>
                                    </div>
                                    {{/if}}
                                    <div class="BoTopSec2">
                                        <div class="BoEnterQuantityDiv">
                                            {{#if Liter}}
                                            <input type="text" id="isLiter" value="Liter" hidden />
                                            <label for="">Enter Quantity (in Ltr) : </label>
                                            {{else}}
                                            <input type="text" id="isLiter" value="" hidden />
                                            <label for="">Enter Quantity (in Kg) : </label>
                                            {{/if}}

                                            {{#if TotalQTY}}
                                            <input type="number" name="Quantity" value="{{TotalQTY}}" id="ProductQTY"
                                                required min="0">
                                            {{else}}
                                            {{#if QTY}}
                                            <input type="number" name="Quantity" value="{{QTY}}" id="ProductQTY"
                                                required min="0">
                                            {{else}}
                                            <input type="number" name="Quantity" value="" id="ProductQTY" required
                                                min="0">
                                            {{/if}}
                                            {{/if}}
                                        </div>

                                        <div class="BoEnterQuantityDiv">
                                            {{#if MattOrGloss}}
                                            <label for="">{{MattOrGloss}}</label>
                                            <input class="BoMattOrGloss" type="text" name="MattOrGloss"
                                                value="{{MattOrGlossValue}}" id="PrductQTY" readonly>
                                            {{/if}}
                                        </div>
                                    </div>

                                    <p class="text-center text-danger errorMSg">{{errorMessage}}</p>
                                    <div class="BOPriceApiError">
                                        <p id="BOPriceApiErrorText" class=""></p>
                                        <br>
                                        <input type="text" id="BOPriceApiErrorINP" name="PriceErr" hidden>
                                    </div>

                                    {{!--
                                    <hr> --}}
                                    {{#if UpdateOrder}}
                                    <input type="text" id="UpdatedOrder" value="UpdatedOrder" hidden>
                                    {{else}}
                                    <input type="text" id="UpdatedOrder" value="" hidden>
                                    {{/if}}

                                    <div class="BoTableDiv">


                                        {{!-- ADMainTable table table-bordered text-center ADcustom-border --}}
                                        {{!-- <table class="BoQTYTable BOQTYTable table table-bordered text-center">
                                            <thead class="BoTableHeader BOTableHeader">
                                                <th>Tinters</th>
                                                <th>QTY in Grams</th>
                                                <th>QTY in Volume</th>
                                            </thead>
                                            <tbody class="BoTAbleBody">
                                                <tr>
                                                    <td></td>
                                                    <td></td>
                                                    <td></td>
                                                </tr>
                                            </tbody>
                                        </table> --}}

                                        <table class="BoQTYTable" id="Tintertable">
                                            <thead class="QuantityHead">
                                                <tr>
                                                    <th class="SLTrow" rowspan="2">SL No.</th>
                                                    <th class="TiterRow" rowspan="2">Tinters</th>
                                                    <th colspan="2" class="quantity MainQuantity">Quantity</th>
                                                </tr>
                                                <tr>

                                                    <th class="quantity">in Grams</th>
                                                    <th class="quantity">in Volume</th>
                                                </tr>
                                            </thead>
                                            <tbody class="BoTAbleBody" id="TinterBody">

                                            </tbody>
                                        </table>
                                    </div>
                                    <div class="BoBelowTable">
                                        <div class="BoDataBelowTable">
                                            {{!--
                                            <hr> --}}
                                            <div class="BoBinderDIv">
                                                {{!-- <div class="BinderHeaderDiv">
                                                    <p class="BoBinderHeader">Binder </p>
                                                    <div class="BOBindersubHeadDiv">
                                                        <p class="BinderGVsubHead">In QTY</p>
                                                        <p class="BinderGVsubHead">In Volume</p>
                                                    </div>
                                                </div>
                                                <div class="BoBinder1Div">
                                                    <div class="BoBinderLeftSection">
                                                        <input type="text" class="BinderName" name="Binder1"
                                                            value="{{Formulation.Binder1Name}}" id="Binder1Name"
                                                            readonly>
                                                        <input type="text" name="Binder1Ratio" id="Binder1Ratio"
                                                            value="{{Formulation.Binder1Ratio}}" hidden>
                                                        <input type="text" name="Binder1QTY" id="Binder1QTY"
                                                            class="Binder1QTY" readonly>
                                                        <input type="text" name="Binder1Volume" id="Binder1Volume"
                                                            class="Binder1QTY" readonly>
                                                    </div>
                                                </div>
                                                {{#if Binder2}}
                                                <div class="BoBinder2Div">
                                                    <div class="BoBinderLeftSection">
                                                        <input type="text" class="BinderName" name="Binder2"
                                                            value="{{Formulation.Binder2Name}}" id="Binder2Name"
                                                            readonly>
                                                        <input type="text" name="Binder2Ratio" id="Binder2Ratio"
                                                            value="{{Formulation.Binder2Ratio}}" hidden>
                                                        <input type="text" name="Binder2QTY" id="Binder2QTY"
                                                            class="Binder2QTY" readonly>
                                                        <input type="text" name="Binder2Volume" id="Binder2Volume"
                                                            class="Binder2QTY" readonly>
                                                    </div>
                                                </div>
                                                {{/if}} --}}


                                                <div class="Add_BinderSectio">
                                                    <div class="WithouAdditvesSection">
                                                        <p class="DetailText">Total without Additives</p>
                                                        <div class="ReadOnlyInPSEct ">
                                                            <div class=" withoutAdditiveGrams BOQuantity">
                                                                <input type="text" readonly value="0"
                                                                    class="InputReadOnly" id="TotalGramsWithoutAddtives"
                                                                    name="TotalGramsWithoutAddtives">
                                                            </div>
                                                            <div class=" withoutAdditiveVolume BOQuantity"
                                                                style="border-top-right-radius: 8px;">
                                                                <input type="text" readonly value="0"
                                                                    class="InputReadOnly"
                                                                    id="TotalVolumeWithoutAddtives"
                                                                    name="TotalVolumeWithoutAddtives">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="BinderSection">
                                                        <p class="DetailText BindersText">Binders</p>
                                                        <div id="BinderCollections" class="BindersCollection">
                                                            <div id="Binder1Area" class="BindersArea">
                                                                <input type="text" id="Binder1Name"
                                                                    value="{{Formulation.Binder1Name}}"
                                                                    class="BinderNameText" readonly name="Binder1">
                                                                <input type="text" name="Binder1Ratio" id="Binder1Ratio"
                                                                    value="{{Formulation.Binder1Ratio}}" readonly
                                                                    hidden>

                                                                <div class="BindersInputArea Binder1Area">
                                                                    <div class="BindersInputDiv">
                                                                        <input type="text" value="0"
                                                                            class="BinderReadOnlyINp" id="Binder1QTY"
                                                                            name="Binder1QTY" readonly>
                                                                    </div>
                                                                    <div class="BindersInputDiv">
                                                                        <input type="text" value="0"
                                                                            class="BinderReadOnlyINp" id="Binder1Volume"
                                                                            name="Binder1Volume" readonly>
                                                                    </div>
                                                                </div>
                                                            </div>


                                                            <div id="Binder2Area" class="BindersArea">
                                                                <input type="text" id="Binder2Name"
                                                                    value="{{Formulation.Binder2Name}}"
                                                                    class="BinderNameText" name="Binder2" readonly>
                                                                <input type="text" name="Binder2Ratio" id="Binder2Ratio"
                                                                    value="{{Formulation.Binder2Ratio}}" readonly
                                                                    hidden>
                                                                <div class="BindersInputArea Binder2Area">
                                                                    <div class="BindersInputDiv">
                                                                        <input type="text" value=""
                                                                            class="BinderReadOnlyINp" id="Binder2QTY"
                                                                            name="Binder2QTY" readonly disabled>
                                                                    </div>
                                                                    <div class="BindersInputDiv">
                                                                        <input type="text" value=""
                                                                            class="BinderReadOnlyINp" id="Binder2Volume"
                                                                            name="Binder2Volume" readonly disabled>
                                                                    </div>
                                                                </div>
                                                            </div>


                                                        </div>
                                                    </div>
                                                    <div class="AdditiveSelection">
                                                        <div class="AdditiveSelectionArea">
                                                            <p class="DetailText AddtiveText">Additives</p>
                                                            <div class="AdditiveArea">
                                                                <input type="text" class="AdditveName" name="Additive"
                                                                    value="{{Formulation.AdditiveName}}"
                                                                    id="AdditiveName" readonly>
                                                                <input type="text" name="AdditiveRatio"
                                                                    id="AdditiveRatio"
                                                                    value="{{Formulation.AdditiveRatio}}" hidden>
                                                                {{!-- <select class="AdditiveSelect" name="additives"
                                                                    id="AdditiveSelect"
                                                                    onchange="HandleAdditiveChange()">
                                                                    <option value="" readonly selected>Select Additive
                                                                    </option>
                                                                    {{#each Additives}}
                                                                    <option value="{{this.Additive_Id}}">
                                                                        {{this.Additive_Name}}</option>
                                                                    {{/each}}
                                                                </select> --}}
                                                                <div class="AddPercentage">
                                                                    <input type="text" class="AdditivePerInp"
                                                                        name="AdditivePercentage"
                                                                        value="{{Formulation.AdditivePercentage}}"
                                                                        onchange="HandleAdditiveChange()"
                                                                        oninput="HandleAdditiveChange()"
                                                                        id="AdditivePercentage" value="0" readonly>
                                                                    <p class="DetailText PercentageSign">%</p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="AdditveInputArea">
                                                            <div class="AdditiveInpDiv">
                                                                <input type="text" id="AdditiveQTY" value="0"
                                                                    class="AdditiveInpReadOnly" name="AdditiveQTY"
                                                                    readonly>
                                                            </div>
                                                            <div class="AdditiveInpDiv">
                                                                <input type="text" id="AdditiveVolume" value="0"
                                                                    class="AdditiveInpReadOnly" name="AdditiveVolume"
                                                                    readonly>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="TotalSection">
                                                        <p class="DetailText">Total</p>
                                                        <div class="TotalInputArea"
                                                            style="border-bottom-right-radius: 8px;">
                                                            <div class="InputTotlaDiv">
                                                                <input type="text" value="0" id="Total_Gram"
                                                                    class="TotalInpReadOnly" name="TotalQtyInGram"
                                                                    readonly>
                                                            </div>
                                                            <div class="InputTotlaDiv"
                                                                style="border-bottom-right-radius: 8px;">
                                                                <input type="text" value="0" id="Total_Volume"
                                                                    name="TotalQtyInLiter" class="TotalInpReadOnly"
                                                                    readonly>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>

                                            {{!--
                                            <hr>
                                            <div class="BoAdditiveDiv">
                                                <div class="BinderHeaderDiv">
                                                    <p class="BoAdditiveHeader">Additives </p>
                                                    <div class="BOBindersubHeadDiv">
                                                        <p class="BinderGVsubHead">In QTY</p>
                                                        <p class="BinderGVsubHead">In Volume</p>
                                                    </div>
                                                </div>
                                                <div class="BOAdditiveMainSection">
                                                    <div class="BoAdditiveLeftSection">
                                                        <input type="text" class="AdditveName" name="Additive"
                                                            value="{{Formulation.AdditiveName}}" id="AdditiveName"
                                                            readonly>
                                                        <input type="text" name="AdditiveRatio" id="AdditiveRatio"
                                                            value="{{Formulation.AdditiveRatio}}" hidden>
                                                        <input type="text" name="AdditiveQTY" class="AdditiveQTY"
                                                            id="AdditiveQTY" readonly>
                                                        <input type="text" name="AdditiveVolume" class="AdditiveQTY"
                                                            id="AdditiveVolume" readonly>
                                                    </div>
                                                </div>
                                            </div> --}}
                                        </div>

                                        <div class="BoRemarksBoxArea">
                                            <div class="BoRemarksDIVBox">
                                                <div class="BoRemarkHeaderDiv">
                                                    <p class="BoRemarkHeader">Remarks</p>
                                                </div>
                                                <div class="BoRemarksPDiv">
                                                    <textarea name="remarks" id="BoRemarksTextArea" cols="" rows=""
                                                        readonly>{{Formulation.Remark}}</textarea>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="PrintBottons">
                                            <a href="/Printsmlabel/{{Formulation.FileNo}}" target="_blank"
                                                class="PrintBTN">Print Style 1</a>
                                            {{!-- <a href="/StockOut/PrintLabel/ST2/" target="_blank"
                                                class="PrintBTN">Print Style 2</a> --}}
                                            <input type="button" value="Print Style 2"
                                                onclick="alert('Design not shared!')" class="PrintBTN">
                                            {{!-- <a href="/StockOut/PrintLabel/ST3/{{Formulation.FileNo}}"
                                                target="_blank" class="PrintBTN">Print Style 3</a> --}}
                                            <input type="button" value="Print Style 3" onclick="StockoutAndPrintST3()"
                                                class="PrintBTN">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
    </div>
</section>

<script>
    // Get the input element
    const quantityInput = document.querySelector('input[name="Quantity"]');

    var BoTotalQTYLOW = parseFloat(document.getElementById('ProductQTY').value);
    if (BoTotalQTYLOW > 0) {
        // document.getElementById('ProductQTY').value = BoTotalQTYLOW.toString();
        QtyEnteredUser();
    }



    async function MakeCalculations(Responses) {

        function calculateAll(Responses) {

            var isLiters = document.getElementById("isLiter").value;
            var isLiter = false;

            if (isLiters) {
                isLiter = true;
            }


            // console.log(Responses);

            var TotalQTY = 0;
            var TotalVolume = 0;

            // Get the input element
            //const quantityInput = document.querySelector('input[name="Quantity"]');
            var InputedQTY = document.getElementById('ProductQTY').value;

            var Formula = Responses.Formulation;
            var Sub_Category = Responses.Sub_Category;

            // Get the parent table element
            var table = document.querySelector('.BoQTYTable');

            // Get the table body element
            var tableBody = table.querySelector('.BoTAbleBody');

            // console.log("tableBody.innerHTML: ", tableBody);
            // Remove all rows from the table body
            tableBody.innerHTML = '';

            var TintersCount = Formula.TintersCount;


            if (isLiter) {
                // do as the formula in liter
                for (var i = 1; i <= TintersCount; i++) {
                    // Create a new row element
                    var newRow = document.createElement('tr');

                    // Assign class to the new row element
                    newRow.classList.add('BoTableDataRow');

                    // Create cell elements for each column
                    var SerialNoCell = document.createElement('td');
                    var tinterNameCell = document.createElement('td');
                    var tinterGramCell = document.createElement('td');
                    var tinterVolumeCell = document.createElement('td');
                    // var tinterLiterCell = document.createElement('td');

                    var TinterQtyNameKey = 'GramInputTotalR' + i;

                    //Calculation of Tineters

                    var tinterNameKey = 'TinterNameR' + i;
                    var tinterName = Formula[tinterNameKey];

                    var TintersVolumeRatioArray = Formula.TintersVolumeRatioArray;
                    var tinterRatio = TintersVolumeRatioArray[i - 1];

                    InputedQTY = parseFloat(InputedQTY);
                    var TinterVolume = (tinterRatio * InputedQTY * 1000).toFixed(2);
                    TinterVolume = !isNaN(TinterVolume) ? TinterVolume : 0;

                    //Mass (in grams) = (Volume * Density) / 1000
                    var TineterQTY = ((TinterVolume * parseFloat(Formula[`TinterDensity${i}`])) / 1000).toFixed(2);
                    TineterQTY = !isNaN(TineterQTY) ? TineterQTY : 0;

                    // Customize cell elements by adding attributes
                    SerialNoCell.textContent = i
                    tinterNameCell.innerHTML = `<input type="text" name="TineterName${i}" class="TableTinterName" value="${tinterName}" id="TineterName${i}" readonly>`;
                    tinterGramCell.innerHTML = `<input type="text" name="TinterGram${i}" class="TableTinterGrams" value="${TineterQTY}" id="TinterGram${i}" readonly>`;
                    tinterVolumeCell.innerHTML = `<input type="text" name="TinterVolume${i}" class="TableTinterVolume" value="${TinterVolume}" id="TinterVolume${i}" readonly>`;
                    // tinterLiterCell.innerHTML = `<input type="text" name="TinterLiter${i}" id="TinterLiter${i}">`;


                    // different class for quantities
                    tinterGramCell.classList.add('quantity');
                    tinterVolumeCell.classList.add('quantity');

                    // Append cell elements to the row element
                    newRow.appendChild(SerialNoCell);
                    newRow.appendChild(tinterNameCell);
                    newRow.appendChild(tinterGramCell);
                    newRow.appendChild(tinterVolumeCell);
                    //  newRow.appendChild(tinterLiterCell);

                    // Append the new row element to the parent table
                    tableBody.appendChild(newRow);
                }


                // calculate Binder and Additive
                var FromulaVolume = parseFloat(Formula.TotalQtyInLiter)
                console.log("Formula: ", Formula);

                var Binder1Value = Formula.Binder1
                var Binder2Value = Formula.Binder2

                if (Binder1Value) {
                    InputedQTY = parseFloat(InputedQTY);
                    var Binder1VolumeRatio = parseFloat(Formula.Binder1VolumeRatio);
                    var Binder1Volume = (Binder1VolumeRatio * InputedQTY * 1000).toFixed(2);
                    console.log("InputedQTY:", InputedQTY, "  Binder1VolumeRatio:", Binder1VolumeRatio, "  Binder1Volume:", Binder1Volume);

                    //Mass (in grams) = (Volume * Density) / 1000
                    var Binder1QTY = ((Binder1Volume * parseFloat(Formula[`Binder1_Density`])) / 1000).toFixed(2);

                    console.log("Binder1QTY: ", Binder1QTY);
                    console.log("Binder1Volume: ", Binder1Volume);

                    //document.getElementById('Binder1QTY').value = Binder1QTY;
                    //put volume instead
                    document.getElementById('Binder1QTY').value = !isNaN(Binder1QTY) ? Binder1QTY : 0;
                    document.getElementById('Binder1Volume').value = !isNaN(Binder1Volume) ? Binder1Volume : 0;
                }

                if (Binder2Value) {
                    InputedQTY = parseFloat(InputedQTY);
                    var Binder2VolumeRatio = parseFloat(Formula.Binder2VolumeRatio);
                    var Binder2Volume = (Binder2VolumeRatio * InputedQTY * 1000).toFixed(2);

                    //Mass (in grams) = (Volume * Density) / 1000
                    var Binder2QTY = ((Binder2Volume * parseFloat(Formula[`Binder2_Density`])) / 1000).toFixed(2);

                    console.log("Binder2QTY: ", Binder2QTY);
                    console.log("Binder2Volume: ", Binder2Volume);

                    // document.getElementById('Binder2QTY').value = Binder2QTY;
                    //put volume instead

                    document.getElementById('Binder2QTY').value = !isNaN(Binder2QTY) ? Binder2QTY : 0;
                    document.getElementById('Binder2Volume').value = !isNaN(Binder2Volume) ? Binder2Volume : 0;
                }

                var AdditiveValue = Formula.TotalAdditives;
                if (AdditiveValue) {
                    InputedQTY = parseFloat(InputedQTY);
                    var AdditiveVolumeRatio = parseFloat(Formula.AdditiveVolumeRatio);
                    var AdditiveVolume = (AdditiveVolumeRatio * InputedQTY * 1000).toFixed(2);

                    //Mass (in grams) = (Volume * Density) / 1000
                    var additiveQty = ((AdditiveVolume * parseFloat(Formula[`Additive_Density`])) / 1000).toFixed(2);

                    console.log("additiveQty: ", additiveQty);
                    console.log("AdditiveVolume: ", AdditiveVolume);

                    // document.getElementById('AdditiveQTY').value = additiveQty;
                    //put volume instead
                    document.getElementById('AdditiveQTY').value = !isNaN(additiveQty) ? additiveQty : 0;
                    document.getElementById('AdditiveVolume').value = !isNaN(AdditiveVolume) ? AdditiveVolume : 0;
                }



            } else {
                // do as the formula in Kilogram
                // do as the formula in liter
                for (var i = 1; i <= TintersCount; i++) {
                    // Create a new row element
                    var newRow = document.createElement('tr');

                    // Assign class to the new row element
                    newRow.classList.add('BoTableDataRow');

                    // Create cell elements for each column
                    var tinterNameCell = document.createElement('td');
                    var tinterGramCell = document.createElement('td');
                    var tinterVolumeCell = document.createElement('td');
                    // var tinterLiterCell = document.createElement('td');

                    var TinterQtyNameKey = 'GramInputTotalR' + i;

                    //Calculation of Tineters

                    var tinterNameKey = 'TinterNameR' + i;
                    var tinterName = Formula[tinterNameKey];

                    var TintersRatioArray = Formula.TintersRatioArray;
                    var tinterRatio = TintersRatioArray[i - 1];

                    InputedQTY = parseFloat(InputedQTY);
                    var TinterQty = (tinterRatio * InputedQTY * 1000).toFixed(2);
                    TinterQty = !isNaN(TinterQty) ? TinterQty : 0;

                    //volume = (mass * density) /1000
                    var TinterVolume = ((TinterQty * parseFloat(Formula[`TinterDensity${i}`])) / 1000).toFixed(2);
                    TinterVolume = !isNaN(TinterVolume) ? TinterVolume : 0;

                    // Customize cell elements by adding attributes
                    tinterNameCell.innerHTML = `<input type="text" name="TineterName${i}" value="${tinterName}" id="TineterName${i}">`;
                    tinterGramCell.innerHTML = `<input type="text" name="TinterGram${i}" value="${TinterQty}" id="TinterGram${i}">`;
                    tinterVolumeCell.innerHTML = `<input type="text" name="TinterVolume${i}" value="${TinterVolume}" id="TinterVolume${i}">`;
                    // tinterLiterCell.innerHTML = `<input type="text" name="TinterLiter${i}" id="TinterLiter${i}">`;

                    // Append cell elements to the row element
                    newRow.appendChild(tinterNameCell);
                    newRow.appendChild(tinterGramCell);
                    newRow.appendChild(tinterVolumeCell);
                    //  newRow.appendChild(tinterLiterCell);

                    // Append the new row element to the parent table
                    tableBody.appendChild(newRow);
                }


                // calculate Binder and Additive
                var FromulaVolume = parseFloat(Formula.TotalQtyInLiter)

                var Binder1Value = Formula.Binder1
                var Binder2Value = Formula.Binder2

                if (Binder1Value) {
                    InputedQTY = parseFloat(InputedQTY);
                    var Binder1Ratio = parseFloat(Formula.Binder1Ratio);
                    var Binder1QTY = (Binder1Ratio * InputedQTY * 1000).toFixed(2);
                    console.log("InputedQTY:", InputedQTY, "  Binder1VolumeRatio:", Binder1Ratio, "  Binder1Volume:", Binder1QTY);

                    //volume = (mass * density) /1000
                    var Binder1Volume = ((Binder1QTY * parseFloat(Formula[`Binder1_Density`])) / 1000).toFixed(2);
                    console.log("Binder1QTY: ", Binder1QTY);
                    console.log("Binder1Volume: ", Binder1Volume);

                    document.getElementById('Binder1QTY').value = !isNaN(Binder1QTY) ? Binder1QTY : 0;
                    document.getElementById('Binder1Volume').value = !isNaN(Binder1Volume) ? Binder1Volume : 0;
                }

                if (Binder2Value) {
                    InputedQTY = parseFloat(InputedQTY);
                    var Binder2Ratio = parseFloat(Formula.Binder2VolumeRatio);
                    var Binder2QTY = (Binder2Ratio * InputedQTY * 1000).toFixed(2);

                    //volume = (mass * density) /1000
                    var Binder2Volume = ((Binder2QTY * parseFloat(Formula[`Binder2_Density`])) / 1000).toFixed(2);
                    console.log("Binder2QTY: ", Binder2QTY);
                    console.log("Binder2Volume: ", Binder2Volume);

                    document.getElementById('Binder2QTY').value = !isNaN(Binder2QTY) ? Binder2QTY : 0;
                    document.getElementById('Binder2Volume').value = !isNaN(Binder2Volume) ? Binder2Volume : 0;
                }

                var AdditiveValue = Formula.TotalAdditives;
                if (AdditiveValue) {
                    InputedQTY = parseFloat(InputedQTY);
                    var AdditiveRatio = parseFloat(Formula.AdditiveRatio);
                    var additiveQty = (AdditiveRatio * InputedQTY * 1000).toFixed(2);

                    //Mass (in grams) = (Volume * Density) / 1000
                    var AdditiveVolume = ((additiveQty * parseFloat(Formula[`Additive_Density`])) / 1000).toFixed(2);
                    console.log("additiveQty: ", additiveQty);
                    console.log("AdditiveVolume: ", AdditiveVolume);

                    document.getElementById('AdditiveQTY').value = !isNaN(additiveQty) ? additiveQty : 0;
                    document.getElementById('AdditiveVolume').value = !isNaN(AdditiveVolume) ? AdditiveVolume : 0;
                }


            }
        }


        await calculateAll(Responses); // Wait for calculateAll to complete
        TotalWithoutAdditivesandBinders()
        hideLoading();
        calculateCost(Responses); // Call calculateCost after calculateAll is completed
    }

    function TotalWithoutAdditivesandBinders() {
        var TableTinterGrams = document.getElementsByClassName('TableTinterGrams');
        var TableTinterVolume = document.getElementsByClassName('TableTinterVolume');

        var TotalTinterInGrams = 0;
        var TotalTintersInVolume = 0;


        var TinterCount = TableTinterGrams.length

        for (i = 0; i < TinterCount; i++) {
            TotalTinterInGrams += parseFloat(TableTinterGrams[i].value);
            TotalTintersInVolume += parseFloat(TableTinterVolume[i].value);
        }

        //  console.log("Total Tinter in GRams: ", TotalTinterInGrams, "  in Volume: ", TotalTintersInVolume);
        document.getElementById('TotalGramsWithoutAddtives').value = !isNaN(TotalTinterInGrams) ? TotalTinterInGrams.toFixed(2) : 0;
        document.getElementById('TotalVolumeWithoutAddtives').value = !isNaN(TotalTintersInVolume) ? TotalTintersInVolume.toFixed(2) : 0;

        TotalOfOrder()
    }

    function TotalOfOrder() {
        var TotalTinterInGrams = parseFloat(document.getElementById('TotalGramsWithoutAddtives').value) || 0;
        var TotalTintersInVolume = parseFloat(document.getElementById('TotalVolumeWithoutAddtives').value) || 0;

        var Binder1QTY = parseFloat(document.getElementById('Binder1QTY').value) || 0;
        var Binder1Volume = parseFloat(document.getElementById('Binder1Volume').value) || 0;

        var Binder2QTY = parseFloat(document.getElementById('Binder2QTY').value) || 0;
        var Binder2Volume = parseFloat(document.getElementById('Binder2Volume').value) || 0;

        var AdditiveQTY = parseFloat(document.getElementById('AdditiveQTY').value) || 0;
        var AdditiveVolume = parseFloat(document.getElementById('AdditiveVolume').value) || 0;

        var TotalQty = TotalTinterInGrams + Binder1QTY + Binder2QTY + AdditiveQTY;
        var TotalVolume = TotalTintersInVolume + Binder1Volume + Binder2Volume + AdditiveVolume;

        console.log("Total Quantity:", TotalQty);
        console.log("Total Volume:", TotalVolume);

        document.getElementById('Total_Gram').value = TotalQty.toFixed(2);
        document.getElementById('Total_Volume').value = TotalVolume.toFixed(2);

    }


    function calculateCost(Responses) {
        // alert("Calculating Cost");
        Responses = Responses.Formulation;
        //console.log("Caliing Cost : ", Responses);

        var Binder1_Cost = 0;
        var Binder2_Cost = 0;
        var Additve_Cost = 0;
        var TinterTotalCost = 0;

        if (Responses.Binder1) {
            var Binder1 = parseFloat(document.getElementById('Binder1QTY').value);

            if (Binder1 > 0) {

                //console.log(Binder1);

                var Binder1PriceRatio = parseFloat(Responses.Binder1Price);
                var Binder1PriceUnit = Responses.Binder1PriceUnit;
                // var Binder1_Density = parseFloat(Responses.Binder1_Density)
                //console.log("Binder1 Cost : ", Binder1);
                var Binder1name = document.getElementById("Binder1Name").value;

                if (!Binder1PriceRatio) {
                    //alert("Price is not assigned to " + Binder1name);
                    document.getElementById("BoSaveBTN").disabled = true;
                    // Find the element with the class name "errorMSg"
                    var errorMsgElement = document.querySelector('.errorMSg');

                    // Check if the element exists before updating its text content
                    if (errorMsgElement) {
                        // Update the text content of the element
                        errorMsgElement.textContent = "Price is not assigned to " + Binder1name; // Replace 'New Error Message' with your desired text
                    }
                }

                if (Binder1PriceUnit === 'Ltr') {
                    var Binder1InVolume = parseFloat(document.getElementById("Binder1Volume").value);
                    Binder1_Cost = (Binder1InVolume / 1000) * Binder1PriceRatio;
                    //Total Volume of Formulation = (Total Quantity of Formulation / Density of Formulation) * 1000
                    // var Binder1_Liter = (Binder1 / Binder1_Density) //* 1000;
                    //Binder1_Cost = Binder1_Liter * Binder1PriceRatio

                } else if (Binder1PriceUnit === 'kg') {
                    var Binder1InQty = parseFloat(document.getElementById("Binder1QTY").value);
                    Binder1_Cost = (Binder1InQty / 1000) * Binder1PriceRatio;
                } else {
                    // alert("Price Unit is not assigned to " + Binder1name);
                    document.getElementById("BoSaveBTN").disabled = true;
                    // Find the element with the class name "errorMSg"
                    var errorMsgElement = document.querySelector('.errorMSg');

                    // Check if the element exists before updating its text content
                    if (errorMsgElement) {
                        // Update the text content of the element
                        errorMsgElement.textContent = "Price Unit is not assigned to " + Binder1name; // Replace 'New Error Message' with your desired text
                    }
                }
            }
        }

        if (Responses.Binder2) {
            var Binder2 = parseFloat(document.getElementById('Binder2QTY').value);
            if (Binder2 > 0) {

                //console.log(Binder2);

                var Binder2PriceRatio = parseFloat(Responses.Binder2Price);
                var Binder2PriceUnit = Responses.Binder2PriceUnit;
                //var Binder2_Density = parseFloat(Responses.Binder2_Density)
                var Binder2name = document.getElementById("Binder2Name").value;

                if (!Binder2PriceRatio) {
                    // alert("Price is not assigned to " + Binder2name);
                    document.getElementById("BoSaveBTN").disabled = true;
                    // Find the element with the class name "errorMSg"
                    var errorMsgElement = document.querySelector('.errorMSg');

                    // Check if the element exists before updating its text content
                    if (errorMsgElement) {
                        // Update the text content of the element
                        errorMsgElement.textContent = "Price is not assigned to " + Binder2name; // Replace 'New Error Message' with your desired text
                    }
                }

                if (Binder2PriceUnit === 'Ltr') {
                    //Total Volume of Formulation = (Total Quantity of Formulation / Density of Formulation) * 1000
                    //var Binder2_Liter = (Binder2 / Binder2_Density) //* 1000;
                    //Binder2_Cost = Binder2_Liter * Binder2PriceRatio
                    var Binder2InVolume = parseFloat(document.getElementById("Binder2Volume").value);
                    Binder2_Cost = (Binder2InVolume / 1000) * Binder2PriceRatio;

                } else if (Binder2PriceUnit === 'kg') {
                    var Binder2InQty = parseFloat(document.getElementById("Binder2QTY").value);
                    Binder2_Cost = (Binder2InQty / 1000) * Binder2PriceRatio;
                } else {
                    // alert("Price Unit is not assigned to " + Binder2name);
                    document.getElementById("BoSaveBTN").disabled = true;
                    // Find the element with the class name "errorMSg"
                    var errorMsgElement = document.querySelector('.errorMSg');

                    // Check if the element exists before updating its text content
                    if (errorMsgElement) {
                        // Update the text content of the element
                        errorMsgElement.textContent = "Price Unit is not assigned to " + Binder2name; // Replace 'New Error Message' with your desired text
                    }
                }
            }
        }

        if (Responses.AdditivePercentage) {
            var Additive = parseFloat(document.getElementById('AdditiveQTY').value);

            if (Additive > 0) {

                // console.log(Additive);

                var AdditivePriceRatio = parseFloat(Responses.AdditivePrice);
                var AdditivePriceUnit = Responses.AdditivePriceUnit;
                // var Additive_Density = parseFloat(Responses.Additive_Density);
                var AdditiveName = document.getElementById("AdditiveName").value;
                if (!AdditivePriceRatio) {
                    //alert("Price is not assigned to " + AdditiveName);
                    document.getElementById("BoSaveBTN").disabled = true;
                    // Find the element with the class name "errorMSg"
                    var errorMsgElement = document.querySelector('.errorMSg');

                    // Check if the element exists before updating its text content
                    if (errorMsgElement) {
                        // Update the text content of the element
                        errorMsgElement.textContent = "Price is not assigned to " + AdditiveName; // Replace 'New Error Message' with your desired text
                    }
                }


                if (AdditivePriceUnit === 'Ltr') {
                    //Total Volume of Formulation = (Total Quantity of Formulation / Density of Formulation) * 1000
                    var Additive_Liter = parseFloat(document.getElementById("AdditiveVolume").value);
                    var Additve_Cost = (Additive_Liter / 1000) * AdditivePriceRatio;
                } else if (AdditivePriceUnit === 'kg') {
                    Additve_Cost = (Additive / 1000) * AdditivePriceRatio;
                } else {
                    //alert("Price Unit is not assigned to " + AdditiveName);
                    document.getElementById("BoSaveBTN").disabled = true;
                    // Find the element with the class name "errorMSg"
                    var errorMsgElement = document.querySelector('.errorMSg');

                    // Check if the element exists before updating its text content
                    if (errorMsgElement) {
                        // Update the text content of the element
                        errorMsgElement.textContent = "Price Unit is not assigned to " + AdditiveName; // Replace 'New Error Message' with your desired text
                    }
                }
            }
        }

        var TinterCount = parseInt(Responses.TintersCount);

        for (var i = 1; i <= TinterCount; i++) {
            var TinterQTYRatio = parseFloat(Responses.TintersRatioObject[`${i}`]);
            var TinterPriceRatio = parseFloat(Responses[`TinterPriceR${i}`]);
            var TinterPriceUnit = Responses[`TinterPriceUnit${i}`];
            var TinterVolume = parseFloat(document.getElementById(`TinterVolume${i}`).value);
            var TinterQTY = parseFloat(document.getElementById(`TinterGram${i}`).value);
            var TinterName = document.getElementById(`TineterName${i}`).value
            //var TinterDensity = parseFloat(Responses[`TinterDensity${i}`]);

            //console.log("Tinter calculating");
            //console.log(TinterQTYRatio);

            if (!TinterPriceRatio) {
                // alert("Price is not assigned to " + TinterName);
                document.getElementById("BoSaveBTN").disabled = true;
                // Find the element with the class name "errorMSg"
                var errorMsgElement = document.querySelector('.errorMSg');

                // Check if the element exists before updating its text content
                if (errorMsgElement) {
                    // Update the text content of the element
                    errorMsgElement.textContent = "Price is not assigned to " + TinterName; // Replace 'New Error Message' with your desired text
                }
            }



            var TinterCost = 0;

            if (TinterPriceUnit === 'Ltr') {

                TinterCost = (TinterVolume / 1000) * TinterPriceRatio

            } else if (TinterPriceUnit === 'kg') {
                TinterCost = (TinterQTY / 1000) * TinterPriceRatio
            } else {
                //alert("Price Unit is not assigned to " + TinterName);
                document.getElementById("BoSaveBTN").disabled = true;
                // Find the element with the class name "errorMSg"
                var errorMsgElement = document.querySelector('.errorMSg');

                // Check if the element exists before updating its text content
                if (errorMsgElement) {
                    // Update the text content of the element
                    errorMsgElement.textContent = "Price Unit is not assigned to " + TinterName; // Replace 'New Error Message' with your desired text
                }
            }
            // console.log("Tinter ", i, "Cost : ", TinterCost)

            TinterTotalCost += TinterCost;
        }

        //after all the process is finished to this process
        var TotalCost = Binder1_Cost + Binder2_Cost + Additve_Cost + TinterTotalCost
        // console.log("TotalCost:", TotalCost, " Binder1_Cost:", Binder1_Cost, " Binder2_Cost: ", Binder2_Cost, " Additve_Cost:", Additve_Cost, "  TinterTotalCost :", TinterTotalCost)

        document.getElementById('BoCosting').value = TotalCost.toFixed(2).toString();

        hideLoading();

    }





    // Function to be executed when the input changes
    function QtyEnteredUser() {

        var isUpdatedFormula = false;
        const UpdatedFlag = document.getElementById("UpdatedOrder").value;
        var isLiters = document.getElementById("isLiter").value;
        var isLiter = false;

        if (isLiters) {
            isLiter = true;
        }

        if (UpdatedFlag !== "") {
            isUpdatedFormula = true;
        }

        showLoading();
        // Your code logic here
        //console.log("QtyEnteredUser() function executed");

        // var ProductQty = document.getElementById('ProductQTY').value;


        //api
        const fileNo = document.getElementById('FileNO').value;

        // Create a new XMLHttpRequest object
        const xhr = new XMLHttpRequest();

        // Set up the API endpoint URL with the file number parameter
        var url = "";

        if (isUpdatedFormula) {
            url = `/api/BulkOrder/Updated/${fileNo}`;
        } else {
            url = `/api/BulkOrder/${fileNo}`;
        }

        // Set up the HTTP method and URL
        xhr.open('GET', url, true);

        // Set the response type
        xhr.responseType = 'json';

        // Define the success callback function
        xhr.onload = function () {
            if (xhr.status === 200) {
                const response = xhr.response;
                // Process the response data here
                // console.log(response);
                MakeCalculations(response);
            } else {
                // Handle error case
                console.error('Error:', xhr.status);
            }
        };

        // Define the error callback function
        xhr.onerror = function () {
            console.error('Request failed');
        };

        // Send the request
        xhr.send();

    }


    // Add event listener to the input element
    quantityInput.addEventListener('input', QtyEnteredUser);


    /* var loadingScreen = document.getElementById("loadingScreen");*/
    var form = document.getElementById("OrderForm");

    function showLoading() {
        var loadingScreen = document.getElementById("loadingScreen");
        var form = document.getElementById("OrderForm");

        if (form) {
            form.addEventListener("submit", preventFormSubmit);
        }
        loadingScreen.style.display = "flex";
    }

    function hideLoading() {
        var loadingScreen = document.getElementById("loadingScreen");
        var form = document.getElementById("OrderForm");

        loadingScreen.style.display = "none";
        form.removeEventListener("submit", preventFormSubmit);
    }

    function preventFormSubmit(event) {
        event.preventDefault();
    }

    form.addEventListener("submit", showLoading);

    // Define a function to be executed when the page is loaded
    function ValidateForProcced() {
        const errorTextElement = document.getElementById('BOPriceApiErrorText').textContent;
        if (errorTextElement) {
            // console.log(errorTextElement+ 114);
            var BoSaveBTN = document.getElementById('BoSaveBTN');
            BoSaveBTN.disabled = true;
        } else {
            var BoSaveBTN = document.getElementById('BoSaveBTN');
            BoSaveBTN.disabled = false;
        }

    }

    // Add an event listener to the 'DOMContentLoaded' event
    document.addEventListener('DOMContentLoaded', ValidateForProcced);



    function StockoutAndPrintST3() {
        var ProductQTY = parseFloat(document.getElementById('ProductQTY').value);

        if (ProductQTY > 0) {
            // Display a confirmation dialog
            var userConfirmed = window.confirm("By clicking OK, the order will be marked as 'Stocked Out,' and a label will be generated for print. Are you sure you want to proceed?");

            // Check if the user confirmed
            if (userConfirmed) {
                // Get the form element
                var form = document.getElementById('OrderForm');

                // Change the action attribute
                var OldUrl = form.action;
                var Url = OldUrl + '/printST3';
                form.action = Url; // Replace with the desired URL

                // Set the target attribute to '_blank' to open the result in a new tab or window
                form.target = '_blank';

                // Submit the form
                form.submit();

                // Set the target attribute back to '' to open the result in the same tab or window
                form.target = '';

                // Change the action attribute back to the original URL
                form.action = OldUrl; // Replace with the desired URL
            } else {
                // User canceled, do nothing or provide feedback
            }
        } else {
            alert("Please enter a quantity greater than zero!");
        }
    }


</script>

<style>
    .AllBoDIv {
        background-color: #eef0fd;
        margin-top: -80px;
    }

    .BoHeader p {
        font-size: 30px;
        font-weight: 600;
        margin: 28px 12px;
    }

    .BoHeader {
        display: flex;
        justify-content: space-between;
    }

    .BoClearBTN {
        background-color: gray;
        padding: 1rem 2rem;
        margin: 0 1rem;
        margin-top: 16px;
        color: #eef0fd;
        font-weight: 700;
        letter-spacing: 3px;
    }

    .BoSaveBTN {
        padding: 1rem 2rem;
        margin: 0 1rem;
        margin-top: 16px;
        color: #eef0fd;
        font-weight: 700;
        letter-spacing: 3px;
        background-color: #3b3be1;
    }

    .boSectionDiv {
        margin: 0 auto;
        padding: 20px 30px;
        margin-top: -4rem;
        width: 100%;
        padding-bottom: 10rem;
    }

    .BoTopsection {
        display: flex;

    }

    .BoTopSection1 {
        width: 25%;
        padding: 0rem 1rem;
    }

    .BoDateDiv {
        display: flex;
        justify-content: space-between;
        flex-direction: column;
    }

    .BoInpReadOnly,
    .BoInpReadAndWrite {
        margin-top: 5px;
        color: #292929;
        padding: 5px;
        font-size: 15px;
        width: 100%;
        border-radius: 5px;
        font-size: 20px;
        font-weight: 600;
        background-color: #e0e0e0;
    }

    .OrderDateDiv,
    .OrderFileDiv {
        display: flex;
        gap: 1rem;
        flex-direction: row;
        justify-content: flex-start;
    }

    .OrderDateInp,
    .FileNoInp {
        background-color: #575b5b;
        color: #e2e2e2;
        width: 10rem;
    }

    .BoInpReadAndWrite {
        background-color: #cfd1dc;
        color: black;
    }

    .BoDateDiv label {
        font-size: 15px;
        font-weight: 600;
        margin-top: 1rem;
    }

    .BoRefImgDiv {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1rem 0;
    }

    .BoRefImg {
        min-height: auto;
        max-height: 10vw;
        width: auto;
    }

    .customerINp,
    .colorCodeInp {
        background-color: #ffff00;
    }

    .BoInpReadOnly,
    .BoInpReadAndWrite {
        border: none;
        outline: none;
    }

    .BtSectionDiv {
        flex-direction: row;
    }

    .BTsectionINp {
        width: 12rem;
    }


    .BoTopSection2 {
        width: 84%;
        padding: 0 2rem;
    }

    .BoTopHeaderSec,
    .BoTopSec2 {
        display: flex;
        justify-content: space-between;
        width: 100%;
        padding: 17px 21px 11px 37px;
    }

    .BoCategory,
    .BoSubCategory,
    .BoEnterQuantityDiv {
        display: flex;
        width: 50%;
    }

    .BoCategory label,
    .BoSubCategory label,
    .BoEnterQuantityDiv label {
        font-size: 16px;
        font-weight: 600;
        text-align: left !important;
        margin-right: 1.5rem;
        margin-top: 10px;
    }

    .BoCategory input[type="text"],
    .BoSubCategory input[type="text"],
    .BoMattOrGloss {
        font-size: 20px;
        font-weight: 600;
        text-align: left !important;
        padding: 11px 11px;
        border: transparent;
        background-color: #ffff00;
    }

    .BoCategory i,
    .BoSubCategory i {
        position: absolute;
        top: 50%;
        right: 10px;
        /* Adjust the right offset to position the icon as needed */
        transform: translateY(-50%);
    }

    /* Example of Font Awesome usage (assuming you've included Font Awesome CSS) */
    i.fa.fa-arrow-down::before {
        content: "\f063";
        /* Unicode character for the down arrow icon */
        font-family: FontAwesome;
        font-style: normal;
        font-weight: normal;
        text-decoration: inherit;
    }

    .BOLowStockAlert {
        width: 100%;
        display: flex;
        justify-content: center;
        color: red;
        font-weight: 600;
        align-items: center;
        margin: 0;
    }

    .BOLowStockAlert p {
        margin: 0;
    }

    .BOQTYTable {
        border-color: #636363;
    }

    td input[type="text"] {
        border: none;
        background-color: transparent;
        font-size: 20px;
        font-weight: 600;
        text-align: center;
        width: 100%;
    }

    #ProductQTY,
    #PrductQTY {
        font-size: 20px;
        font-weight: 600;
        width: 8rem;
        background-color: #ffff00;
        padding: .5rem;
        border: none;
        outline: none;
    }

    .BoDataBelowTable {
        width: 100%;
    }

    .BoBindersAndAdditivesUnits {
        display: flex;
        justify-content: space-around;
    }

    .BoLabelWithoutAdditivesDiv {
        width: 40%;
        height: 81px;
        display: flex;
        align-items: end;
        justify-content: start;
    }

    .BoeachUnit {
        width: 30%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .BoeachUnit input[type="text"] {
        width: 70%;
    }

    .BinderHeaderDiv {
        display: flex;
    }

    .BoBinderHeader,
    .BoAdditiveHeader {
        width: 13rem;
    }

    .BOBindersubHeadDiv {
        display: flex;
    }

    .BinderGVsubHead {
        margin: 0 2rem;
    }

    .BinderName,
    .AdditveName {
        border: none;
        background: transparent;
        margin-bottom: 1rem;
    }

    .AdditveName {
        margin-bottom: 0;
    }

    .Binder1QTY,
    .Binder2QTY,
    .AdditiveQTY,
    #Binder1Volume,
    #Binder2Volume {
        border: none;
        background: none;
        padding: .5rem;
        max-width: 7rem;
    }

    .BoAdditiveHeader {
        margin-top: 1.5rem;
    }

    .BoRemarksBoxArea {
        width: 100%;
    }

    .BoBelowTable {
        width: 100%;
        display: flex;
        justify-content: space-between;
        flex-direction: column;
        gap: 2rem;
    }

    .BoRemarksDIVBox {
        margin-top: 0rem;
        width: 100%;
        border: 1px solid rgba(0, 0, 0, 0.319);
        background-color: #575b5b;
        border-radius: 5px;
        margin-bottom: 5rem;
    }

    .BoRemarkHeaderDiv {
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        background-color: #575b5b;
        width: 100%;
        color: white;
        font-size: 18px;
        font-weight: 600;
        border-bottom: 1px solid #20c3c3;
    }

    .BoRemarkHeaderDiv p {
        margin-top: 1rem;
    }

    .BoRemarksPDiv {
        height: 10rem;
        padding: 1rem;
        color: whitesmoke;
        width: 100%;
    }

    #BoRemarksTextArea {
        background-color: transparent;
        width: 100%;
        border: none;
        color: whitesmoke;
        font-size: 20px;
        height: 5rem;
    }



    /*Loading styles*/

    .loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        display: none;
    }

    .loading-spinner {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .dot {
        width: 10px;
        height: 10px;
        background-color: #3498db;
        border-radius: 50%;
        animation: loadingAnimation 1s infinite;
    }

    @keyframes loadingAnimation {

        0%,
        100% {
            transform: scale(0.2);
        }

        50% {
            transform: scale(1);
        }
    }

    #Tintertable,
    #TinterQuantityTable {
        border: none;
        overflow: hidden;
        border-radius: 8px;
    }

    .TinterQuantityTable {
        border: none;
        overflow: hidden;
        border-radius: 8px;
    }

    table {
        border-collapse: collapse;
        width: 100%;
        margin: 20px 0;
    }

    .SLTrow {
        width: 3rem;
    }

    .TiterRow {
        /*width: 20rem;*/
    }

    th,
    td {
        border-bottom: 1px solid #20c3c3;
        border-left: 1px solid #20c3c3;
        /* border: 1px solid #20c3c3;*/
        padding: 10px;
        text-align: center;
    }

    th {
        background-color: #575b5b;
        color: white;
    }

    td {
        background-color: #575b5b;
        color: white;
    }

    .quantity {
        background-color: #cfd1dc;
        color: #4e5570;
        /* width: 20%;*/
    }

    .TableTinterName {
        color: white;
    }



    .Add_BinderSectio {
        width: 100%;
        background-color: #575b5b;
        border-radius: 9px;
    }

    .DetailText {
        font-size: 15px;
        color: white;
    }

    .WithouAdditvesSection,
    .BinderSection,
    .BindersArea {
        display: flex;
        justify-content: space-between;
    }

    .ReadOnlyInPSEct {
        display: flex;
        justify-content: end;
        width: 35%;
    }

    .InputRead {
        width: 100%;
    }

    .withoutAdditiveVolume,
    .withoutAdditiveGrams {
        background-color: #cfd1dc;
        color: #4e5570;
        width: 20rem;
        border-left: 1px solid #20c3c3;
    }

    .DetailText {
        margin-top: 1rem;
        margin-left: 1rem;
    }



    .WithouAdditvesSection {
        border-bottom: 1px solid #20c3c3;
    }

    .BinderNameText,
    .AdditveName {
        background-color: transparent;
        text-align: left;
        border: none;
        outline: none;
        color: white;
        margin-top: 10px;
    }

    .BinderSection {
        gap: 2rem;
        border-bottom: 1px solid #20c3c3;
    }

    .BindersText {
        margin-top: 10px;
    }

    .BindersInputArea {
        display: flex;
        justify-content: end;
        background-color: #cfd1dc;
        color: #4e5570;
    }

    .BindersInputDiv {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        border-left: 1px solid #20c3c3;
    }

    .BinderReadOnlyINp {
        background-color: transparent;
        width: 100%;
        border: none;
        outline: none;
        padding: 7px;
        text-align: center;
        color: #4e5570;
    }

    .AdditiveSelection {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        border-bottom: 1px solid #20c3c3;
    }

    .AdditiveSelectionArea {
        display: flex;
        align-items: baseline;
        padding: .5rem 0;
    }

    .AdditiveArea,
    .AdditveInputArea {
        display: flex;
        align-items: baseline;
    }

    .AdditiveSelect {
        width: 8rem;
        border: none;
        outline: none;
        border-radius: 10px;
        background-color: #cfd1dc;
        color: #3e4562;
        margin: 0 1rem;
        padding: 0.2rem;
    }

    .AdditivePerInp {
        width: 3rem;
        border: none;
        outline: none;
        border-radius: 10px;
        background-color: #cfd1dc;
        color: #3e4562;
        padding: 0.2rem .5rem;
    }

    .PercentageSign {
        margin: 0;
        margin-left: 0.5rem;
        margin-right: 1rem;
    }

    .AdditveInputArea {
        display: flex;
        justify-content: start;
        background-color: #cfd1dc;
        color: #4e5570;
        width: 100%;
    }

    .AdditiveInpDiv {
        padding: .5rem 0;
        width: 50%;
        border-left: 1px solid #20c3c3;
    }

    .AdditiveInpReadOnly,
    .TotalInpReadOnly {
        background-color: transparent;
        width: 100%;
        border: none;
        outline: none;
        padding: 7px;
        text-align: center;
        color: #4e5570;
    }

    .AddtiveText {
        margin: 0 1rem;
    }

    .TotalSection {
        display: flex;
        justify-content: space-between;
    }

    .TotalInputArea {
        display: flex;
        justify-content: end;
        display: flex;
        justify-content: end;
        background-color: #cfd1dc;
        color: #4e5570;
        width: 35%;
    }

    .InputTotlaDiv {
        padding: .5rem 0;
        width: 8rem;
        border-left: 1px solid #20c3c3;
        width: 50%;
    }


    .InputReadOnly {
        box-sizing: border-box;
        text-align: center;
        background: transparent;
        outline: none;
        border: none;
        color: #4e5570;
        width: 100%;
        margin-top: 1rem;
    }

    .MainQuantity {
        width: 35%;
    }

    #Binder1Volume,
    #Binder2Volume {
        width: 100%;
    }

    .BindersCollection {
        width: 70%;
        display: flex;
        flex-direction: column;
        justify-content: end;
        align-items: end;
    }

    .BindersArea {
        display: flex;
        justify-content: space-between;
        width: 100%;
    }

    .Binder1Area,
    .Binder2Area {
        width: 50%;
    }

    .AdditiveSelectionArea {
        width: 65%;
        display: flex;
        justify-content: space-between;
    }

    .AdditiveArea {
        width: 60%;
        display: flex;
        gap: 1rem;
    }

    .AddPercentage {
        display: flex;
    }

    .AdditveInputArea {
        width: 35%;
    }

    .PrintBottons {
        width: 100%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        padding: 2rem;
    }

    .PrintBTN {
        background-color: #141919;
        color: #bebfbf;
        padding: 1rem 2rem;
        border-radius: 10px;
        font-size: 15px;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        text-underline-offset: none;
    }

    .PrintBTN:hover {
        background-color: #4d4d4d;
        color: #e9e9e9;
    }
</style>