<div id="loadingIndicator" class="popup">
    <div class="popup-content">
        <div class="loader"></div>
        <p>Saving Formula...</p>
    </div>
    <style>
        .popup {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
        }

        .popup-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fff;
            padding: 20px;
            text-align: center;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-around;
            align-items: center;
            flex-direction: column;
        }

        .popup-content p {
            font-size: 20px;
            font-weight: 600;
        }


        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .page-content {
            padding: 20px;
        }
    </style>
</div>

<section>

    {{!-- loading screen start here --}}
    <div class="loading-screen" id="loadingScreen">
        <div class="loading-spinner">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
        </div>
    </div>

    <style>
        /*Loading styles*/

        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            display: none;
        }

        .loading-spinner {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .dot {
            width: 10px;
            height: 10px;
            background-color: #3498db;
            border-radius: 50%;
            animation: loadingAnimation 1s infinite;
        }

        @keyframes loadingAnimation {

            0%,
            100% {
                transform: scale(0.2);
            }

            50% {
                transform: scale(1);
            }
        }
    </style>
    {{!-- loading screen ends here --}}


    {{#if CustomerName}}
    <form id="uploadForm" action="/Customer/CreateFormula" method="post" enctype="multipart/form-data">
        {{else}}
        <form id="uploadForm" action="/CreateFormula" method="post" enctype="multipart/form-data">
            {{/if}}
            <div class="CreateFormulaMainDivArea">
                <div class="containers">
                    <div class="CFMainHeader">
                        <h2 class="CFheader">Edit Formula</h2>
                        <div class="CFMinHeaderBTNs">
                            <a class="CFclearAllBTN btn" href="">Clear All</a>
                            <input type="submit" value="Save as new Fromula" class="CFSaveBTN btn" id="">
                        </div>
                    </div>
                    {{!--
                    <hr> --}}
                    <div class="MainArea">
                        <aside class="CFAside">
                            <div class="MixerDetails" hidden>
                                <p class="MixerNameLabel">Mixer Name</p>
                                {{#if CustomerName}}
                                <input type="text" name="MixerName" value="{{Formula.CustomerName}}" id="">
                                {{else}}
                                <input type="text" name="MixerName" value="{{Formula.MixerName}}" id="">
                                {{/if}}
                                {{!-- Enter Mixer Name Here By Dynamic Process --}}
                            </div>
                            {{!-- <div class="CFBasicDetails">
                                <p class="CFBasicPtag">Date</p>
                                <input type="date" name="Date" class="CFBasicInp" id="dateInput" readonly value=''>
                            </div>
                            <div class="CFBasicDetails">
                                <p class="CFBasicPtag">File no.</p>
                                <input type="text" class="CFBasicInp" name="FileNo" placeholder="Enter File No"
                                    value="{{Formula.FileNo}}" readonly required>
                            </div> --}}
                            <div class="CFBasicDetails DateSection">
                                <p class="CFBasicPtag">Date</p>
                                <input type="date" name="Date" class=" DateBasicINP" id="dateInput" readonly value=''>
                            </div>
                            <div class="CFBasicDetails fileNoSection">
                                <p class="CFBasicPtag">File no.</p>
                                <input type="text" class=" FileNoBasicINP" name="FileNo" placeholder="Enter File No"
                                    id="FileNo" value="{{Formula.FileNo}}" readonly required>
                            </div>

                            {{!-- <div class="CFBasicDetails">
                                <p class="CFBasicPtag">Customer Name</p>
                                {{#if CustomerName}}
                                <input type="text" class="CFBasicInp" name="CustomerName"
                                    placeholder="Enter Customer Name" value="{{Formula.CustomerName}}" required
                                    readonly>
                                {{else}}
                                <input type="text" class="CFBasicInp" name="CustomerName"
                                    placeholder="Enter Customer Name" value="{{Formula.CustomerName}}" required>

                                {{/if}}
                            </div> --}}
                            <div class="CFBasicDetails">
                                <p class="CFBasicPtag">Customer Name</p>
                                {{#if CustomerName}}
                                <input type="text" class="CFBasicInp CustomerNameInp" name="CustomerName"
                                    placeholder="Enter Customer Name" value="{{Formula.CustomerName}}" required
                                    readonly>
                                {{else}}
                                <input type="text" class="CFBasicInp CustomerNameInp" name="CustomerName"
                                    placeholder="Enter Customer Name" value="{{Formula.CustomerName}}" required>
                                {{/if}}
                            </div>

                            <div class="CFBasicDetails">
                                <p class="CFBasicPtag">Color Code</p>
                                <input type="text" class="CFBasicInp" name="ColorCode" placeholder="Enter Color Code"
                                    value="{{Formula.ColorCode}}" required>

                            </div>
                            <div class="CFBasicDetails">
                                <p class="CFBasicPtag">Color Name</p>
                                <input type="text" class="CFBasicInp" name="ColorName" placeholder="Enter Color Name"
                                    value="{{Formula.ColorName}}" required>

                            </div>
                            <div class="CFBasicDetails">
                                <p class="CFBasicPtag">Customer Ref</p>
                                <input type="text" class="CFBasicInp" name="CustomerRef" value="{{Formula.CustomerRef}}"
                                    placeholder="Enter Customer Ref" required>

                            </div>
                            <div class="CFBasicDetails">
                                <p class="CFBasicPtag">Project No</p>
                                <input type="text" class="CFBasicInp" name="ProjectNo" placeholder="Enter Project No"
                                    value="{{Formula.ProjectNo}}" required>
                            </div>
                            {{!-- <div class="CFBasicDetails">
                                <p class="CFBasicPtag">Referance Image</p>
                                <input type="file" class="CFBasicInp" name="Image" accept="image/*" id="imageInput">
                            </div>
                            <div class="CFBasicDetailsImg">

                                <img src="data:image/jpeg;base64,{{Formula.ImageBase64}}" alt="" id="CFselectedImage">
                                <div class="ImageCopyCheckDiv" hidden>
                                    <input type="checkbox" name="CopyImage" id="imageCopyCheckbox" checked> copy Image
                                </div>
                            </div> --}}
                            <div class="PopAddAttachments">
                                <p class="popCardHeaderText CFBasicPtag">Attachments</p>
                                <div class="popAttachements">

                                    <div class="PopAddAttamentsArea">
                                        <label for="file" class="custum-file-upload">
                                            <div class="icon">
                                                <svg viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg">
                                                    <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                                                    <g id="SVGRepo_tracerCarrier" stroke-linecap="round"
                                                        stroke-linejoin="round">
                                                    </g>
                                                    <g id="SVGRepo_iconCarrier">
                                                        <path fill-rule="evenodd" clip-rule="evenodd"
                                                            d="M10 1C9.73478 1 9.48043 1.10536 9.29289 1.29289L3.29289 7.29289C3.10536 7.48043 3 7.73478 3 8V20C3 21.6569 4.34315 23 6 23H7C7.55228 23 8 22.5523 8 22C8 21.4477 7.55228 21 7 21H6C5.44772 21 5 20.5523 5 20V9H10C10.5523 9 11 8.55228 11 8V3H18C18.5523 3 19 3.44772 19 4V9C19 9.55228 19.4477 10 20 10C20.5523 10 21 9.55228 21 9V4C21 2.34315 19.6569 1 18 1H10ZM9 7H6.41421L9 4.41421V7ZM14 15.5C14 14.1193 15.1193 13 16.5 13C17.8807 13 19 14.1193 19 15.5V16V17H20C21.1046 17 22 17.8954 22 19C22 20.1046 21.1046 21 20 21H13C11.8954 21 11 20.1046 11 19C11 17.8954 11.8954 17 13 17H14V16V15.5ZM16.5 11C14.142 11 12.2076 12.8136 12.0156 15.122C10.2825 15.5606 9 17.1305 9 19C9 21.2091 10.7909 23 13 23H20C22.2091 23 24 21.2091 24 19C24 17.1305 22.7175 15.5606 20.9844 15.122C20.7924 12.8136 18.858 11 16.5 11Z"
                                                            fill=""></path>
                                                    </g>
                                                </svg>
                                            </div>
                                            <div class="text">
                                                <span>Click to upload image</span>
                                            </div>
                                            <input id="file" name="Image" type="file"
                                                onchange="previewAttachmentImage()">
                                        </label>

                                    </div>
                                    <div class="popAttachementsCollections">
                                        <div class="popEachAttachments">
                                            <img id="AttachmentImage" class="AttachmentIMG"
                                                src="data:image/jpeg;base64,{{Formula.ImageBase64}}" alt="">
                                        </div>
                                    </div>
                                </div>

                            </div>



                            {{!-- Solid Content start here --}}
                            <div class="CFsolidContentCalcDivArea">
                                <div class="CFsolidContentCalcDiv">
                                    <p class="CFBinderName">Solid Content(%): </p>
                                    <input class="CFSolidContentInput" type="text" name="SolidContent"
                                        value="{{Formula.SolidContent}}" id="CFFormulaSolidContent" readonly>
                                </div>
                                <div class="CFsolidContentCalcDiv">
                                    <p class="CFBinderName">VOC (g/Ltr): </p>
                                    <input class="CFSolidContentInput" type="text" name="VOC" value="{{Formula.VOC}}"
                                        id="CFFormulaVOC" readonly>
                                </div>
                                <div class="CFsolidContentCalcDiv">
                                    <p class="CFBinderName">Density (g/Ltr): </p>
                                    <input class="CFSolidContentInput" type="text" name="Density" id="CFFormulaDensity"
                                        value="{{Formula.Density}}" readonly>
                                </div>

                                <div class="CFsolidContentCalcDiv">
                                    <p class="CFBinderName">Sampled QTY: </p>
                                    <input class="CFSolidContentInput" name="SampleQty" id="SampleQty" type="text"
                                        value="{{Formula.SampleQty}}" readonly>
                                </div>
                            </div>
                            {{!-- <div class="CFsolidContentCalcDivArea">
                                <div class="CFsolidContentCalcDiv">
                                    <p class="CFBinderName">Solid Content(%): </p>
                                    <input class="CFSolidContentInput" type="text" name="SolidContent" value="0"
                                        id="CFFormulaSolidContent" readonly>%
                                </div>
                                <div class="CFsolidContentCalcDiv">
                                    <p class="CFBinderName">VOC (g/Ltr): </p>
                                    <input class="CFSolidContentInput" type="text" name="VOC" value="0"
                                        id="CFFormulaVOC" readonly>
                                </div>
                                <div class="CFsolidContentCalcDiv">
                                    <p class="CFBinderName">Density (g/Ltr): </p>
                                    <input class="CFSolidContentInput" type="text" name="Density" id="CFFormulaDensity"
                                        value="0" readonly>
                                </div>

                                <div class="CFsolidContentCalcDiv">
                                    <p class="CFBinderName">Sampled QTY: </p>
                                    <input class="CFSolidContentInput" name="SampleQty" id="SampleQty" type="text"
                                        value="0" readonly>
                                </div>
                            </div> --}}
                            {{!-- Solid Content ends here --}}
                        </aside>
                        <div class="CFMainContent">
                            {{!-- <div class="CFMainContentHeader">
                                <div class="CFMainSelectionDiv">
                                    <p class="CFmainSelection">Category</p>
                                    <select name="Category" class="CFCategory" id="CategorySelect"
                                        onchange="ADcategorySelect()" required>
                                        {{#each Categories}}
                                        <option class="ADSelectCategoryOptions" value="{{this.Category_Id}}">
                                            {{this.Category_Id}} -
                                            {{this.Category}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                                <div class="CFMainSelectionDiv">
                                    <p class="CFmainSelection">Sub-Category</p>
                                    <select name="SubCategory" class="CFSubCategory" id="SubCategorySelect"
                                        onchange="CFSubcategorySelect()" required>
                                        {{#each Subcategories}}
                                        <option value="{{this.SubCategory_Id}}">{{this.SubCategory}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                            </div> --}}
                            <div class="RightTopSelectionArea">
                                <div class="CategorySelectionDiv">
                                    <label for="categorySelect">Category </label>
                                    <select name="Category" class="CFCategory" id="CategorySelect"
                                        onchange="categorySelect()" required>
                                        {{#each Categories}}
                                        <option class="ADSelectCategoryOptions" value="{{this.Category_Id}}">
                                            {{this.Category_Id}} -
                                            {{this.Category}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                                <div class="SubcategorySelectionDiv">
                                    <label for="categorySelect">Sub-Category </label>
                                    <select name="SubCategory" class="CFSubCategory" id="SubCategorySelect"
                                        onchange="SubcategorySelect()" required>
                                        {{#each Subcategories}}
                                        <option value="{{this.SubCategory_Id}}">{{this.SubCategory}}</option>
                                        {{/each}}
                                    </select>
                                </div>
                                <div id="MattGlossEntryDiv" class="MattGlossEntryDiv">
                                    {{#if Matt}}
                                    <p class="CFmainSelection MattOrGloss">Matt</p>
                                    <input type="text" name="matt" id="MattOrGlossINPTag" class=" MattOrGlossINP "
                                        min="0" value="{{Matt}}" onkeypress="return isNumeric(event)"
                                        oninput="calculateAllTinterQuantities()">
                                    {{else}}
                                    {{#if Gloss}}
                                    <p class="CFmainSelection MattOrGloss">Gloss</p>
                                    <input type="text" name="gloss" id="MattOrGlossINPTag" class=" MattOrGlossINP "
                                        min="0" value="{{Gloss}}" onkeypress="return isNumeric(event)"
                                        oninput="calculateAllTinterQuantities()">
                                    {{else}}

                                    {{/if}}
                                    {{/if}}
                                </div>
                            </div>


                            {{!-- <div class="CFMainContenSecondarytHeader">
                                {{#if Matt}}
                                <div id="mattOrGloss" class="CFMainSelectionDiv ">
                                    <p class="CFmainSelection MattOrGloss">Matt value</p>
                                    <input type="text" name="mattOrGloss" id="MattOrGlossINPTag"
                                        class=" MattOrGlossINP " min="0" value="{{Matt}}"
                                        onkeypress="return isNumeric(event)" oninput=" makeChangesInBinderMattGloss()">
                                </div>
                                {{else}}
                                {{#if Gloss}}
                                <div id="mattOrGloss" class="CFMainSelectionDiv ">
                                    <p class="CFmainSelection MattOrGloss">Gloss value</p>
                                    <input type="text" name="mattOrGloss" id="MattOrGlossINPTag"
                                        class=" MattOrGlossINP " min="0" value="{{Gloss}}"
                                        onkeypress="return isNumeric(event)" oninput=" makeChangesInBinderMattGloss()">
                                </div>
                                {{else}}
                                <div id="mattOrGloss" class="CFMainSelectionDiv " style="display: none;">
                                    <p class="CFmainSelection MattOrGloss"></p>
                                    <input type="text" name="mattOrGloss" id="MattOrGlossINPTag"
                                        class=" MattOrGlossINP " min="0" value="0" onkeypress="return isNumeric(event)"
                                        oninput=" makeChangesInBinderMattGloss()">
                                </div>
                                {{/if}}
                                {{/if}}

                            </div> --}}
                            {{!-- <div class="TableStarting">
                                <table border="2" class="table table-bordered text-center CFcustom-border"
                                    id="FormulaCreateTable">
                                    <tr class="CFTableHeadRow">
                                        <th class="CFTableHead CFslNo" rowspan="2">SL No</th>
                                        <th class="CFTableHead CfTinders" rowspan="2">Tinters</th>
                                        <th class="CFTableHead" colspan="2">Total Quantity</th>
                                        <th class="CFTableHead" colspan="6" rowspan="2">QTY</th>
                                    </tr>
                                    <tr class="CFTableHeadRow">
                                        <th class="CFTableHead ">in Grams</th>
                                        <th class="CFTableHead ">in Volume</th>
                                    </tr>

                                </table>
                            </div> --}}
                            <div class="TopTables">
                                <div class="TinterTableDiv">
                                    <table id="Tintertable">
                                        <thead class="QuantityHead">
                                            <tr>
                                                <th rowspan="2">SL No.</th>
                                                <th rowspan="2">Tinters</th>
                                                <th colspan="2" class="quantity">Quantity</th>
                                            </tr>
                                            <tr>

                                                <th class="quantity">in Grams</th>
                                                <th class="quantity">in Volume</th>
                                            </tr>
                                        </thead>
                                        <tbody id="TinterBody">

                                        </tbody>
                                    </table>
                                </div>

                                <div class="TinterQuantityTableDiv">
                                    <table id="TinterQuantityTable">
                                        <thead class="QuantityHead">
                                            <tr>
                                                <th rowspan="2" colspan="6">Quantity</th>
                                            </tr>
                                        </thead>
                                        <tbody id="TinterQuantityBody">

                                        </tbody>
                                    </table>
                                </div>
                            </div>


                            {{!-- <div class="CFBelowTable">

                                <div class="CFBulkConverstedTableandBindersAndAdditives">

                                    <div class="CFBindersAndAdditives">
                                        <div class="CFBindersAndAdditivesUnits">
                                            <div class="CFeachUnit ">
                                                <p class="CFUnitsTotal">QTY (Grams)</p>
                                            </div>
                                            <div class="CFeachUnit ">
                                                <p class="CFUnitsTotal">Volume (ml)</p>
                                            </div>
                                        </div>
                                        <div class="CFBinder1Div">
                                            <p class="CFBinderName">Total Without Additives</p>
                                            <div class="CFTotalCalcDiv ">
                                                <input type="text" id="TotalGramInput" name="TotalWithoutAdditves"
                                                    value="{{Formula.TotalWithoutAdditves}}"
                                                    class="CFTotalInputElementsGrams " readonly value="0.00" required>
                                                <input type="text" id="TotalLiterInput"
                                                    value="{{Formula.TotalVolumeWithoutAdditves}}"
                                                    name="TotalVolumeWithoutAdditves" class="CFTotalInputElementsLiter "
                                                    readonly value="0.00" required>
                                            </div>
                                        </div>
                                        <div id="mattOrGloss" class="CFBinder1Div">

                                            <div class="CFTotalCalcDiv ">

                                            </div>
                                        </div>
                                        <hr>

                                        <div class="CFBinderHead">
                                            <p class="CFBindersHeading">Binder</p>

                                        </div>

                                        <div class="CFBinder1Div Binder1DIV">
                                            <p class="CFBinderName Binder1" id="Binder1"></p>
                                            <div class="CFTotalCalcDiv">
                                                <input name="Binder1" type="text" class="CFTotalInputElements "
                                                    id="Binder1INP" readonly value="" min="0">
                                                <input name="Binder1Volume" type="text" class="CFTotalInputElements "
                                                    id="Binder1Volume" readonly value="" min="0">

                                            </div>
                                        </div>
                                        <div class="CFBinder2Div Binder2DIV">
                                            <p class="CFBinderName Binder2" id="Binder2"></p>
                                            <div class="CFTotalCalcDiv">
                                                <input type="text" name="Binder2" class="CFTotalInputElements "
                                                    id="Binder2INP" readonly value="" min="0">
                                                <input type="text" name="Binder2Volume" class="CFTotalInputElements "
                                                    id="Binder2Volume" readonly value="" min="0">

                                            </div>
                                        </div>
                                        <hr>
                                        <p class="CFBindersHeading">Additives</p>
                                        <div class="CFBinder1Div CFSelectAdditivesDiv">
                                            <p class="CFBinderName">Select Additive</p>
                                            <select class="CFSelectAdditives" name="additives" id="CFSelectAdditivess"
                                                onchange="handleAdditivePercentageChange()">
                                                {{#each Additives}}
                                                <option value="{{this.Additive_Id}}">{{this.Additive_Name}}</option>
                                                {{/each}}

                                            </select>
                                        </div>
                                        <div class="CFBinder1Div">
                                            <p class="CFBinderName">Enter Additives in Percentage (%)</p>
                                            <input type="text" value="{{Formula.AdditivePercentage}}"
                                                name="AdditivePercentage" id="AdditivePercentage"
                                                placeholder="Enter the % of Additive"
                                                oninput="handleAdditivePercentageChange()"
                                                onkeypress="return isNumeric(event)" min="0">
                                        </div>
                                        <div class="CFBinder1Div">
                                            <p class="CFBinderName">Additives</p>
                                            <input type="text" name="TotalAdditives" id="TotalAdditives" readonly
                                                value="0">
                                            <input type="text" name="TotalAdditivesVolume" id="TotalAdditivesVolume"
                                                readonly value="0">
                                        </div>

                                        <hr>

                                        <div class="CFTotalWithAdditives">
                                            <div class="CFTotalWithAddUnit">
                                                <div class="CFeachUnit ">
                                                    <p class="CFUnitsTotal">QTY (Grams)</p>
                                                </div>
                                                <div class="CFeachUnit ">
                                                    <p class="CFUnitsTotal">Volume (ml)</p>
                                                </div>
                                            </div>
                                            <div class="CFTotalWithAddAndBinder">
                                                <p class="CFBindersHeading">Total</p>
                                                <div class="CFtotalwithAddValuesDiv">
                                                    <div class="CFtotalwithAddValues ">
                                                        <input type="text" readonly class=" " value="0"
                                                            id="TotalQtyInGram" name="TotalQtyInGram">
                                                    </div>
                                                    <div class="CFtotalwithAddValues ">
                                                        <input type="text" readonly class="" value="0"
                                                            id="TotalQtyInLiter" name="TotalQtyInLiter">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                </div>
                                <div class="CFRemarksDiv">

                                    <div class="CFRemark">
                                        <div class="CFRemarkHeading">
                                            <p>Remarks</p>
                                        </div>
                                        <div class="CFRemarksDIv">
                                            <textarea readonly id="CFRemarks" name="Remark"></textarea>


                                        </div>
                                    </div>

                                </div>
                            </div> --}}
                            <div class="AddBinderRemarksSection">
                                <div class="Add_BinderSectio">
                                    <div class="WithouAdditvesSection">
                                        <p class="DetailText">Total without Additives</p>
                                        <div class="ReadOnlyInPSEct">
                                            <div class=" withoutAdditiveGrams">
                                                <input type="text" readonly value="0" class="InputReadOnly"
                                                    id="TotalGramsWithoutAddtives" name="TotalGramsWithoutAddtives">
                                            </div>
                                            <div class=" withoutAdditiveVolume" style="border-top-right-radius: 8px;">
                                                <input type="text" readonly value="0" class="InputReadOnly"
                                                    id="TotalVolumeWithoutAddtives" name="TotalVolumeWithoutAddtives">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="BinderSection">
                                        <p class="DetailText BindersText">Binders</p>
                                        <div id="BinderCollections" class="BindersCollection">

                                        </div>
                                    </div>
                                    <div class="AdditiveSelection">
                                        <div class="AdditiveSelectionArea">
                                            <p class="DetailText AddtiveText">Additives</p>
                                            <div class="AdditiveArea">
                                                <select class="AdditiveSelect" name="additives" id="AdditiveSelect"
                                                    onchange="HandleAdditiveChange()">
                                                    {{#each Additives}}
                                                    <option value="{{this.Additive_Id}}">{{this.Additive_Name}}</option>
                                                    {{/each}}
                                                </select>
                                                <input type="text" class="AdditivePerInp" name="AdditivePercentage"
                                                    onchange="HandleAdditiveChange()" oninput="HandleAdditiveChange()"
                                                    id="AdditivePercentage" value="{{Formula.AdditivePercentage}}">
                                                <p class="DetailText PercentageSign">%</p>
                                            </div>
                                        </div>
                                        <div class="AdditveInputArea">
                                            <div class="AdditiveInpDiv">
                                                <input type="text" id="Additive_Gram" value="0"
                                                    class="AdditiveInpReadOnly" name="TotalAdditives">
                                            </div>
                                            <div class="AdditiveInpDiv">
                                                <input type="text" id="Additive_Volume" value="0"
                                                    class="AdditiveInpReadOnly" name="TotalAdditivesVolume">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="TotalSection">
                                        <p class="DetailText">Total</p>
                                        <div class="TotalInputArea" style="border-bottom-right-radius: 8px;">
                                            <div class="InputTotlaDiv">
                                                <input type="text" value="0" id="Total_Gram" class="TotalInpReadOnly"
                                                    name="TotalQtyInGram">
                                            </div>
                                            <div class="InputTotlaDiv" style="border-bottom-right-radius: 8px;">
                                                <input type="text" value="0" id="Total_Volume" name="TotalQtyInLiter"
                                                    class="TotalInpReadOnly">
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="RemarksPrintSEction">
                                    <div class="RemarkSection">
                                        <div class="remarkHeader">
                                            <p class="DetailText   RemarkText ">Remarks</p>
                                        </div>
                                        <div class="RemarksContentDiv">
                                            <textarea readonly name="Remark" id="RemarksContent" class="RemaarkContent">
                                        </textarea>
                                        </div>
                                    </div>

                                    <div class="PrintBottons">
                                        <input type="button" onclick="SaveFromulaAndPrintLabelST1()"
                                            value="Print Style 1" class="PrintBTN">
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

        </form>
        <div class="OldFormulaValues" hidden>
            <table class="table table-bordered text-center">
                <thead class="EDTableHeader">
                    <th>Tinters</th>
                    <th>QTY in Grams</th>
                    <th>QTY in Volume</th>
                </thead>
                <tbody class="OldBoTAbleBody">
                    {{#each Tinters}}
                    <tr class="BoTableDataRow">
                        <td><input type="text" id="OldTinter{{@index}}" name="OldTintersR{{TinterCount}}"
                                class="EDTableTinter text-center" value="{{TinterName}}" /></td>
                        <td><input type="text" id="OldGramInputTinter{{@index}}"
                                name="OldGramInputTotalR{{TinterCount}}" class="EDTableGram text-center"
                                value="{{GramInputTotal}}" /></td>
                        <td><input type="text" id="OldLiterInputTinter{{@index}}"
                                name="OldLiterInputTotalR{{TinterCount}}" class="EDTableLiter text-center"
                                value="{{LiterInputTotal}}" /></td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
</section>


{{!--
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>


    var State = {}

    document.getElementById('uploadForm').addEventListener('submit', function (event) {
        // Show the loading indicator when the form is submitted
        document.getElementById('loadingIndicator').style.display = 'block';
    });


    $(document).ready(function () {
        // Handle file input change event
        $('#imageInput').on('change', function () {
            var file = this.files[0];
            if (file) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#CFselectedImage').attr('src', e.target.result);
                };

                reader.readAsDataURL(file);
            }
        });

        CFSubcategorySelect();
        //CollectAllOldTinters();
        //  alert("After entering values, please double-check your calculations. If you encounter any issues, take a screenshot or screen recording and report it to the developer. **this message will be removed after the varification.");
    });


    var total_PP = 0;

    //ajax
    function ADgetAllSubCategories() {
        return fetch('/admin/Subcategories/api')
            .then(response => response.json())
            .catch(error => {
                //console.log('Error:', error);
            });
    }

    function ADgetAllCategories() {
        return fetch('/admin/Categories/api')
            .then(response => response.json())
            .catch(error => {
                //console.log('Error:', error);
            });
    }

    Promise.all([ADgetAllSubCategories(), ADgetAllCategories()])
        .then(([subCategories, categories]) => {
            // Process the retrieved subcategories and categories
            //console.log(subCategories);
            //console.log(categories);

            // Assign the values to the variables
            var subCategories = subCategories;
            var categories = categories;

            // Continue with your code here...



            // Get the category select element
            const categorySelect = document.getElementById('CategorySelect');

            // Get the subcategory select element
            const subCategorySelect = document.getElementById('SubCategorySelect');

            // Add an event listener to the category select element
            categorySelect.addEventListener('change', () => {
                // Get the selected category ID
                const categoryId = categorySelect.value;


                // Filter the subcategories based on the selected category ID
                const filteredSubCategories = subCategories.filter(subCategory => subCategory.Category_Id === categoryId);

                // Clear the subcategory select box
                subCategorySelect.innerHTML = '';

                // Create and append the option elements for the filtered subcategories

                if (filteredSubCategories.length > 0) {



                    filteredSubCategories.forEach(subCategory => {
                        const option = document.createElement('option');
                        option.value = subCategory.SubCategory_Id;
                        option.textContent = subCategory.SubCategory;
                        subCategorySelect.appendChild(option);
                    });
                    // Enable the subcategory select box
                    CFSubcategorySelect();
                    //subCategorySelect.readonly = false;
                } else {
                    // Add a "No Subcategory" option
                    const option = document.createElement('option');
                    option.value = "0";
                    option.textContent = 'No SubCategory available';
                    subCategorySelect.appendChild(option);

                    // Disable the subcategory select box

                    //subCategorySelect.readonly = true;
                }

                //console.log(subCategorySelect.value);
            });
        });





    //table

    let rowCount = 1;


    function handleInput(input) {
        //console.log(input);
        // Remove any non-numeric characters except dot (.)
        input.value = input.value.replace(/[^0-9.]/g, '');

        // Ensure minimum value of 0.00
        if (parseFloat(input.value) < 0) {
            input.value = '0.00';
        }

        //input.classList.add('resized');
        input.style.width = input.scrollWidth + 'px';


        // Calculate the totals for the current row
        const row = input.parentNode.parentNode;
        const rSubInputs = row.getElementsByClassName('R1Sub');
        const gramTotalInput = row.getElementsByClassName('GramInputTotal')[0];
        const literTotalInput = row.getElementsByClassName('LiterInputTotal')[0];
        const Product = row.getElementsByClassName('CFTinters');
        //console.log("Product.value: ", Product[0].value);

        if (Product[0].value === "") {
            gramTotalInput.value = 0.00;
            literTotalInput.value = 0.00;
            calculateTotalGrams(input);
            makeChangesInBinderMattGloss()
            FindSolidContentOfProducts()
        } else {



            //console.log("Product: ",Product.options[Product.selectedIndex]);*/

            var firstTd = row.querySelector(".CFTableRowData:first-child");
            var firstTdText = firstTd.textContent;
            //  //console.log("Row Count: ",firstTdText );



            var selectElement = document.getElementById(`CFTintersR${firstTdText}`);
            var selectedOption = selectElement.options[selectElement.selectedIndex];

            // Get the value and text content of the selected option
            var selectedValue = selectedOption.value;
            var selectedProduct = selectedOption.textContent;
            //  //console.log("Selected Option: ", selectedOption)


            //  //console.log('selected Product', selectedProduct);



            // do ajax call to find density of product by product name.
            var Product_Density = 0;
            fetch(`/FindProductByName/api`, {
                method: "POST", // or "GET" depending on your API
                body: JSON.stringify({ selectedProduct }), // Send the selected option as data
                headers: {
                    "Content-Type": "application/json",
                },
            })
                .then(function (response) {
                    // Handle the response from the server
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error("Error: " + response.status);
                    }
                })
                .then(function (OneProduct) {
                    // Handle the data received from the server
                    // Use the 'datas' variable to access the response data
                    //console.log(OneProduct);
                    Product_Density = parseFloat(OneProduct.Product_Density);
                    //console.log("Product_Density in side ajax: ", Product_Density);

                    var PP_Qty;

                    var totalGrams = 0.0;
                    var totalLiters = 0.0;

                    //    //console.log("Handle Input!");

                    for (let i = 0; i < rSubInputs.length; i++) {
                        var inputValue = parseFloat(rSubInputs[i].value);

                        if (selectedProduct === "M100 Powder Pigment" || selectedProduct === "M120 Powder Pigment" || selectedProduct === "M200 Powder Pigment" || selectedProduct === "M210 Powder Pigment" || selectedProduct === "M300 Powder Pigment" || selectedProduct === "M310 Powder Pigment" || selectedProduct === "M400 Powder Pigment" || selectedProduct === "M600 Powder Pigment" || selectedProduct === "M900 Powder Pigment" || selectedProduct === "M910 Powder Pigment" || selectedProduct === "M920 Powder Pigment") {
                            inputValue = inputValue * 4;

                            //console.log("InputValue", inputValue);
                        } else {
                            total_PP = 0;

                        }


                        if (!isNaN(inputValue)) {
                            //console.log("Product_Density: ", Product_Density);
                            totalGrams += inputValue;
                            //console.log("Total Grams", totalGrams)
                            //totalLiters = (totalGrams * 1000) / Product_Density;
                            totalLiters = parseFloat(((totalGrams * Product_Density) / 1000).toFixed(1));
                            //   //console.log("Total Grams : ", totalGrams, " Product_Density: ", Product_Density, " totalLiters: ", totalLiters)
                        }
                    }

                    gramTotalInput.value = String(formatDecimal(totalGrams));
                    literTotalInput.value = String(formatDecimal(totalLiters));
                    calculateTotalGrams(input);
                    makeChangesInBinderMattGloss()



                })
                .catch(function (error) {
                    // Handle any errors that occurred during the request
                    console.error("Error: ", error);
                });



            function formatDecimal(value) {
                if (value % 1 === 0) {
                    // If the value is an integer, display it without decimal places
                    return value.toFixed(0);
                } else {
                    // Display the value with a minimum of two decimal places
                    return value.toFixed(Math.max(2, value.toString().split('.')[1].length));
                }
            }

            // Check if a new row needs to be added
            const tableBody = document.getElementById('FormulaCreateTable').lastElementChild;
            const lastRow = tableBody.lastElementChild;
            const lastRowColumns = lastRow.getElementsByTagName('td');

            //  //console.log("Add Row Is now going to Calling!");

            if (input.value !== '0.00' && row === lastRow) {
                //console.log("Calling to add row");
                addRow();
            }

        }


    }

    function handleDelete(input) {

        if (input.value === '0.00') {
            return;
        }

        //input.classList.add('resized');
        input.style.width = input.scrollWidth + 'px';
        calculateTotalGrams(input);
    }

    function handleBackspace(input) {

        if (input.value === '0.00') {
            return;
        }

        //input.classList.add('resized');
        input.style.width = input.scrollWidth + 'px';
        calculateTotalGrams(input);
    }



    function addRow() {
        //console.log("Add Row Is now Calling!");
        var SubCategoryValue = document.getElementById("SubCategorySelect").value;
        if (SubCategoryValue === "0") {
            // Do nothing if SubCategoryValue is 0
        } else {
            const TotalRowCount = document.getElementsByClassName('row-template').length;
            //console.log("TotalRowCount: ", TotalRowCount);
            //console.log("document.getElementsByClassName('row-template') : ", document.getElementsByClassName('row-template'));
            var FullTamplate = document.getElementsByClassName('row-template');
            const rowTemplate = FullTamplate[TotalRowCount - 1];

            //console.log("new row template: ", rowTemplate);


            for (i = 0; i < FullTamplate.length; i++) {
                //console.log("section number: ", i + 1);
                //console.log("FullTamplate[i] : ", FullTamplate[i]);
            }

            if (rowTemplate) {
                const newRow = rowTemplate.cloneNode(true);

                //console.log("newRow: ", newRow);
                //console.log("newRow[0]: ", newRow.getElementsByClassName(`TintersR${TotalRowCount - 1}`));

                // Update the row number
                newRow.children[0].textContent = parseInt(newRow.children[0].textContent) + 1;
                //console.log("newRow.children[0].textContent: ", newRow.children[0].textContent);

                const newRowNumber = parseInt(newRow.children[0].textContent);

                // Clear input values of the new row
                /*   const rSubInputs = newRow.getElementsByClassName('CFINP');
                   for (let i = 0; i < rSubInputs.length; i++) {
                       rSubInputs[i].value = '0.00';
                   }
   
   
                   // Update the name attribute of GramInputTotal and LiterInputTotal inputs
                   const gramTotalInput = newRow.getElementsByClassName('GramInputTotal')[0];
                   const literTotalInput = newRow.getElementsByClassName('LiterInputTotal')[0];
                   const productSelectBox = newRow.getElementsByClassName(`CFTinters`)[0];
                   gramTotalInput.setAttribute('name', 'GramInputTotalR' + newRow.children[0].textContent);
                   gramTotalInput.setAttribute('id', 'GramInputTotalR' + newRow.children[0].textContent);
                   literTotalInput.setAttribute('name', 'LiterInputTotalR' + newRow.children[0].textContent);
                   literTotalInput.setAttribute('id', 'LiterInputTotalR' + newRow.children[0].textContent);
                   productSelectBox.setAttribute('name', 'TintersR' + newRow.children[0].textContent);
                   productSelectBox.setAttribute('id', 'CFTintersR' + newRow.children[0].textContent);
   

   */
                var oldTinter = State.ThisTintersArray
                var OneNewRow = `<tr class="row-template">
                                        <td class="CFTableRowData">${newRowNumber}</td>
                                        <td class="CFTableRowData">
                                            <select name="TintersR${newRowNumber}" class="TintersR${newRowNumber} CFTinters" id="CFTintersR${newRowNumber}"
                                                onchange="handleInput(this)">
                                                 <option value="">select a Tinter</option>
                                                 ${oldTinter.map(oneTinter => `
                                                   <option value="${oneTinter.Product_Id}">${oneTinter.Product_Name}</option>
                                                    `).join('')}
                                            </select>
                                        </td>

                                        <td class="CFTableRowData"><input type="text" name="GramInputTotalR${newRowNumber}" readonly
                                                id="GramInputTotalR${newRowNumber}" value="0.00"
                                                class="GramInputTotal CFINP CFInputTotal">
                                        </td>

                                        <td class="CFTableRowData"><input name="LiterInputTotalR${newRowNumber}" type="text"
                                                min="0.00" readonly id="LiterInputTotalR${newRowNumber}" value="0.00"
                                                class="LiterInputTotal CFINP CFInputTotal ">
                                        </td>

                                        <td class="CFTableRowData "><input name="" type="text" value="0.00" id="R${newRowNumber}C1"
                                                class="R1Sub R1C1 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">
                                        </td>

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class="R1Sub R1C2 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class="R1Sub R1C3 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class=" R1Sub R1C4 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class="R1Sub R1C5 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class="R1Sub R1C6 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">
                                    </tr>`;


                //console.log("Updated New Row: ", OneNewRow);
                // Append the new row to the table
                const tableBody = document.getElementById('FormulaCreateTable').lastElementChild;
                //tableBody.appendChild(newRow);
                tableBody.insertAdjacentHTML('beforeend', OneNewRow);

                // Attach event listeners to the new row inputs
                const newRSubInputs = newRow.getElementsByClassName('R1Sub');
                for (let i = 0; i < newRSubInputs.length; i++) {
                    newRSubInputs[i].addEventListener('input', function () {
                        handleInput(this);
                        calculateTotalGrams(this);
                    });
                    newRSubInputs[i].addEventListener('keyup', function () {
                        handleDelete(this);
                    });
                    newRSubInputs[i].addEventListener('keydown', function () {
                        handleBackspace(this);
                    });
                }

                var productSelectBox = document.getElementById(`CFTintersR${newRowNumber}`);
                // Attach event listener to the new row select box
                productSelectBox.addEventListener('change', function () {
                    disableSelectedOption(this);
                });
            }



        }
    }

    function disableSelectedOption(selectBox) {
        const selectedOption = selectBox.value;
        const allSelectBoxes = document.querySelectorAll('select[class="TintersR1"]');

        //console.log(allSelectBoxes);

        // Enable all options in other select boxes
        for (const box of allSelectBoxes) {
            const options = box.options;
            for (const option of options) {
                option.readonly = false;
            }
        }

        // Disable the selected option in other select boxes
        for (const box of allSelectBoxes) {
            if (box !== selectBox) {
                const options = box.options;
                for (const option of options) {
                    if (option.value === selectedOption) {
                        option.readonly = true;
                        break;
                    }
                }
            }
        }
    }


    function CFSubcategorySelect() {

        var subCategorySelect = document.getElementById("SubCategorySelect");
        var selectedOption = subCategorySelect.value;

        // Make an AJAX call
        fetch(`/GetProductWithSubCatagory/api`, {
            method: "POST", // or "GET" depending on your API
            body: JSON.stringify({ selectedOption }), // Send the selected option as data
            headers: {
                "Content-Type": "application/json",
            },
        })
            .then(function (response) {
                // Handle the response from the server
                if (response.ok) {

                    return response.json();
                } else {
                    throw new Error("Error: " + response.status);
                }
            })
            .then(function (datas) {
                // Process the received data
                // //console.log(data);
                // Update the <select> element with the received options

                var data = datas.Products;
                var Sub_Category = datas.SubCategory;







                console.table(datas);

                var tintersSelect = document.getElementById("CFTintersR1");
                if (tintersSelect) {

                    tintersSelect.innerHTML = ""; // Clear any existing options

                    // Loop through the data and create <option> elements
                    var option = document.createElement("option");
                    option.value = ''; // Set the option value
                    option.textContent = 'Select a product'; // Set the option text
                    tintersSelect.appendChild(option);

                    for (var i = 0; i < data.length; i++) {
                        var option = document.createElement("option");
                        option.value = data[i].Product_Id; // Set the option value
                        option.textContent = data[i].Product_Name; // Set the option text
                        tintersSelect.appendChild(option); // Add the option to the <select>
                    }

                    // Update the UI or perform any other actions with the data
                    // Assuming you have a variable `Sub_Category` with the relevant properties

                    if (Sub_Category.Liter === "on") {
                        var elements = document.getElementsByClassName("CFLiter");
                        var gramElements = document.getElementsByClassName("CFGram");

                        // Hide elements with class "CFGram"
                        for (var i = 0; i < gramElements.length; i++) {
                            gramElements[i].style.display = "none";
                        }

                        // Show elements with class "CFLiter"
                        for (var i = 0; i < elements.length; i++) {
                            elements[i].style.display = "flex";
                        }
                    } else if (Sub_Category.Gram === "on") {
                        var elements = document.getElementsByClassName("CFGram");
                        var literElements = document.getElementsByClassName("CFLiter");

                        // Hide elements with class "CFLiter"
                        for (var i = 0; i < literElements.length; i++) {
                            literElements[i].style.display = "none";
                        }

                        // Show elements with class "CFGram"
                        for (var i = 0; i < elements.length; i++) {
                            elements[i].style.display = "flex";
                        }
                    }
                }
                var Remarks = Sub_Category.Remarks
                document.getElementById('CFRemarks').value = Remarks
                makeChangesInBinderMattGloss()
                // //console.log("handleAdditivePercentageChange 4")
                // handleAdditivePercentageChange()
            })
            .catch(function (error) {
                // Handle any errors that occurred during the AJAX call
                console.error(error);
            });
    }


    function calculateTotalGrams(element) {
        //console.log(element);
        var totalGrams = 0;
        var totalLiter = 0;

        // Get all the rows with class "row-template"
        var rows = document.getElementsByClassName("row-template");
        // Loop through each row
        //console.log("rows.length: ", rows.length);
        for (var i = 1; i <= rows.length; i++) {
            // Get the input value for the current row
            //console.log(rows[i - 1]);

            //console.log(`name="GramInputTotalR${i}"`);
            //console.log(rows[i - 1].querySelector(`input[name="GramInputTotalR${i}"]`));
            if (rows[i - 1].querySelector(`input[name="GramInputTotalR${i}"]`)) {
                var sds = rows[i - 1].querySelector(`input[name="GramInputTotalR${i}"]`).value;
                //console.log("| elemetn", sds);
                var inputGram = parseFloat(rows[i - 1].querySelector(`input[name="GramInputTotalR${i}"]`).value);
                var inputLiter = parseFloat(rows[i - 1].querySelector(`input[name="LiterInputTotalR${i}"]`).value);
                // Check if the input value is a valid number
                if (!isNaN(inputGram)) {
                    // Add the input value to the totalGrams
                    totalGrams += inputGram;
                }
                if (!isNaN(inputLiter)) {
                    // Add the input value to the totalGrams
                    totalLiter += inputLiter;
                }
            }
        }

        //console.log("totalLiter", totalLiter);

        // Update the total grams input value with the calculated sum
        var totalGramsInput = document.getElementsByClassName("CFTotalInputElementsGrams")[0];
        //alert('sss')
        totalGramsInput.value = totalGrams;

        var totalLiterInput = document.getElementsByClassName("CFTotalInputElementsLiter")[0];
        totalLiterInput.value = totalLiter;
        //console.log("handleAdditivePercentageChange 3")
        handleAdditivePercentageChange()
        //disableSelectedOption(element)
    }

    /*  function disableSelectedOption(selectBox) {
          const selectedOption = selectBox.value;
          const allSelectBoxes = document.querySelectorAll('select[name="Tinters"]');
  
          // Enable all options in other select boxes
          for (const box of allSelectBoxes) {
              const options = box.options;
              for (const option of options) {
                  option.readonly = false;
              }
          }
  
          // Disable the selected option in other select boxes
          for (const box of allSelectBoxes) {
              if (box !== selectBox) {
                  const options = box.options;
                  for (const option of options) {
                      if (option.value === selectedOption) {
                          option.readonly = true;
                          break;
                      }
                  }
              }
          }
      }*/


    function makeChangesInBinderMattGloss() {

        //api ajax

        var subCategorySelect = document.getElementById("SubCategorySelect");
        var selectedOption = subCategorySelect.value;

        // Make an AJAX call
        fetch(`/GetProductWithSubCatagory/api`, {
            method: "POST", // or "GET" depending on your API
            body: JSON.stringify({ selectedOption }), // Send the selected option as data
            headers: {
                "Content-Type": "application/json",
            },
        })
            .then(function (response) {
                // Handle the response from the server
                if (response.ok) {

                    return response.json();
                } else {
                    throw new Error("Error: " + response.status);
                }
            })
            .then(function (datas) {
                // Process the received data
                // //console.log(data);
                // Update the <select> element with the received options




                //sdgdsgfdsfsdfsfsdf
                var data = datas.Products;
                State.AllProductsInSubcategory = data;
                var Sub_Category = datas.SubCategory;

                var Binder1 = datas.Binder1;
                var Binder2 = datas.Binder2;

                var matt = Sub_Category.Matt;
                var gloss = Sub_Category.Gloss;

                var mattOrGlossDiv = document.getElementById("mattOrGloss");
                var mattOrGlossName = mattOrGlossDiv.getElementsByClassName("MattOrGloss")[0];
                var mattOrGlossInput = mattOrGlossDiv.getElementsByClassName("MattOrGlossINP")[0];

                if (matt === "on") {
                    mattOrGlossDiv.style.display = "flex";
                    mattOrGlossName.textContent = "Matt value";
                    mattOrGlossInput.setAttribute("name", "matt");
                } else if (gloss === "on") {
                    mattOrGlossDiv.style.display = "flex";
                    mattOrGlossName.textContent = "Gloss value";
                    mattOrGlossInput.setAttribute("name", "gloss");
                } else {
                    mattOrGlossDiv.style.display = "none";
                }


                var Binder1PTag = document.querySelector(".Binder1");
                var Binder2PTag = document.querySelector(".Binder2");
                var Binder1DIV = document.querySelector('.Binder1DIV');
                var Binder2DIV = document.querySelector('.Binder2DIV');
                var Binder1input = document.getElementById("Binder1INP");
                var Binder2input = document.getElementById("Binder2INP");



                if (datas.Binder1) {
                    //// alert();
                    // put Binder1 name
                    Binder1DIV.style.display = "flex";
                    Binder1PTag.textContent = Binder1.Binder_Name


                    if (datas.Binder2) {
                        //put Binder2 Name
                        Binder2DIV.style.display = "flex";
                        Binder2PTag.textContent = Binder2.Binder_Name


                    } else {
                        //// alert("no Binder2");
                        //remove Binder 2
                        Binder2DIV.style.display = "none";
                    }

                    FindBinderValue(Sub_Category);
                } else {
                    //remove Binder 1
                    Binder1DIV.style.display = "none";
                }
                // //console.log("handleAdditivePercentageChange 2")
                handleAdditivePercentageChange()
                CollectAllOldTinters();
            })
    }

    function FindBinderValue(Sub_Category) {
        //// alert("Find Biner value")
        //console.log(Sub_Category);
        var Sub_Category_Name = Sub_Category.SubCategory



        // Binder Calculations

        //var Sub_Category;
        var Binder1_EQ;
        var Binder2_EQ;
        var Sum_qty;
        var mattValue;
        var gloss;


        var BinderError = false;
        var err;

        // gram or liter

        Sum_qty = parseFloat(document.getElementById('TotalGramInput').value);


        // Do if Powder Pigment




        // matt or gloss
        if (Sub_Category.Gloss || Sub_Category.Matt) {
            mattValue = parseFloat(document.getElementById('MattOrGlossINPTag').value);
            gloss = parseFloat(document.getElementById('MattOrGlossINPTag').value);
        }

        //console.log("Matt Values: ", mattValue, "  Gloss Values: ", gloss);
        //console.log("Sum QTY: ", Sum_qty);


        var Binder1Avalue = parseFloat(Sub_Category.Binder1Avalue);
        var Binder1Bvalue = parseFloat(Sub_Category.Binder1Bvalue);
        var Binder1Cvalue = parseFloat(Sub_Category.Binder1Cvalue);
        var Binder1Dvalue = parseFloat(Sub_Category.Binder1dvalue);


        var Binder2Avalue = parseFloat(Sub_Category.Binder2Avalue);

        //console.log(`Binder1Avalue ${Binder1Avalue} ,  Binder1Bvalue ${Binder1Bvalue}  ,   Binder1Cvalue ${Binder1Cvalue} , Binder1Dvalue ${Binder1Dvalue}, Binder2Avalue ${Binder2Avalue}`);





        //console.log("Sum_qty", Sum_qty, " mattValue", mattValue, " gloss", gloss);

        var Binder1INP = document.getElementById('Binder1INP');
        var Binder2INP = document.getElementById('Binder2INP');

        if (Sub_Category.Binder1) {
            // error handle in no values enter by admin.
            if (isNaN(Binder1Avalue) || isNaN(Binder1Bvalue) || isNaN(Binder1Cvalue) || isNaN(Binder1Dvalue)) {
                alert("Binder calculations are not possible at Binder 1 without the proper binder equation for this sub-category.");
            } else {
                Binder1INP.value = (((Sum_qty * Binder1Avalue * mattValue) - (Binder1Bvalue * Binder1Cvalue * Sum_qty)) / Binder1Dvalue).toFixed(3).toString();
            }




        }

        if (Sub_Category.Binder2EQ1) {
            if (isNaN(Binder2Avalue)) {
                alert("Binder calculations are not possible at Binder 2 without the proper binder equation for this sub-category.");
            } else {
                Binder2INP.value = ((Sum_qty * Binder2Avalue) - parseFloat(Binder1INP.value)).toFixed(3).toString();
            }
        } else if (Sub_Category.Binder2EQ2) {
            if (isNaN(Binder2Avalue)) {
                alert("Binder calculations are not possible at Binder 2 without the proper binder equation for this sub-category.");
            } else {
                Binder2INP.value = (Sum_qty * Binder2Avalue).toFixed(3).toString();
            }
        }


        function AlertBinder(Binder1_, Binder2_) {
            // alert("Binder 1: ", Binder1_);
            // alert("Binder 2: ", Binder2_);
        }

    }


    function handleAdditivePercentageChange() {
        var AdditivePercentage = parseFloat(document.getElementById('AdditivePercentage').value);
        var TotalGramInput = parseFloat(document.getElementById('TotalGramInput').value);
        var TotalAdditivesInp = document.getElementById('TotalAdditives');


        var TotalAdditives = 0;

        var Binder1INP = parseFloat(document.getElementById('Binder1INP').value);
        var Binder2INP = parseFloat(document.getElementById('Binder2INP').value);

        if (!isNaN(Binder1INP)) {
            // Binder1INP is a number (int or float)
            // Perform actions for numeric value
            TotalAdditives = ((TotalGramInput + Binder1INP) / 100) * AdditivePercentage
            //console.log("Binder1: ", TotalAdditives);

            if (!isNaN(Binder2INP)) {
                // Binder2INP is a number (int or float)
                // Perform actions for numeric value
                TotalAdditives = ((TotalGramInput + Binder1INP + Binder2INP) / 100) * AdditivePercentage
                //console.log("Binder2: ", TotalAdditives);

            } else {
                // Binder2INP is not a number or cannot be parsed as a number
                // Perform actions for non-numeric value
                //console.log("Binder2 bad: ", Binder2INP);
            }

        } else {
            // Binder1INP is not a number or cannot be parsed as a number
            // Perform actions for non-numeric value
            //console.log("Binder1 bad:", Binder1INP);
            TotalAdditives = (TotalGramInput / 100) * AdditivePercentage
        }

        //console.log("TotalAdditives:",TotalAdditives);
        TotalAdditivesInp.value = TotalAdditives;
        findTotalOfFormulation();


    }

    function findTotalOfFormulation() {

        var TotalQtyOfFormula = 0;
        var TotalVolumeOfFormula = 0;
        var TotalGramInput = parseFloat(document.getElementById('TotalGramInput').value);
        var TotalVolumeInput = parseFloat(document.getElementById('TotalLiterInput').value);
        var TotalAdditivesInp = parseFloat(document.getElementById('TotalAdditives').value);
        var selectAdditive = document.getElementById("CFSelectAdditivess"); // Replace "your-select-id" with the actual ID of your <select> element
        var selectedAdditiveOptionValue = selectAdditive.value;
        var TotalAdditivesVolume = document.getElementById("TotalAdditivesVolume");

        var Binder1Name = document.getElementById('Binder1').textContent;
        var Binder2Name = document.getElementById('Binder2').textContent;

        var ADditiveBinder = {
            Binder1: Binder1Name,
            Binder2: Binder2Name,
            Additive: selectedAdditiveOptionValue
        }





        // do an ajax call for getting the density of additives.
        fetch(`/FindAdditiveBinderDensityById/api`, {
            method: "POST", // or "GET" depending on your API
            body: JSON.stringify({ ADditiveBinder }), // Send the selected option as data
            headers: {
                "Content-Type": "application/json",
            },
        })
            .then(function (response) {
                // Handle the response from the server
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error("Error: " + response.status);
                }
            })
            .then(function (ReceivedObject) {
                // Handle the data received from the server
                // Use the 'datas' variable to access the response data
                //console.log("ReceivedObjectAdditive: ", ReceivedObject.Additive);
                //console.log("ReceivedObjectBinder1: ", ReceivedObject.Binder1);

                if (isNaN(TotalAdditivesInp)) {


                    var Binder1 = ReceivedObject.Binder1
                    var Binder2 = ReceivedObject.Binder2



                    //var Additive_Density = additive.Additive_Density;

                    var TotalQtyInGram = document.getElementById('TotalQtyInGram');
                    var TotalQtyInLiter = document.getElementById('TotalQtyInLiter');


                    var Binder1INP = parseFloat(document.getElementById('Binder1INP').value);
                    var Binder2INP = parseFloat(document.getElementById('Binder2INP').value);



                    if (!isNaN(Binder1INP)) {
                        // Binder1INP is a number (int or float)
                        // Perform actions for numeric value
                        var Binder1_Density = parseFloat(Binder1.Binder_Density)
                        TotalQtyOfFormula = TotalGramInput + Binder1INP;
                        // TotalVolumeOfFormula = TotalVolumeInput + ((Binder1INP * 1000) / Binder1_Density)
                        TotalVolumeOfFormula = TotalVolumeInput + ((Binder1INP * Binder1_Density) / 1000);
                        var Binder1Vol = (Binder1INP * Binder1_Density) / 1000;
                        document.getElementById("Binder1Volume").value = Binder1Vol.toFixed(3);
                        //console.log("Binder1Vol ", Binder1INP * Binder1_Density, " = (Binder1INP * Binder1_Density) * ", Binder1INP, " * ", Binder1_Density, " / ", 1000);
                        //console.log("Binder1Vol ", Binder1INP * Binder1_Density, " = (Binder1INP * Binder1_Density) * ", Binder1INP, " * ", Binder1_Density, " / ", 1000);



                        if (!isNaN(Binder2INP)) {
                            // Binder2INP is a number (int or float)
                            // Perform actions for numeric value
                            var Binder2_Density = parseFloat(Binder2.Binder_Density)
                            TotalQtyOfFormula = TotalGramInput + Binder1INP + Binder2INP;
                            TotalVolumeOfFormula = TotalVolumeInput + ((Binder1INP * Binder1_Density) / 1000) + ((Binder2INP * Binder2_Density) / 1000)
                            var Binder2Vol = (Binder2INP * Binder2_Density) / 1000;
                            document.getElementById("Binder2Volume").value = Binder2Vol.toFixed(3);
                            //console.log("Binder2Vol ", Binder2INP * Binder2_Density, " = (Binder2INP * Binder2_Density) * ", Binder2INP, " * ", Binder2_Density, " / ", 1000);
                            //console.log("Binder2Vol ", Binder2INP * Binder2_Density, " = (Binder2INP * Binder2_Density) * ", Binder2INP, " * ", Binder2_Density, " / ", 1000);

                        } else {
                            // Binder2INP is not a number or cannot be parsed as a number
                            // Perform actions for non-numeric value
                            //console.log("Binder2 bad: ", Binder2INP);
                        }

                    } else {
                        // Binder1INP is not a number or cannot be parsed as a number
                        // Perform actions for non-numeric value
                        //console.log("Binder1 bad:", Binder1INP);
                        TotalQtyOfFormula = TotalGramInput
                        TotalVolumeOfFormula = TotalVolumeInput
                    }

                    TotalQtyInGram.value = TotalQtyOfFormula.toFixed(3).toString();
                    TotalQtyInLiter.value = TotalVolumeOfFormula.toFixed(3).toString();


                    //console.log("TotalQtyOfFormula", TotalQtyOfFormula)
                    //console.log("Calling at 1")
                    FindSolidContentOfProducts()
                } else if (ReceivedObject.Additive) {
                    var additive = ReceivedObject.Additive
                    var Binder1 = ReceivedObject.Binder1
                    var Binder2 = ReceivedObject.Binder2
                    var TotalAdditivesVolume



                    var Additive_Density = additive.Additive_Density;

                    var TotalQtyInGram = document.getElementById('TotalQtyInGram');
                    var TotalQtyInLiter = document.getElementById('TotalQtyInLiter');


                    var Binder1INP = parseFloat(document.getElementById('Binder1INP').value);
                    var Binder2INP = parseFloat(document.getElementById('Binder2INP').value);



                    if (!isNaN(Binder1INP)) {
                        // Binder1INP is a number (int or float)
                        // Perform actions for numeric value
                        var Binder1_Density = parseFloat(Binder1.Binder_Density)
                        TotalQtyOfFormula = TotalGramInput + TotalAdditivesInp + Binder1INP;;
                        TotalVolumeOfFormula = TotalVolumeInput + ((TotalAdditivesInp * Additive_Density) / 1000) + ((Binder1INP * Binder1_Density) / 1000)
                        var Binder1Vol = (Binder1INP * Binder1_Density) / 1000;
                        document.getElementById("Binder1Volume").value = Binder1Vol.toFixed(3);
                        //console.log("Binder1Vol ", Binder1Vol, " = (Binder1INP * Binder1_Density)"Binder1INP, " * ", Binder1_Density, " / ", 1000)
                        //console.log("Binder1Vol ", Binder1INP * Binder1_Density, " = (Binder1INP * Binder1_Density) * ", Binder1INP, " * ", Binder1_Density, " / ", 1000);
                        TotalAdditivesVolume = (TotalAdditivesInp * Additive_Density) / 1000;
                        document.getElementById("TotalAdditivesVolume").value = TotalAdditivesVolume.toFixed(2);;


                        if (!isNaN(Binder2INP)) {
                            // Binder2INP is a number (int or float)
                            // Perform actions for numeric value
                            var Binder2_Density = parseFloat(Binder2.Binder_Density)
                            TotalQtyOfFormula = TotalGramInput + TotalAdditivesInp + Binder1INP + Binder2INP;
                            TotalVolumeOfFormula = TotalVolumeInput + ((TotalAdditivesInp * Additive_Density) / 1000) + ((Binder1INP * Binder1_Density) / 1000) + ((Binder2INP * Binder2_Density) / 1000)
                            var Binder2Vol = (Binder2INP * Binder2_Density) / 1000;
                            document.getElementById("Binder2Volume").value = Binder2Vol.toFixed(3);
                            //console.log("Binder2Vol ", Binder2INP * Binder2_Density, " = (Binder2INP * Binder2_Density) * ", Binder2INP, " * ", Binder2_Density, " / ", 1000);
                            //console.log("Binder2Vol ", Binder2INP * Binder2_Density, " = (Binder2INP * Binder2_Density) * ", Binder2INP, " * ", Binder2_Density, " / ", 1000);
                            TotalAdditivesVolume = (TotalAdditivesInp * Additive_Density) / 1000;
                            document.getElementById("TotalAdditivesVolume").value = TotalAdditivesVolume.toFixed(2);;

                        } else {
                            // Binder2INP is not a number or cannot be parsed as a number
                            // Perform actions for non-numeric value
                            //console.log("Binder2 bad: ", Binder2INP);
                        }

                    } else {
                        // Binder1INP is not a number or cannot be parsed as a number
                        // Perform actions for non-numeric value
                        //console.log("Binder1 bad:", Binder1INP);
                        TotalQtyOfFormula = TotalGramInput + TotalAdditivesInp;
                        TotalVolumeOfFormula = TotalVolumeInput + ((TotalAdditivesInp * Additive_Density) / 1000)
                        TotalAdditivesVolume = (TotalAdditivesInp * Additive_Density) / 1000;
                        document.getElementById("TotalAdditivesVolume").value = TotalAdditivesVolume.toFixed(2);
                    }

                    TotalQtyInGram.value = TotalQtyOfFormula.toFixed(3).toString();
                    TotalQtyInLiter.value = TotalVolumeOfFormula.toFixed(3).toString();
                    //console.log("TotalQtyOfFormula", TotalQtyOfFormula)
                    //console.log("Calling at 2")
                    FindSolidContentOfProducts()
                } else {

                    var Binder1 = ReceivedObject.Binder1
                    var Binder2 = ReceivedObject.Binder2
                    //var Additive_Density = additive.Additive_Density;

                    var TotalQtyInGram = document.getElementById('TotalQtyInGram');
                    var TotalQtyInLiter = document.getElementById('TotalQtyInLiter');


                    var Binder1INP = parseFloat(document.getElementById('Binder1INP').value);
                    var Binder2INP = parseFloat(document.getElementById('Binder2INP').value);



                    if (!isNaN(Binder1INP)) {
                        // Binder1INP is a number (int or float)
                        // Perform actions for numeric value
                        var Binder1_Density = parseFloat(Binder1.Binder_Density)
                        TotalQtyOfFormula = TotalGramInput + Binder1INP;
                        TotalVolumeOfFormula = TotalVolumeInput + ((Binder1INP * Binder1_Density) / 1000)
                        var Binder1Vol = (Binder1INP * Binder1_Density) / 1000;
                        document.getElementById("Binder1Volume").value = Binder1Vol.toFixed(3);
                        //console.log("Binder1Vol ", Binder1Vol, " = (Binder1INP * Binder1_Density)"Binder1INP, " * ", Binder1_Density, " / ", 1000)
                        //console.log("Binder1Vol ", Binder1INP * Binder1_Density, " = (Binder1INP * Binder1_Density) * ", Binder1INP, " * ", Binder1_Density, " / ", 1000);

                        if (!isNaN(Binder2INP)) {
                            // Binder2INP is a number (int or float)
                            // Perform actions for numeric value
                            var Binder2_Density = parseFloat(Binder2.Binder_Density)
                            TotalQtyOfFormula = TotalGramInput + Binder1INP + Binder2INP;
                            TotalVolumeOfFormula = TotalVolumeInput + ((Binder1INP * Binder1_Density) / 1000) + ((Binder2INP * Binder2_Density) / 1000)
                            var Binder2Vol = (Binder2INP * Binder2_Density) / 1000;
                            document.getElementById("Binder2Volume").value = Binder2Vol.toFixed(3);
                            //console.log("Binder2Vol ", Binder2INP * Binder2_Density, " = (Binder2INP * Binder2_Density) * ", Binder2INP, " * ", Binder2_Density, " / ", 1000);
                            //console.log("Binder2Vol ", Binder2INP * Binder2_Density, " = (Binder2INP * Binder2_Density) * ", Binder2INP, " * ", Binder2_Density, " / ", 1000);

                        } else {
                            // Binder2INP is not a number or cannot be parsed as a number
                            // Perform actions for non-numeric value
                            //console.log("Binder2 bad: ", Binder2INP);
                        }

                    } else {
                        // Binder1INP is not a number or cannot be parsed as a number
                        // Perform actions for non-numeric value
                        //console.log("Binder1 bad:", Binder1INP);
                        TotalQtyOfFormula = TotalGramInput
                        TotalVolumeOfFormula = TotalVolumeInput
                    }

                    TotalQtyInGram.value = TotalQtyOfFormula.toFixed(3).toString();
                    TotalQtyInLiter.value = TotalVolumeOfFormula.toFixed(3).toString();


                    //console.log("TotalQtyOfFormula", TotalQtyOfFormula)
                    // //console.log("Calling at 3")
                    FindSolidContentOfProducts()
                }

            })
            .catch(function (error) {
                // Handle any errors that occurred during the request
                console.error("Error: ", error);
            });




    }

    function isNumeric(event) {
        var key = event.keyCode || event.which;
        var keyChar = String.fromCharCode(key);

        // Allow only numeric characters and special keys like Backspace, Delete, etc.
        if (!/[\d.-]/.test(keyChar) && key !== 8 && key !== 9 && key !== 13 && key !== 27 && key !== 46) {
            event.preventDefault();
            return false;
        }
    }


    function FindSolidContentOfProducts() {


        var Products = []; // Create an empty array to store selected option values

        // Get all select elements with class "CFTinters"
        var selectElements = document.getElementsByClassName("CFTinters");

        // Iterate over each select element
        for (var i = 0; i < selectElements.length; i++) {
            var selectElement = selectElements[i];

            // Get the selected option from the current select element
            var selectedOption = selectElement.options[selectElement.selectedIndex];

            // Get the value of the selected option
            var selectedValue = selectedOption.value;

            // Push the selected value into the "Products" array
            Products.push(selectedValue);
        }

        //console.log("Products: ", Products)

        // Make an AJAX call using fetch
        fetch("/GetProductsSolidContent/api", {
            method: "POST", // or "GET" depending on your API
            body: JSON.stringify({ selectedOption: Products }), // Send the selected options as data
            headers: {
                "Content-Type": "application/json",
            },
        })
            .then(function (response) {
                // Handle the response from the server
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error("Error: " + response.status);
                }
            })
            .then(function (products) {
                // Handle the response data
                // console.log("products",products);
                // Perform additional actions with the response data

                // find SolidContentFor each Product by Solid content= solid content of each product * quantity of the product used in formula creation /100
                var TotalQtyOfFormula = parseFloat(document.getElementById('TotalQtyInGram').value);
                var SumOfSolidContentOfProducts = 0;
                var VocOfProducts = 0;
                for (var i = 0; i <= products.length; i++) {
                    var j = i + 1;
                    var GramInputTotalID = `GramInputTotalR${j}`;
                    //console.log('GramInputTotalID:', GramInputTotalID);
                    //console.log('document.getElementById(GramInputTotalID):', document.getElementById(GramInputTotalID))
                    var GramInputTotal = parseFloat(document.getElementById(GramInputTotalID).value);
                    //       //console.log("SumOfSolidContentOfProducts",GramInputTotal)
                    var OneProduct = products[i]
                    if (OneProduct) {
                        var SolidContentOfProduct = parseFloat(OneProduct.SolidContent);
                        var VocOfProduct = parseFloat(OneProduct.VOC);
                        //      console.log("GramInputTotal:",GramInputTotal," SolidContentOfProduct:",SolidContentOfProduct)
                        SumOfSolidContentOfProducts += (GramInputTotal * SolidContentOfProduct) / 100
                        VocOfProducts += (GramInputTotal * VocOfProduct) / 100
                        //console.log("Voc of Products: ", (GramInputTotal * VocOfProduct) / 100)
                        //console.log("SolidContentOfProduct",SolidContentOfProduct)
                    }
                }
                //Solid content of Formulation= (sum of solid content of each row/  Total Quantity of Formulation)* 100
                // console.log("SumOfSolidContentOfProducts:",SumOfSolidContentOfProducts," TotalQtyOfFormula:",TotalQtyOfFormula);
                var SolidContentOfFormulation = (SumOfSolidContentOfProducts / TotalQtyOfFormula) * 100
                var SumOfVoc = (VocOfProducts / TotalQtyOfFormula) * 100

                var TotalQtyInGram = parseFloat(document.getElementById('TotalQtyInGram').value);
                var TotalQtyInLiter = parseFloat(document.getElementById('TotalQtyInLiter').value);
                var DensityOfFormula = (TotalQtyInGram / TotalQtyInLiter) * 1000

                document.getElementById('CFFormulaDensity').value = DensityOfFormula;

                var VocOfFormulation = SumOfVoc * 10 * (DensityOfFormula / 1000)
                // console.log("Solid content of Formulation: ",SolidContentOfFormulation);
                // alert("Solid content of Formulation: ",SolidContentOfFormulation.toString());
                if (!isNaN(SolidContentOfFormulation)) {
                    document.getElementById('CFFormulaSolidContent').value = SolidContentOfFormulation;
                }

                if (!isNaN(VocOfFormulation)) {
                    document.getElementById('CFFormulaVOC').value = VocOfFormulation;
                }

                var SampledQty = TotalQtyInGram + "/" + TotalQtyInLiter;
                document.getElementById('SampleQty').value = SampledQty;

            })
            .catch(function (error) {
                // Handle any errors that occurred during the AJAX call
                console.error("Error: ", error);
            });
    }

    // to load one Sample data for reload the table.
    function LoadTableSingleData() {
        var R1C1 = document.getElementById('R1C1').value;
        document.getElementById('R1C1').value = "0";
        document.getElementById('R1C1').value = R1C1;
        //console.log("R1C1", R1C1);

        function triggerInputEvents() {
            var inputElement = document.getElementById('R1C1');

            // Trigger the oninput event
            inputElement.dispatchEvent(new Event('input'));

            // Trigger the onkeyup event
            inputElement.dispatchEvent(new KeyboardEvent('keyup'));

            // Trigger the onkeydown event
            inputElement.dispatchEvent(new KeyboardEvent('keydown'));
        }

        // Call the function to trigger the events
        triggerInputEvents();

    }


    // Select input tags with readonly attribute
    var readonlyInputs = document.querySelectorAll('input[readonly]');

    // Add CSS class to readonly inputs
    for (var i = 0; i < readonlyInputs.length; i++) {
        readonlyInputs[i].classList.add('readonly-input');
    }


    function CalculateCost() {
    }


    function CollectAllOldTinters() {


        if (!State.CollectAllOldTintersCalled) {
            State.CollectAllOldTintersCalled = true;
            // Initialize an empty array to store the Tinters data
            var Tinters = [];

            // Find all rows in the table body
            var rows = document.querySelectorAll('.OldBoTAbleBody .BoTableDataRow');

            // Loop through each row to extract the data
            rows.forEach(function (row, index) {
                var tinterInput = row.querySelector('.EDTableTinter');
                var gramInput = row.querySelector('.EDTableGram');
                var literInput = row.querySelector('.EDTableLiter');

                var tinter = {
                    TinterName: tinterInput.value,
                    GramInputTotal: gramInput.value,
                    LiterInputTotal: literInput.value
                };

                Tinters.push(tinter);
            });

            // Display the Tinters array in the console
            //console.log("OldTinters: ", Tinters);
            //console.log("State.AllProductsInSubcategory: ", State.AllProductsInSubcategory);
            State.OldTinters = Tinters;
            var AllTinters = State.AllProductsInSubcategory;




            // Initialize the output array
            const OldTintersArray = [];

            for (i = 0; i < Tinters.length; i++) {
                var OldTinterArray = [];
                var greenFlag = false;



                function GreenFlagTrue() {
                    //console.log("Greeen flag true");
                    for (j = 0; j < AllTinters.length; j++) {
                        //console.log("Greeen flag true into j loop");
                        if (AllTinters[j].Product_Name != Tinters[i].TinterName) {
                            //console.log("Greeen flag true into j loop product name not match!");
                            OldTinterArray.push(AllTinters[j]);
                        }
                    }
                }

                if (!greenFlag) {
                    //console.log("Greeen flag false");
                    for (j = 0; j < AllTinters.length; j++) {
                        //console.log("Greeen flag false into j loop", `${AllTinters[j].Product_Name} === ${Tinters[i].TinterName}`);
                        if (AllTinters[j].Product_Name == Tinters[i].TinterName) {
                            //console.log("Greeen flag false into j loop product name match! ");
                            greenFlag = true;
                            Tinters[i].Product_Name = AllTinters[j].Product_Name;
                            Tinters[i].Product_Id = AllTinters[j].Product_Id;
                            OldTinterArray.push(Tinters[i]);
                            //console.log("Pushed Product: ", Tinters[i]);

                            break;
                        }
                    }
                    GreenFlagTrue()
                } else {
                    // GreenFlagTrue()


                }
                OldTintersArray.push(OldTinterArray);
            }

            //console.log("Selfmade sorting: ", OldTintersArray);

            State.ThisTintersArray = OldTintersArray[0]


            OldTintersaddRow(OldTintersArray);
        }

    }

    function OldTintersaddRow(OldTintersArray) {
        if (OldTintersArray) {
            OldTintersArray.forEach((oldTinter, Index) => {
                //  //console.log("Add Row Is now Calling!");
                var SubCategoryValue = document.getElementById("SubCategorySelect").value;
                if (SubCategoryValue === "0") {
                    // Do nothing if SubCategoryValue is 0
                } else {
                    // Define a function to create a virtual row
                    function createVirtualRow(rowCount, oldTinter) {
                        //console.log(`Creating vietual row ${rowCount} with `)
                        //console.log(oldTinter)
                        const virtualRow = `
                        <tr class="row-template">
                                        <td class="CFTableRowData">${rowCount}</td>
                                        <td class="CFTableRowData">
                                            <select name="TintersR${rowCount}" class="TintersR${rowCount} CFTinters" id="CFTintersR${rowCount}"
                                                onchange="handleInput(this)">
                                                 ${oldTinter.map(oneTinter => `
                                                   <option value="${oneTinter.Product_Id}">${oneTinter.Product_Name}</option>
                                                    `).join('')}
                                            </select>
                                        </td>

                                        <td class="CFTableRowData"><input type="text" name="GramInputTotalR${rowCount}" readonly
                                                id="GramInputTotalR${rowCount}" value="${oldTinter[0].GramInputTotal}"
                                                class="GramInputTotal CFINP CFInputTotal">
                                        </td>

                                        <td class="CFTableRowData"><input name="LiterInputTotalR${rowCount}" type="text"
                                                min="0.00" readonly id="LiterInputTotalR${rowCount}" value="${oldTinter[0].LiterInputTotal}"
                                                class="LiterInputTotal CFINP CFInputTotal ">
                                        </td>

                                        <td class="CFTableRowData "><input name="" type="text" value="${oldTinter[0].GramInputTotal}" id="R${rowCount}C1"
                                                class="R1Sub R1C1 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">
                                        </td>

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class="R1Sub R1C2 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class="R1Sub R1C3 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class=" R1Sub R1C4 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class="R1Sub R1C5 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">

                                        <td class="CFTableRowData"><input name="" type="text" value="0.00"
                                                class="R1Sub R1C6 CFINP CFInpValue" oninput="handleInput(this)"
                                                onkeyup="handleDelete(this)" onkeydown="handleBackspace(this)">
                                    </tr>
                       `;

                        return virtualRow;
                    }

                    // Usage: Call createVirtualRow to create a new row
                    const rowCount = Index + 1; // You can increment this as needed
                    const oldTinterData = oldTinter;

                    const newVirtualRow = createVirtualRow(rowCount, oldTinterData);

                    // Append the new row to the table
                    const tableBody = document.getElementById('FormulaCreateTable').lastElementChild;
                    //tableBody.appendChild(newVirtualRow);
                    tableBody.insertAdjacentHTML('beforeend', newVirtualRow);



                    // Attach event listeners to the new row inputs
                    /* const newRSubInputs = newRow.getElementsByClassName('R1Sub');
                     for (let i = 0; i < newRSubInputs.length; i++) {
                         newRSubInputs[i].addEventListener('input', function () {
                             handleInput(this);
                             calculateTotalGrams(this);
                         });
                         newRSubInputs[i].addEventListener('keyup', function () {
                             handleDelete(this);
                         });
                         newRSubInputs[i].addEventListener('keydown', function () {
                             handleBackspace(this);
                         });
                     }*/

                    // Attach event listener to the new row select box
                    /*productSelectBox.addEventListener('change', function () {
                        disableSelectedOption(this);
                    });*/


                }
            })
        }

    }

    function TinterChange() {
        calculateTotalGrams("");
    }

    /*
        function MadeChanged(firstTdText) {
            var selectElement = document.getElementById(`CFTintersR${firstTdText}`);
            var selectedOption = selectElement.options[selectElement.selectedIndex];
    
            // Get the value and text content of the selected option
            var selectedValue = selectedOption.value;
            var selectedProduct = selectedOption.textContent;
            //  //console.log("Selected Option: ", selectedOption)
    
    
            //  //console.log('selected Product', selectedProduct);
    
    
    
            // do ajax call to find density of product by product name.
            var Product_Density = 0;
            fetch(`/FindProductByName/api`, {
                method: "POST", // or "GET" depending on your API
                body: JSON.stringify({ selectedProduct }), // Send the selected option as data
                headers: {
                    "Content-Type": "application/json",
                },
            })
                .then(function (response) {
                    // Handle the response from the server
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error("Error: " + response.status);
                    }
                })
                .then(function (OneProduct) {
                    // Handle the data received from the server
                    // Use the 'datas' variable to access the response data
                    //console.log(OneProduct);
                    Product_Density = parseFloat(OneProduct.Product_Density);
                    //console.log("Product_Density in side ajax: ", Product_Density);
    
                    var PP_Qty;
    
                    var totalGrams = 0.0;
                    var totalLiters = 0.0;
    
                    //    //console.log("Handle Input!");
    
                    for (let i = 0; i < rSubInputs.length; i++) {
                        var inputValue = parseFloat(rSubInputs[i].value);
    
                        if (selectedProduct === "M100 Powder Pigment" || selectedProduct === "M120 Powder Pigment" || selectedProduct === "M200 Powder Pigment" || selectedProduct === "M210 Powder Pigment" || selectedProduct === "M300 Powder Pigment" || selectedProduct === "M310 Powder Pigment" || selectedProduct === "M400 Powder Pigment" || selectedProduct === "M600 Powder Pigment" || selectedProduct === "M900 Powder Pigment" || selectedProduct === "M910 Powder Pigment" || selectedProduct === "M920 Powder Pigment") {
                            inputValue = inputValue * 4;
    
                            //console.log("InputValue", inputValue);
                        } else {
                            total_PP = 0;
    
                        }
    
    
                        if (!isNaN(inputValue)) {
                            //console.log("Product_Density: ", Product_Density);
                            totalGrams += inputValue;
                            //console.log("Total Grams", totalGrams)
                            //totalLiters = (totalGrams * 1000) / Product_Density;
                            totalLiters = parseFloat(((totalGrams * Product_Density) / 1000).toFixed(1));
                            //   //console.log("Total Grams : ", totalGrams, " Product_Density: ", Product_Density, " totalLiters: ", totalLiters)
                        }
                    }
    
                    gramTotalInput.value = String(formatDecimal(totalGrams));
                    literTotalInput.value = String(formatDecimal(totalLiters));
                    calculateTotalGrams(input);
                    makeChangesInBinderMattGloss()
    
    
    
                })
                .catch(function (error) {
                    // Handle any errors that occurred during the request
                    console.error("Error: ", error);
                });
    
    
    
            function formatDecimal(value) {
                if (value % 1 === 0) {
                    // If the value is an integer, display it without decimal places
                    return value.toFixed(0);
                } else {
                    // Display the value with a minimum of two decimal places
                    return value.toFixed(Math.max(2, value.toString().split('.')[1].length));
                }
            }
        }
    */

</script> --}}

<script>

    document.getElementById('uploadForm').addEventListener('submit', function (event) {
        // Show the loading indicator when the form is submitted
        document.getElementById('loadingIndicator').style.display = 'block';
    });


    // Assuming you have a form element with the id 'uploadForm'
    var Uploadforms = document.getElementById('uploadForm');

    // Attach keydown event listener to the form
    Uploadforms.addEventListener('submit', function (event) {
        // Check if the pressed key is Enter (key code 13)
        if (event.key === 'Enter') {
            // Prevent the default form submission behavior
            event.preventDefault();
        }
    });


    var State = {
        Formula: {}
    };

    function previewAttachmentImage() {
        var input = document.getElementById('file');
        var attachmentImage = document.getElementById('AttachmentImage');

        if (attachmentImage) {
            var file = input.files[0];

            if (file) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    attachmentImage.src = e.target.result;
                };

                reader.readAsDataURL(file);
            }
        } else {
            console.error("AttachmentImage element not found");
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        fetchAllDataFromServer();
        fetchAllFromulaData();
        //  SubcategorySelect();
    })

    function fetchAllDataFromServer() {
        fetch('/dataForFormulaCreation/api')
            .then(response => response.json())
            .then(data => {
                // console.log("Server Data: ", data);
                State.Additives = data.Additives;
                State.Binders = data.Binders;
                State.Categories = data.Categories;
                State.Products = data.Products;
                State.SubCategories = data.SubCategories;

                console.log("State: ", State);
            })
            .catch(error => {
                console.log('Error:', error);
            });
    }

    function fetchAllFromulaData() {
        var FileNo = document.getElementById('FileNo').value;
        fetch(`/GetAllDataFromFormula/api/${FileNo}`)
            .then(response => response.json())
            .then(data => {
                // console.log("Server Data: ", data);
                State.Formula = data;

                console.log("State formula: ", State.Formula);
                loadOldData();
            })
            .catch(error => {
                console.log('Error:', error);
            });
    }

    function loadOldData() {
        var Formula = State.Formula;
        var TintersCount = Formula.TintersCount;

        var Tintertbody = document.getElementById('TinterBody');
        var quantityTbody = document.getElementById('TinterQuantityBody');

        for (i = 1; i <= TintersCount; i++) {
            var newRowCount = i;

            var newRowTinterBody = document.createElement('tr');
            newRowTinterBody.innerHTML = `
                    <td>${newRowCount}</td>
                    <td>
                        <select name="TintersR${newRowCount}" class="SelectTinter" id="CFTintersR${newRowCount}"
                            onchange="CreateNewTinterRow(this)">
                        </select>
                    </td>
                    <td class="quantity">
                        <input name="GramInputTotalR${newRowCount}" class="InputQuantityGram" type="text"
                            id="GramInputTotalR${newRowCount}" value="${Formula['GramInputTotalR' + i]}" readonly />
                    </td>
                    <td class="quantity">
                        <input name="LiterInputTotalR${newRowCount}" class="InputQuantityVolumn" type="text"
                            id="LiterInputTotalR${newRowCount}" value="${Formula['LiterInputTotalR' + i]}" readonly />
                    </td>
            `;


            var newRowTinterQuantity = document.createElement('tr');
            newRowTinterQuantity.innerHTML = `
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C1"  value="${Formula['GramInputTotalR' + i]}" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C2"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C3"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C4"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C5"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C6"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                `;

            Tintertbody.appendChild(newRowTinterBody);
            quantityTbody.appendChild(newRowTinterQuantity);

            // Tinter apply
            TinterApplyForRecentlyAdded()
            function TinterApplyForRecentlyAdded() {
                var TinterIDs;
                var SubCategoryID = document.getElementById('SubCategorySelect').value;
                State.SubCategories.forEach((EachSubCategory) => {
                    if (EachSubCategory.SubCategory_Id == SubCategoryID) {
                        TinterIDs = EachSubCategory.Products;
                    }
                })

                // console.log("TinterIDs = ", TinterIDs);
                // console.log("Tinters = ", State.Products);

                // Filter Tinters based on TinterIDs
                const Tinters = State.Products.filter(tinter => TinterIDs.includes(tinter.Product_Id));

                console.log("Tinters: ", Tinters);

                //var FirstTinter = Tinters.find(Tinter=> `TinterNameR${newRowCount}` === Tinter.Product_Name );

                var ModifiedTinters = [];

                Tinters.forEach((Tinter) => {
                    if (Formula[`TinterNameR${newRowCount}`] === Tinter.Product_Name) {
                        ModifiedTinters.unshift(Tinter);
                    } else {
                        ModifiedTinters.push(Tinter)
                    }
                });
                console.log('Modified Tinters: ', ModifiedTinters);

                var CFTintersR = document.getElementById(`CFTintersR${newRowCount}`);
                CFTintersR.innerHTML = "";

                for (j = 0; j < ModifiedTinters.length; j++) {
                    var EachTinter = ModifiedTinters[j];
                    var option = document.createElement('option');
                    option.value = EachTinter.Product_Id;
                    option.text = EachTinter.Product_Name;

                    CFTintersR.appendChild(option)
                }

            }
        }

        // Binder names
        FindBinderAndApply();
        function FindBinderAndApply() {
            var SubCategorySelectID = document.getElementById('SubCategorySelect').value;

            var SubCategory = State.SubCategories.find(Subcategory => Subcategory.SubCategory_Id == SubCategorySelectID);
            if (SubCategory) {


                // Handle Binders Name
                var BinderCollections = document.getElementById('BinderCollections');
                BinderCollections.innerHTML = "";

                if (SubCategory.Binder1) {
                    var Binder1 = State.Binders.find(OneBinder => OneBinder.Binder_Id == SubCategory.Binder1);
                    var VirtualBinder1 = `
             <div id="Binder1Area" class="BindersArea">
                    <input type="text" id="Binder1Name" value="${Binder1.Binder_Name}" class="BinderNameText"
                        name="BinderName1">
                    <div class="BindersInputArea Binder1Area">
                        <div class="BindersInputDiv">
                            <input type="text" value="0" class="BinderReadOnlyINp"
                                id="Binder1INP" name="Binder1">
                        </div>
                        <div class="BindersInputDiv">
                            <input type="text" value="0" class="BinderReadOnlyINp"  id="Binder1INPVolume"
                            name="Binder1Volume">
                    </div>
                </div>
            </div>
            `
                    BinderCollections.insertAdjacentHTML('beforeend', VirtualBinder1);
                } else {
                    var VirtualBinder1 = `
             <div id="Binder1Area" class="BindersArea">
                    <input type="text"  id="Binder1Name"  value="" class="BinderNameText"
                        name="BinderName1" disabled>
                    <div class="BindersInputArea Binder1Area">
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp"
                                id="Binder1INP" name="Binder1" disabled>
                        </div>
                        <div class="BindersInputDiv">
                            <input type="text" value="0" class="BinderReadOnlyINp"   id="Binder1INPVolume"
                            name="Binder1Volume" disabled>
                    </div>
                </div>
            </div>
            `
                    BinderCollections.insertAdjacentHTML('beforeend', VirtualBinder1);
                }

                if (SubCategory.Binder2) {
                    var Binder2 = State.Binders.find(OneBinder => OneBinder.Binder_Id == SubCategory.Binder2);
                    var VirtualBinder2 = `
                <div id="Binder2Area" class="BindersArea">
                    <input type="text" id="Binder2Name" value="${Binder2.Binder_Name}" class="BinderNameText"
                        name="BinderName2">
                    <div class="BindersInputArea">
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp"
                                id="Binder2INP" name="Binder2">
                        </div>
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp" id="Binder2INPVolume"
                                name="Binder2Volume">
                        </div>
                    </div>
                </div>
`
                    BinderCollections.insertAdjacentHTML('beforeend', VirtualBinder2);
                } else {
                    var VirtualBinder2 = `
                <div id="Binder2Area" class="BindersArea">
                    <input type="text" id="Binder2Name" value="" class="BinderNameText"
                        name="BinderName2" disabled>
                    <div class="BindersInputArea">
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp"
                                id="Binder2INP" name="Binder1" disabled>
                        </div>
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp" id="Binder2INPVolume"
                                name="Binder2Volume" disabled>
                        </div>
                    </div>
                </div>
`
                    BinderCollections.insertAdjacentHTML('beforeend', VirtualBinder2);
                }

                // handle Remarks
                var RemarksContent = document.getElementById('RemarksContent');
                RemarksContent.value = SubCategory.Remarks;


            } else {
                console.log('no sub category')

                // handle Tinter
                var TinterBody = document.getElementById('TinterBody');
                TinterBody.innerHTML = "";

                var TinterQuantityBody = document.getElementById('TinterQuantityBody');
                TinterQuantityBody.innerHTML = "";

                // Handle Binders Name
                var BinderCollections = document.getElementById('BinderCollections');
                BinderCollections.innerHTML = "";

                // handle Remarks
                var RemarksContent = document.getElementById('RemarksContent');
                RemarksContent.value = "";
            }
        }

        // Handle Additives
        handleAdditives()
        function handleAdditives() {

        }



        // find rest calculations
        FindTotalWithoutAdditives()
    }




    function categorySelect() {
        var SelectedCategory = document.getElementById('CategorySelect').value;
        var subCategorySelect = document.getElementById('SubCategorySelect');
        subCategorySelect.innerHTML = "";

        //  var MatchingSubCategory = [];
        State.SubCategories.forEach((EachSubCategory) => {
            //   console.log('SelectedCategory', SelectedCategory);
            //  console.log("EachSubCategory", EachSubCategory);
            if (SelectedCategory == EachSubCategory.Category_Id) {
                // MatchingSubCategory.push(EachSubCategory);
                var option = document.createElement('option');
                option.value = EachSubCategory.SubCategory_Id;
                option.text = EachSubCategory.SubCategory;
                subCategorySelect.appendChild(option);
            }
        })
        //  SubcategorySelect();
        //  createFirstTinterRow();
    }

    function SubcategorySelect() {
        var SubCategorySelectID = document.getElementById('SubCategorySelect').value;


        var SubCategory = State.SubCategories.find(Subcategory => Subcategory.SubCategory_Id == SubCategorySelectID);
        if (SubCategory) {

            //  console.log("Sub category : ", SubCategory);

            // Handle Matt and Gloss
            if (SubCategory.Matt) {
                // matt
                var VirtualMatt = `
                <p class="CFmainSelection MattOrGloss">Matt</p>
                <input type="text" name="matt" id="MattOrGlossINPTag" class=" MattOrGlossINP "
                    min="0" value="0" onkeypress="return isNumeric(event)"
                    oninput="calculateAllTinterQuantities()">
            `

                var MattGlossEntryDiv = document.getElementById('MattGlossEntryDiv');
                MattGlossEntryDiv.innerHTML = "";
                MattGlossEntryDiv.insertAdjacentHTML('beforeend', VirtualMatt);
            } else if (SubCategory.Gloss) {
                // Gloss
                var VirtualMatt = `
                <p class="CFmainSelection MattOrGloss">Gloss</p>
                <input type="text" name="gloss" id="MattOrGlossINPTag" class=" MattOrGlossINP "
                    min="0" value="0" onkeypress="return isNumeric(event)"
                    oninput="calculateAllTinterQuantities()">
            `
                var MattGlossEntryDiv = document.getElementById('MattGlossEntryDiv');
                MattGlossEntryDiv.innerHTML = "";
                MattGlossEntryDiv.insertAdjacentHTML('beforeend', VirtualMatt);
            } else {
                // no matt gloss
                var MattGlossEntryDiv = document.getElementById('MattGlossEntryDiv');
                MattGlossEntryDiv.innerHTML = "";
            }


            // Handle Binders Name
            var BinderCollections = document.getElementById('BinderCollections');
            BinderCollections.innerHTML = "";

            if (SubCategory.Binder1) {
                var Binder1 = State.Binders.find(OneBinder => OneBinder.Binder_Id == SubCategory.Binder1);
                var VirtualBinder1 = `
             <div id="Binder1Area" class="BindersArea">
                    <input type="text" id="Binder1Name" value="${Binder1.Binder_Name}" class="BinderNameText"
                        name="BinderName1">
                    <div class="BindersInputArea Binder1Area">
                        <div class="BindersInputDiv">
                            <input type="text" value="0" class="BinderReadOnlyINp"
                                id="Binder1INP" name="Binder1">
                        </div>
                        <div class="BindersInputDiv">
                            <input type="text" value="0" class="BinderReadOnlyINp"  id="Binder1INPVolume"
                            name="Binder1Volume">
                    </div>
                </div>
            </div>
            `
                BinderCollections.insertAdjacentHTML('beforeend', VirtualBinder1);
            } else {
                var VirtualBinder1 = `
             <div id="Binder1Area" class="BindersArea">
                    <input type="text"  id="Binder1Name"  value="" class="BinderNameText"
                        name="BinderName1" disabled>
                    <div class="BindersInputArea Binder1Area">
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp"
                                id="Binder1INP" name="Binder1" disabled>
                        </div>
                        <div class="BindersInputDiv">
                            <input type="text" value="0" class="BinderReadOnlyINp"   id="Binder1INPVolume"
                            name="Binder1Volume" disabled>
                    </div>
                </div>
            </div>
            `
                BinderCollections.insertAdjacentHTML('beforeend', VirtualBinder1);
            }

            if (SubCategory.Binder2) {
                var Binder2 = State.Binders.find(OneBinder => OneBinder.Binder_Id == SubCategory.Binder2);
                var VirtualBinder2 = `
                <div id="Binder2Area" class="BindersArea">
                    <input type="text" id="Binder2Name" value="${Binder2.Binder_Name}" class="BinderNameText"
                        name="BinderName2">
                    <div class="BindersInputArea">
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp"
                                id="Binder2INP" name="Binder2">
                        </div>
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp" id="Binder2INPVolume"
                                name="Binder2Volume">
                        </div>
                    </div>
                </div>
`
                BinderCollections.insertAdjacentHTML('beforeend', VirtualBinder2);
            } else {
                var VirtualBinder2 = `
                <div id="Binder2Area" class="BindersArea">
                    <input type="text" id="Binder2Name" value="" class="BinderNameText"
                        name="BinderName2" disabled>
                    <div class="BindersInputArea">
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp"
                                id="Binder2INP" name="Binder1" disabled>
                        </div>
                        <div class="BindersInputDiv">
                            <input type="text" value="" class="BinderReadOnlyINp" id="Binder2INPVolume"
                                name="Binder2Volume" disabled>
                        </div>
                    </div>
                </div>
`
                BinderCollections.insertAdjacentHTML('beforeend', VirtualBinder2);
            }

            // handle Remarks
            var RemarksContent = document.getElementById('RemarksContent');
            RemarksContent.value = SubCategory.Remarks;


        } else {
            console.log('no sub category')
            // handle matt or gloss
            var MattGlossEntryDiv = document.getElementById('MattGlossEntryDiv');
            MattGlossEntryDiv.innerHTML = "";

            // handle Tinter
            var TinterBody = document.getElementById('TinterBody');
            TinterBody.innerHTML = "";

            var TinterQuantityBody = document.getElementById('TinterQuantityBody');
            TinterQuantityBody.innerHTML = "";

            // Handle Binders Name
            var BinderCollections = document.getElementById('BinderCollections');
            BinderCollections.innerHTML = "";

            // handle Remarks
            var RemarksContent = document.getElementById('RemarksContent');
            RemarksContent.value = "";
        }

        UpdateAllTinterSelectionOPtions();

    }

    function createFirstTinterRow() {
        // Assuming you have the tbody element with id "TinterRow"
        var Tintertbody = document.getElementById('TinterBody');
        var quantityTbody = document.getElementById('TinterQuantityBody');
        var newRowCount = 1
        var rowCount = 1

        var newTinterRow = `
                <tr>
                    <td>${newRowCount}</td>
                    <td>
                        <select name="TintersR${newRowCount}" class="SelectTinter" id="CFTintersR${newRowCount}"
                            onchange="CreateNewTinterRow(this)">
                           
                        </select>
                    </td>
                    <td class="quantity">
                        <input name="GramInputTotalR${newRowCount}" class="InputQuantityGram" type="text"
                            id="GramInputTotalR${newRowCount}" value="0" readonly />
                    </td>
                    <td class="quantity">
                        <input name="LiterInputTotalR${newRowCount}" class="InputQuantityVolumn" type="text"
                            id="LiterInputTotalR${newRowCount}" value="0" readonly />
                    </td>
                </tr>
            `;


        var newTinterQuantity = `
                <tr>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C1"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C2"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C3"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C4"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C5"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C6"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                </tr>
            `;


        // put newTinterRow to tbody id TinterBody
        // put newTinterQuantity to tbosy id TinterQuantityBody
        Tintertbody.innerHTML = newTinterRow;
        quantityTbody.innerHTML = newTinterQuantity;

        UpdateAllTinterSelectionOPtions();
    }


    function sanitizeInputValue(inputElement) {

    }






    function CreateNewTinterRow(ModifiedInput) {
        calculateAllTinterQuantities();

        console.log('ModifiedInput:', ModifiedInput);
        console.log('ModifiedInput value:', ModifiedInput.value);
        var selectId = ModifiedInput.id;
        console.log('Select element ID:', selectId);


        // Assuming you have the tbody element with id "TinterRow"
        var Tintertbody = document.getElementById('TinterBody');
        var quantityTbody = document.getElementById('TinterQuantityBody');
        var newRowCount = 1
        var rowCount = 1
        // Count the number of rows in the tbody
        rowCount = Tintertbody.getElementsByTagName('tr').length;

        console.log('Number of rows: ' + rowCount);
        newRowCount = rowCount + 1;



        //  if (document.getElementById(`CFTintersR${rowCount}`).value && selectId === `CFTintersR${rowCount}`) {
        if (ModifiedInput.parentElement.parentElement === Tintertbody.lastElementChild) {
            var newRowTinterBody = document.createElement('tr');
            newRowTinterBody.innerHTML = `
                    <td>${newRowCount}</td>
                    <td>
                        <select name="TintersR${newRowCount}" class="SelectTinter" id="CFTintersR${newRowCount}"
                            onchange="CreateNewTinterRow(this)">
                        </select>
                    </td>
                    <td class="quantity">
                        <input name="GramInputTotalR${newRowCount}" class="InputQuantityGram" type="text"
                            id="GramInputTotalR${newRowCount}" value="0" readonly />
                    </td>
                    <td class="quantity">
                        <input name="LiterInputTotalR${newRowCount}" class="InputQuantityVolumn" type="text"
                            id="LiterInputTotalR${newRowCount}" value="0" readonly />
                    </td>
            `;


            var newRowTinterQuantity = document.createElement('tr');
            newRowTinterQuantity.innerHTML = `
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C1"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C2"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C3"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C4"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C5"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                    <td>
                        <input class="QuantityInput R${newRowCount}Sub R${newRowCount}C6"  value="" type="text" onkeypress="return isNumeric(event)" oninput="sanitizeInputValue(this)" onchange="calculateAllTinterQuantities(this)">
                    </td>
                `;


            // put newTinterRow to tbody id TinterBody
            // put newTinterQuantity to tbosy id TinterQuantityBody
            // Append the new rows to TinterBody and TinterQuantityBody
            Tintertbody.appendChild(newRowTinterBody);
            quantityTbody.appendChild(newRowTinterQuantity);
            console.log("ID:", selectId);
            var selectedTinterBox = document.getElementById(selectId)
            console.log('ModifiedInput value:', document.getElementById(ModifiedInput.id).value);

            UpdateLastTinterSelectionOpitons()
        }
    }

    function UpdateAllTinterSelectionOPtions() {
        var className = "SelectTinter";
        var selectBoxes = document.getElementsByClassName(className);

        var TinterIDs;
        var SubCategoryID = document.getElementById('SubCategorySelect').value;
        State.SubCategories.forEach((EachSubCategory) => {
            if (EachSubCategory.SubCategory_Id == SubCategoryID) {
                TinterIDs = EachSubCategory.Products;
            }
        })

        // console.log("TinterIDs = ", TinterIDs);
        // console.log("Tinters = ", State.Products);

        // Filter Tinters based on TinterIDs
        const Tinters = State.Products.filter(tinter => TinterIDs.includes(tinter.Product_Id));

        // Iterate over each select box
        for (var i = 0; i < selectBoxes.length; i++) {
            var selectBox = selectBoxes[i];

            // Remove existing options
            selectBox.innerHTML = '';

            // an empty option for first selection
            var FirstOption = document.createElement('option');
            FirstOption.value = "";
            FirstOption.text = "Select a Tinter";
            FirstOption.selected = true;
            FirstOption.disabled = true;
            selectBox.appendChild(FirstOption)

            Tinters.forEach((EachTinter) => {
                // Add new options
                var option = document.createElement('option');
                option.value = EachTinter.Product_Id;
                option.text = EachTinter.Product_Name;

                selectBox.appendChild(option)
            })
        }
    }

    function UpdateLastTinterSelectionOpitons() {
        var className = "SelectTinter";
        var selectBoxes = document.getElementsByClassName(className);

        var TinterIDs;
        var SubCategoryID = document.getElementById('SubCategorySelect').value;
        State.SubCategories.forEach((EachSubCategory) => {
            if (EachSubCategory.SubCategory_Id == SubCategoryID) {
                TinterIDs = EachSubCategory.Products;
            }
        })

        // console.log("TinterIDs = ", TinterIDs);
        // console.log("Tinters = ", State.Products);

        // Filter Tinters based on TinterIDs
        const Tinters = State.Products.filter(tinter => TinterIDs.includes(tinter.Product_Id));

        // Iterate over each select box
        var selectBox = selectBoxes[selectBoxes.length - 1];

        // Remove existing options
        selectBox.innerHTML = '';

        // an empty option for first selection
        var FirstOption = document.createElement('option');
        FirstOption.value = "";
        FirstOption.text = "Select a Tinter";
        FirstOption.selected = true;
        FirstOption.disabled = true;
        selectBox.appendChild(FirstOption)

        Tinters.forEach((EachTinter) => {
            // Add new options
            var option = document.createElement('option');
            option.value = EachTinter.Product_Id;
            option.text = EachTinter.Product_Name;

            selectBox.appendChild(option)
        })
    }


    function calculateAllTinterQuantities(inputElement) {

        if (inputElement) {
            if (inputElement.value) {
                var inpValue = parseFloat(inputElement.value)
                //  inputElement.value = inpValue.toFixed(2)
            }
        }

        var Tintertbody = document.getElementById('TinterBody');
        var rowCount = Tintertbody.getElementsByTagName('tr').length;

        for (i = 1; i <= rowCount; i++) {
            var AllSubColumns = document.getElementsByClassName(`R${i}Sub`);
            var TinterQuatitySum = 0;
            //  console.log("Rowcount : ", i)
            for (j = 0; j < AllSubColumns.length; j++) {
                //   console.log("Sub column : ", j)
                //  console.log("each row : ", AllSubColumns[j].value);
                TinterQuatitySum += isNaN(parseFloat(AllSubColumns[j].value)) ? 0 : parseFloat(AllSubColumns[j].value);
                var InpQty = isNaN(parseFloat(AllSubColumns[j].value)) ? 0 : parseFloat(AllSubColumns[j].value);
                AllSubColumns[j].value = InpQty !== 0 ? InpQty.toFixed(2) : "";
            }

            // find product density and volume
            var Product_Id = document.getElementById(`CFTintersR${i}`).value;

            if (Product_Id) {
                document.getElementById(`GramInputTotalR${i}`).value = !isNaN(TinterQuatitySum) ? TinterQuatitySum : 0;
                var Product = State.Products.find(product => product.Product_Id == Product_Id);

                var ProductVolume = parseFloat((TinterQuatitySum * parseFloat(Product.Product_Density)) / 1000).toFixed(1);
                document.getElementById(`LiterInputTotalR${i}`).value = !isNaN(ProductVolume) ? ProductVolume : 0;
            }

        }

        FindTotalWithoutAdditives()
    }

    function FindTotalWithoutAdditives() {
        var Tintertbody = document.getElementById('TinterBody');
        var rowCount = Tintertbody.getElementsByTagName('tr').length;

        var TotalQuantityWithoutAddtives = 0;
        var TotalVolumeWithoutAddtives = 0;

        for (i = 1; i <= rowCount; i++) {
            TotalQuantityWithoutAddtives += parseFloat(document.getElementById(`GramInputTotalR${i}`).value);
            TotalVolumeWithoutAddtives += parseFloat(document.getElementById(`LiterInputTotalR${i}`).value);

        }

        document.getElementById('TotalGramsWithoutAddtives').value = TotalQuantityWithoutAddtives.toFixed(2);
        document.getElementById('TotalVolumeWithoutAddtives').value = TotalVolumeWithoutAddtives.toFixed(2);

        FindBinderValue()
    }

    function FindBinderValue() {
        //// alert("Find Biner value")
        //console.log(Sub_Category);
        var SubCategorySelectID = document.getElementById('SubCategorySelect').value;
        var Sub_Category = State.SubCategories.find(SubCategory => SubCategory.SubCategory_Id == SubCategorySelectID);

        var Sub_Category_Name = Sub_Category.SubCategory

        //var Sub_Category;
        var Binder1_EQ;
        var Binder2_EQ;
        var Sum_qty;
        var mattValue;
        var gloss;

        var BinderError = false;
        var err;

        // gram or liter
        Sum_qty = parseFloat(document.getElementById('TotalGramsWithoutAddtives').value);

        // matt or gloss
        if (Sub_Category.Gloss || Sub_Category.Matt) {
            mattValue = parseFloat(document.getElementById('MattOrGlossINPTag').value);
            gloss = parseFloat(document.getElementById('MattOrGlossINPTag').value);
        } else {
            mattValue = 1;
            gloss = 1;
        }

        var Binder1Avalue = parseFloat(Sub_Category.Binder1Avalue);
        var Binder1Bvalue = parseFloat(Sub_Category.Binder1Bvalue);
        var Binder1Cvalue = parseFloat(Sub_Category.Binder1Cvalue);
        var Binder1Dvalue = parseFloat(Sub_Category.Binder1dvalue);


        var Binder2Avalue = parseFloat(Sub_Category.Binder2Avalue);

        console.log("Sum_qty", Sum_qty, " mattValue", mattValue, " gloss", gloss);

        var Binder1INP = document.getElementById('Binder1INP');
        var Binder1INPVolume = document.getElementById('Binder1INPVolume');
        var Binder1Name = document.getElementById('Binder1Name').value;

        var Binder2INP = document.getElementById('Binder2INP');
        var Binder2INPVolume = document.getElementById('Binder2INPVolume');
        var Binder2Name = document.getElementById('Binder2Name').value;

        if (Sub_Category.Binder1) {
            // error handle in no values enter by admin.
            if (isNaN(Binder1Avalue) || isNaN(Binder1Bvalue) || isNaN(Binder1Cvalue) || isNaN(Binder1Dvalue)) {
                alert("Binder calculations are not possible at Binder 1 without the proper binder equation for this sub-category.");
            } else {
                if (!isNaN(((Sum_qty * Binder1Avalue * mattValue) - (Binder1Bvalue * Binder1Cvalue * Sum_qty)) / Binder1Dvalue)) {
                    Binder1INP.value = (((Sum_qty * Binder1Avalue * mattValue) - (Binder1Bvalue * Binder1Cvalue * Sum_qty)) / Binder1Dvalue).toFixed(2).toString();
                    BinderVolumeFinder("Binder1INPVolume", Binder1Name, Binder1INP.value);
                } else {
                    Binder1INP.value = 0;
                    document.getElementById('Binder1INPVolume').value = 0;
                }
            }
        }

        if (Sub_Category.Binder2EQ1) {
            if (isNaN(Binder2Avalue)) {
                alert("Binder calculations are not possible at Binder 2 without the proper binder equation for this sub-category.");
            } else {
                if (!isNaN((Sum_qty * Binder2Avalue) - parseFloat(Binder1INP.value))) {
                    Binder2INP.value = ((Sum_qty * Binder2Avalue) - parseFloat(Binder1INP.value)).toFixed(2).toString();
                    BinderVolumeFinder("Binder2INPVolume", Binder2Name, Binder2INP.value);
                } else {
                    Binder2INP.value = 0
                    document.getElementById('Binder2INPVolume').value = 0;
                }
            }
        } else if (Sub_Category.Binder2EQ2) {
            if (isNaN(Binder2Avalue)) {
                alert("Binder calculations are not possible at Binder 2 without the proper binder equation for this sub-category.");
            } else {
                if (!isNaN(Sum_qty * Binder2Avalue)) {
                    Binder2INP.value = (Sum_qty * Binder2Avalue).toFixed(2).toString();
                    BinderVolumeFinder("Binder2INPVolume", Binder2Name, Binder2INP.value);
                } else {
                    Binder2INP.value = 0
                    document.getElementById('Binder2INPVolume').value = 0;
                }
            }
        }

        function BinderVolumeFinder(VolumeID, BinderName, Quantity) {
            //  alert("sdf");
            var Binder = State.Binders.find(OneBinder => OneBinder.Binder_Name == BinderName)
            // Check if Binder is defined
            if (Binder) {
                var BinderVolume = (parseFloat(Quantity) * parseFloat(Binder.Binder_Density) / 1000).toFixed(2);
                console.log("Binder volume value: ", BinderVolume);
                document.getElementById(VolumeID).value = BinderVolume;
            } else {
                console.error("Binder not found for name:", BinderName);
            }

        }

        function AlertBinder(Binder1_, Binder2_) {
            // alert("Binder 1: ", Binder1_);
            // alert("Binder 2: ", Binder2_);
        }
        HandleAdditiveChange();
    }

    function HandleAdditiveChange() {
        var AdditiveSelectID = document.getElementById('AdditiveSelect').value;

        if (AdditiveSelectID) {
            var Additive = State.Additives.find(OneAdditive => OneAdditive.Additive_Id == AdditiveSelectID);
            var AdditivePercentage = parseFloat(document.getElementById('AdditivePercentage').value);

            var TotalwitoutBindersAndAddtives = parseFloat(document.getElementById('TotalGramsWithoutAddtives').value)

            var Binder1INP = document.getElementById('Binder1INP').value ? parseFloat(document.getElementById('Binder1INP').value) : 0;
            var Binder2INP = document.getElementById('Binder2INP').value ? parseFloat(document.getElementById('Binder2INP').value) : 0;

            var TotalWithBinders = TotalwitoutBindersAndAddtives + Binder1INP + Binder2INP;

            var AdditiveQuantity = ((TotalWithBinders / 100) * AdditivePercentage).toFixed(2);
            document.getElementById('Additive_Gram').value = AdditiveQuantity;

            console.log("Addtitve: ", Additive);

            var AdditiveVolume = (parseFloat(AdditiveQuantity) * parseFloat(Additive.Additive_Density) / 1000).toFixed(2);
            document.getElementById('Additive_Volume').value = AdditiveVolume;
        } else {
            document.getElementById('Additive_Gram').value = 0
            document.getElementById('Additive_Volume').value = 0;

        }
        CalculateTotalQuantity();
    }

    function CalculateTotalQuantity() {
        var TotalWitoutBindersAndAddtives_Grams = parseFloat(document.getElementById('TotalGramsWithoutAddtives').value) || 0;
        var TotalWitoutBindersAndAddtives_Volume = parseFloat(document.getElementById('TotalVolumeWithoutAddtives').value) || 0;
        var Binder1_Grams = parseFloat(document.getElementById('Binder1INP').value) || 0;
        var Binder1_Volume = parseFloat(document.getElementById('Binder1INPVolume').value) || 0;
        var Binder2_Grams = parseFloat(document.getElementById('Binder2INP').value) || 0;
        var Binder2_Volume = parseFloat(document.getElementById('Binder2INPVolume').value) || 0;
        var Additive_Gram = parseFloat(document.getElementById('Additive_Gram').value) || 0;
        var Additive_Volume = parseFloat(document.getElementById('Additive_Volume').value) || 0;

        var TotalInGrams = TotalWitoutBindersAndAddtives_Grams + Binder1_Grams + Binder2_Grams + Additive_Gram;
        var TotalInVolume = TotalWitoutBindersAndAddtives_Volume + Binder1_Volume + Binder2_Volume + Additive_Volume;

        document.getElementById('Total_Gram').value = TotalInGrams.toFixed(2);
        document.getElementById('Total_Volume').value = TotalInVolume.toFixed(2);

        FindSolidContent()
    }

    function FindSolidContent() {
        var ProductSolidContent = 0;
        var SumOfVOCOfEachRow = 0;

        var ProductsClassData = document.getElementsByClassName('SelectTinter');

        if (ProductsClassData.length > 0) {
            for (i = 0; i < ProductsClassData.length; i++) {
                var j = i + 1;
                if (ProductsClassData[i].value) {
                    var ProductData = State.Products.find(tinter => tinter.Product_Id == ProductsClassData[i].value)
                    if (ProductData) {
                        var ProductQuantity = parseFloat(document.getElementById(`GramInputTotalR${j}`).value)
                        // solid Content
                        var SolidContent = parseFloat(ProductData.SolidContent) * ProductQuantity / 100;
                        ProductSolidContent += SolidContent;

                        // VOC
                        var Voc = parseFloat(ProductData.VOC) * ProductQuantity / 100;
                        SumOfVOCOfEachRow += Voc;
                    }
                }
                // console.log("Product: ", ProductsClassData[i].value);
            }
        }
        var TotalFormulaQuantity = parseFloat(document.getElementById('Total_Gram').value);
        var FormulaSolidContent = (ProductSolidContent / TotalFormulaQuantity) * 100;

        document.getElementById('CFFormulaSolidContent').value = FormulaSolidContent.toFixed(2);


        // find Density of formula
        var FormulaDesity = (parseFloat(document.getElementById('Total_Gram').value) / parseFloat(document.getElementById('Total_Volume').value)) * 1000;
        document.getElementById('CFFormulaDensity').value = FormulaDesity.toFixed(3);

        //   Find VOC
        var SumOfVoc = (SumOfVOCOfEachRow / TotalFormulaQuantity) * 100;
        var FormulaVOC = SumOfVoc * 10 * (FormulaDesity.toFixed(3) / 1000)

        document.getElementById('CFFormulaVOC').value = FormulaVOC.toFixed(3);


        // sampled QTY
        document.getElementById('SampleQty').value = `${TotalFormulaQuantity} / ${document.getElementById('Total_Volume').value}`;

    }

    function SaveFromulaAndPrintLabelST1() {
        // Get the form element
        var form = document.getElementById('uploadForm');

        // Change the action attribute
        form.action = '/CreateFormula/PrintLabelST1'; // Replace 'NewActionURL' with the desired URL

        // Set the target attribute to '_blank' to open the result in a new tab or window
        form.target = '_blank';

        // Submit the form
        form.submit();

        // Set the target attribute to '' to open the result in a new tab or window
        form.target = '';
        // Change the action attribute
        form.action = '/CreateFormula'; // Replace 'NewActionURL' with the desired URL
    }



    function isNumeric(event) {
        var key = event.keyCode || event.which;
        var keyChar = String.fromCharCode(key);

        // Allow only numeric characters and special keys like Backspace, Delete, etc.
        if (!/[\d.-]/.test(keyChar) && key !== 8 && key !== 9 && key !== 13 && key !== 27 && key !== 46) {
            event.preventDefault();
            return false;
        }
    }



</script>




<style>
    .CreateFormulaMainDivArea {
        background-color: #eef0fd;
        margin-top: -5rem;
        padding-bottom: 10rem;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 1rem;

    }

    .containers {
        width: 100%;
        /*  border: 2px gray solid;
        border-radius: 25px;
    */
    }

    .CFMainHeader {
        width: 100%;
        height: 5rem;
        display: flex;
        justify-content: space-between;
        padding: 0 3rem;
        align-items: center;
    }

    .CFheader {
        margin-top: 25px;
        font-weight: 600;
    }


    .CFclearAllBTN,
    .CFSaveBTN {
        background-color: gray;
        padding: 1rem 2rem;
        margin: 0 1rem;
        margin-top: 16px;
        color: #eef0fd;
        font-weight: 700;
        letter-spacing: 3px;
    }

    .CFSaveBTN {
        background-color: #3b3be1;
    }

    .MainArea {
        width: 100%;
        display: flex;
        justify-content: space-between;
        padding: 0 1rem;
        padding-bottom: 5rem;
    }

    .CFAside {
        width: 25%;
        padding: 0rem 1rem;
    }

    .CFBasicDetails,
    .CFBasicDetailsImg {
        width: 100%;
        display: flex;
        flex-direction: column;
        margin: 1rem 0;
    }

    .CFBasicDetailsImg {
        align-items: center;
    }

    .CFBasicPtag {
        font-size: 18px;
        font-weight: 600;
        margin: 0;
    }

    .CFBasicInp {
        margin-top: 5px;
        border: 1px solid rgb(92, 92, 92);
        border-left-color: blue;
        border-left-width: 3px;
        padding: 5px;
        font-size: 15px;
        width: 100%;
        border-radius: 5px;
        font-size: 20px;
        font-weight: 600;
    }

    #CFselectedImage {
        text-align: center;
        width: fit-content;
        height: 10rem;
    }

    .CFMainContent {
        width: 74%;
    }

    .CFMainContentHeader {
        display: flex;
        width: 100%;
        margin: 25px 0;
        padding: 0 8rem;
        justify-content: space-between;
    }

    .CFMainContenSecondarytHeader {
        display: flex;
        width: 100%;
        margin: 45px 0;
        padding: 0 8rem;
        justify-content: end;
    }

    .CFMainSelectionDiv {
        display: flex;

    }

    .CFmainSelection {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }

    .CFMainSelectionDiv select {
        width: 200px;
        padding: .5rem;
        font-size: 20px;
        font-weight: 600;
        margin-top: -8px;
        margin-left: 20px;
    }

    .CFMainSelectionDiv input {
        margin-left: 20px;
        width: 200px;
        padding: .5rem;
        font-size: 20px;
        font-weight: 600;
        margin-top: -8px;
    }

    .TableStarting {
        width: 100%;
    }


    /* Override the default border color for the table-bordered class */
    .CFcustom-border {
        border-color: black;
    }

    /* Optional: To style the table head cells (optional) */
    .table thead th {
        background-color: #f0f0f0;
    }


    /* Center content horizontally and vertically in <th> elements */
    .table th {
        text-align: center;
        vertical-align: middle;
    }

    .CFTinters {
        font-size: 18px;
        font-weight: 600;
        padding: .5rem;
        background-color: none;
        background: none;
    }

    .GramInputTotal,
    .LiterInputTotal {
        width: 5rem;
        font-size: 18px;
        font-weight: 600;
        border: none;
        background-color: none;
        background: none;
        text-align: center;
        padding: .5rem;
    }

    .CFInpValue {
        width: 4rem;
        padding: .5rem;
        text-align: center;
        background-color: none;
        background: none;
        font-size: 18px;
        font-weight: 600;
    }

    .CFBelowTable {
        display: flex;
        justify-content: space-between;
    }

    .CFBulkConverstedTableandBindersAndAdditives {
        width: 50%;
        /*border: 1px solid gray;
        border-radius: 25px;
        padding: 1rem;*/
    }

    .CFBindersAndAdditivesUnits {
        display: flex;
        width: 100%;
        justify-content: end;
    }

    .CFeachUnit {
        width: 118px;
        margin-left: 0rem;
    }

    .CFUnitsTotal {
        font-size: 15px;
        font-weight: 600;
    }


    .CFTotalInputElements {
        margin-left: 2rem;
    }

    .CFTotalWithoutAdditives {
        /* border: 1px solid rgba(0, 0, 0, 0.529); */
        border-top: transparent;
        width: 48%;
        display: flex;
        align-items: center;
        height: 68px;
    }

    .CFTotalWithoutAdditivesLabel {
        height: 100%;
        border-top: transparent;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 42%;
        /* border: 1px solid rgba(0, 0, 0, 0.319); */
    }

    .CFTotalWithoutAdditivesinGrams,
    .CFTotalWithoutAdditivesinVolume {
        height: 100%;
        width: 29%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .CFBinderHead {
        display: flex;
        justify-content: space-between;
    }

    .CFBindersAndAdditives {
        width: 100%;
        border: 1px solid rgba(0, 0, 0, 0.319);
        padding: 1rem;
    }

    .CFBinder1Div,
    .CFBinder2Div {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .CFBindersHeading {
        font-size: 20px;
        font-weight: 600;
    }

    .CFBinderName {
        font-size: 18px;
        font-weight: 500;
    }

    .CFBinder1Div input[type="text"],
    .CFBinder2Div input[type="text"] {
        width: 125px;
        text-align: center;
    }

    .CFTotalCalcDiv {
        margin-left: 2rem;
    }


    .CFSelectAdditives {
        width: 200px;
        padding: 1rem;
        margin-top: -1rem;
        font-size: 18px;
        font-weight: 500;
    }

    .CFSelectAdditivesDiv {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .CFSelectAdditivesDiv p {
        margin-top: 1rem;
    }

    .CFTotalWithAdditives {
        display: flex;
        flex-direction: column;
    }

    .CFTotalWithAddUnit {
        display: flex;
        justify-content: end;
    }

    .CFTotalWithAddAndBinder {
        display: flex;
        justify-content: space-between;
    }

    .CFtotalwithAddValuesDiv {
        display: flex;
    }

    .CFtotalwithAddValues {
        width: 123px;
        text-align: center;
        margin-left: 2rem;
    }

    .CFBulkConvertionTable {
        width: 50%;
    }

    .CFsolidContentCalcDivArea {
        margin-top: 0rem;
        width: 100%;


    }

    .CFsolidContentCalcDiv {
        width: 100%;
        display: flex;
        padding: 1rem 0;
        /*
        justify-content: space-between;
        flex-direction: column;
    */
    }

    .CFSolidContentInput {
        width: 300px;
        text-align: center;
        padding: 0.5rem;
        background: transparent;
        border: 1px solid gray;
    }

    .CFSolidContentInputNoLabel {
        width: 350px;
        text-align: center;
        margin-top: -10px;
        height: 45px;
    }

    .CFsolidContentCalcDivNoLabel {
        width: 100%;
        display: flex;
        justify-content: end;
        padding: 1rem 0;
    }

    .CFRemark {
        margin-top: 0rem;
        width: 100%;
        border: 1px solid rgba(0, 0, 0, 0.319);
        background-color: #6b6b6b;
        border-radius: 5px;
        margin-bottom: 5rem;
    }

    .CFRemarkHeading {
        display: flex;
        align-items: center;
        padding: .5rem 1rem;
        background-color: #414141;
        width: 100%;
        color: white;
        font-size: 18px;
        font-weight: 600;
    }

    .CFRemarkHeading p {
        margin-top: 1rem;
    }

    .CFRemarksDIv {
        height: 10rem;
        padding: 1rem;
        color: whitesmoke;
        width: 100%;
    }

    .CFslNo {
        width: 1rem;
    }

    .CfTinders {
        width: 10rem;
    }

    .GramInputTotal,
    .LiterInputTotal,
    .R1C1,
    .R1C2,
    .R1C3,
    .R1C4,
    .R1C5,
    .R1C6 {
        border: none;
        background-color: transparent;
        /*transparent;*/
        outline: none;
        width: 4rem;
        font-size: 15px;
        font-weight: 500;
    }

    .GramInputTotal,
    .LiterInputTotal {
        width: 7rem;
    }

    .CFTinters {
        background-color: transparent;
        font: 30px;
        font-weight: 600;
        width: 10rem;
        padding: 1rem 1rem;
        border: none;
    }

    .CFInputTotal {
        font-size: 1.4rem;
    }

    .CFInpValue {
        font-size: 1.2rem;
        border-bottom: 1px solid black;
    }

    .CFTotalInputElementsGrams,
    .CFTotalInputElementsLiter {
        width: auto;
    }

    #TotalQtyInGram,
    #TotalQtyInLiter {
        width: 130px;
        background-color: transparent;
        text-align: center;
    }

    #TotalAdditives {
        width: 50%;
    }

    .CFRemarksDiv {
        width: 50%;
        padding: 0 1rem;
    }


    #CFRemarks {
        background-color: transparent;
        width: 100%;
        border: none;
        color: whitesmoke;
        font-size: 20px;
        height: 5rem;
    }


    .readonly-input {
        outline: none;
        border: none;
        background-color: rgba(224, 224, 224, 0.255);
        padding: 1rem 0;
        text-align: center;
        /* Add more styles as needed */
    }

    .CFAllDiv {
        margin-bottom: 10rem;
    }

    #loadingIndicator {
        display: none;
        /* Add your custom CSS styles for the loading indicator here */
    }


    /* new Layout desing  */
    body {
        background-color: #eef0fd;
    }

    .CustomContainer {
        display: flex;
        flex-direction: column;
        padding: 2rem 1rem;
        margin-top: -90px;
    }

    .CFMainHeader {
        display: flex;
        justify-content: space-between;
        margin-bottom: 2rem;
    }

    .CFheader {
        margin-left: 1rem;
        font-size: 35px;
        font-weight: 500;
    }

    .CFclearAllBTN,
    .CFSaveBTN {
        background-color: #141919;
        color: #01fdfd;
        font-weight: 600;
        padding: 0.5rem 3rem;
        margin: 0 1rem;
    }

    .CFclearAllBTN {
        background-color: #575b5b;
        font-weight: 500;
    }

    .CFclearAllBTN:hover,
    .CFSaveBTN:hover {
        color: whitesmoke;
        font-weight: 600;
    }

    .CFMinHeaderBTNs {
        margin-right: 2rem;
    }



    .MainSection {
        margin: 2rem 1rem;
        display: flex;
        gap: 2rem;
    }

    .Detailleftsection {
        width: 20%;
        font-size: 13px;
        font-weight: 600;
        gap: 1rem;
    }

    .CFBasicDetails {
        margin: 1rem 0;
        display: flex;
        flex-direction: column;
        align-items: start;
        justify-content: start;
    }

    .DateSection,
    .fileNoSection {
        flex-direction: row;
        gap: 1rem;
    }

    .DateBasicINP {
        width: 118px;
        padding: 0.5rem;
        border-radius: 10px;
        border: 1px solid gray;
        background-color: #575b5b;
        color: #c4c5c5;
    }

    .DateSection p,
    .fileNoSection p {
        margin-top: 0.5rem;
    }

    .FileNoBasicINP {
        width: 100px;
        padding: 0.5rem;
        border-radius: 10px;
        border: 1px solid gray;
        background-color: #575b5b;
        color: #c4c5c5;
    }

    .CFBasicDetails p {
        margin-bottom: 0rem;
    }

    .CFBasicInp {
        padding: 0.5rem;
        border-radius: 10px;
        border: 1px solid gray;
        background-color: transparent;
        width: 90%;
    }

    .CustomerNameInp {
        background-color: #ffff00;
        color: #2d2d2d
    }

    .custum-file-upload {
        height: 100px;
        width: 90%;
        display: flex;
        flex-direction: column;
        align-items: space-between;
        gap: 20px;
        cursor: pointer;
        align-items: center;
        justify-content: center;
        border: 2px dashed #6b6b6b;
        background-color: transparent;
        padding: 1.5rem;
        border-radius: 10px;
    }


    .custum-file-upload .icon {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custum-file-upload .icon svg {
        height: 20px;
        fill: #6b6b6b;
    }

    .custum-file-upload .text {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .custum-file-upload .text span {
        font-weight: 400;
        color: #252525;
        font-size: 10px;
    }

    .custum-file-upload input {
        display: none;
    }

    .icon {
        position: relative;
        width: auto;

        z-index: 99;
        left: 0;
        bottom: 0;
    }

    .popAttachements {
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        align-content: center;
        justify-content: flex-start;
        gap: 1rem;
        margin: 2rem 0;
    }

    .AttachmentIMG {
        min-width: 50%;
        max-width: 90%;
        min-height: 100px;
        max-height: 200px;
    }

    .popAttachementsCollections {
        border-radius: 10px;
        display: flex;
        align-content: center;
        justify-content: center;
        padding: 1rem;
        height: 100%;
    }

    .CFsolidContentCalcDivArea {
        font-size: 18px;
    }

    .CFsolidContentCalcDiv {
        display: flex;
        gap: 1rem;
        align-items: baseline;
        /*
        justify-content: space-between;
      */
        margin: 1rem 0rem;
    }

    .CFsolidContentCalcDiv p {
        margin-bottom: 0rem;
        margin-top: 1rem;
    }

    .CFSolidContentInput {
        background-color: transparent;
        border: none;
        background-color: #cfd1dc;
        padding: 0.5rem;
        border-radius: 10px;
        min-width: 3rem;
        max-width: 7rem;
    }

    .RightSideSection {
        width: 78% !important;
    }

    .RightTopSelectionArea {
        display: flex;
        gap: 4rem;
    }

    .MattGlossEntryDiv,
    .CategorySelectionDiv,
    .SubcategorySelectionDiv {
        display: flex;
        gap: 1rem;
        align-items: baseline;
        font-size: 18px;
    }

    .CFCategory,
    .CFSubCategory {
        width: 15rem;
    }

    .CFCategory,
    .CFSubCategory,
    .MattOrGlossINP {
        padding: 0.3rem;
        background-color: #ffff00;
        border: none;
        border-radius: 10px;
        outline: none;
    }

    .MattOrGlossINP {
        width: 5rem;
        padding-left: .5rem;
    }

    .TopTables {
        display: flex;
        gap: 1rem;
    }

    .TinterTableDiv,
    .TinterQuantityTableDiv {
        width: 49%;
    }

    #Tintertable,
    #TinterQuantityTable {
        border: none;
        overflow: hidden;
        border-radius: 8px;
    }

    .TinterQuantityTable {
        border: none;
        overflow: hidden;
        border-radius: 8px;
    }

    table {
        border-collapse: collapse;
        width: 100%;
        margin: 20px 0;
    }

    th,
    td {
        border-bottom: 1px solid #20c3c3;
        border-left: 1px solid #20c3c3;
        /* border: 1px solid #20c3c3;*/
        padding: 10px;
        text-align: center;
    }

    th {
        background-color: #575b5b;
        color: white;
    }

    td {
        background-color: #575b5b;
        color: white;
    }

    .quantity {
        background-color: #cfd1dc;
        color: #4e5570;
        width: 8rem;
    }

    .SelectTinter {
        box-sizing: border-box;
        width: 13rem;
        background: #575b5b;
        outline: none;
        border: none;
        color: white;
        font-size: 18px;
    }

    .InputQuantityGram,
    .InputQuantityVolumn,
    .InputReadOnly {
        width: 4rem;
        box-sizing: border-box;
        text-align: center;
        background: transparent;
        outline: none;
        border: none;
        color: #4e5570;
        font-size: 18px;
    }

    .InputReadOnly {
        width: 100%;
        margin-top: 1rem;
    }

    .QuantityHead {
        height: 4.7rem;
        font-size: 12px;
    }

    .QuantityInput {
        width: 100%;
        background: transparent;
        outline: none;
        border: none;
        color: white;
        text-align: center;
        border-bottom: 1px solid gray;
        font-size: 18px;
    }

    .AddBinderRemarksSection {
        display: flex;
        gap: 1rem;
    }

    .Add_BinderSectio {
        width: 49%;
        background-color: #575b5b;
        border-radius: 9px;
        height: fit-content;
        font-size: 18px;
    }

    .DetailText {
        font-size: 18px;
        color: white;
    }

    .WithouAdditvesSection,
    .BinderSection,
    .BindersArea {
        display: flex;
        justify-content: space-between;
    }

    .ReadOnlyInPSEct {
        display: flex;
        justify-content: end;
    }

    .InputRead {
        width: 100%;
    }

    .withoutAdditiveVolume,
    .withoutAdditiveGrams {
        background-color: #cfd1dc;
        color: #4e5570;
        width: 8rem;
        border-left: 1px solid #20c3c3;
    }

    .DetailText {
        margin-top: 1rem;
        margin-left: 1rem;
    }



    .WithouAdditvesSection {
        border-bottom: 1px solid #20c3c3;
    }

    .BinderNameText {
        background-color: transparent;
        text-align: left;
        border: none;
        outline: none;
        color: white;
        margin-top: 10px;
    }

    .BinderSection {
        gap: 2rem;
        border-bottom: 1px solid #20c3c3;
    }

    .BindersText {
        margin-top: 10px;
    }

    .BindersInputArea {
        display: flex;
        justify-content: end;
        background-color: #cfd1dc;
        color: #4e5570;
    }

    .BindersInputDiv {
        width: 8rem;
        border-left: 1px solid #20c3c3;
    }

    .BinderReadOnlyINp {
        background-color: transparent;
        width: 100%;
        border: none;
        outline: none;
        padding: 7px;
        text-align: center;
        color: #4e5570;
    }

    .AdditiveSelection {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        border-bottom: 1px solid #20c3c3;
    }

    .AdditiveSelectionArea {
        display: flex;
        align-items: baseline;
        padding: .5rem 0;
    }

    .AdditiveArea,
    .AdditveInputArea {
        display: flex;
        align-items: baseline;
    }

    .AdditiveSelect {
        width: 8rem;
        border: none;
        outline: none;
        border-radius: 10px;
        background-color: #cfd1dc;
        color: #3e4562;
        margin: 0 1rem;
        padding: 0.2rem;
    }

    .AdditivePerInp {
        width: 3rem;
        border: none;
        outline: none;
        border-radius: 10px;
        background-color: #cfd1dc;
        color: #3e4562;
        padding: 0.2rem .5rem;
    }

    .PercentageSign {
        margin: 0;
        margin-left: 0.5rem;
        margin-right: 1rem;
    }

    .AdditveInputArea {
        display: flex;
        justify-content: end;
        background-color: #cfd1dc;
        color: #4e5570;
    }

    .AdditiveInpDiv {
        padding: .5rem 0;
        width: 8rem;
        border-left: 1px solid #20c3c3;
    }

    .AdditiveInpReadOnly,
    .TotalInpReadOnly {
        background-color: transparent;
        width: 100%;
        border: none;
        outline: none;
        padding: 7px;
        text-align: center;
        color: #4e5570;
    }

    .AddtiveText {
        margin: 0 1rem;
    }

    .TotalSection {
        display: flex;
        justify-content: space-between;
    }

    .TotalInputArea {
        display: flex;
        justify-content: end;
        display: flex;
        justify-content: end;
        background-color: #cfd1dc;
        color: #4e5570;
    }

    .InputTotlaDiv {
        padding: .5rem 0;
        width: 8rem;
        border-left: 1px solid #20c3c3;
    }

    .RemarksPrintSEction {
        width: 49%;
        display: flex;
        flex-direction: column;
    }

    .RemarkSection {
        width: 100%;
        background-color: #575b5b;
        border-radius: 8px;
    }

    .remarkHeader {
        border-bottom: 1px solid #20c3c3;
        width: 100%;
    }

    .RemarkText {
        margin-top: 0;
        padding-top: 1rem;
    }

    .RemarksContentDiv {
        padding: 1rem;
    }

    .RemaarkContent {
        width: 100%;
        text-align: left;
        background-color: transparent;
        border: none;
        outline: none;
        text-align: left;
        color: white;
    }


    .PrintBottons {
        margin-top: 2rem;
        width: 100%;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        padding: 2rem;
    }

    .PrintBTN {
        background-color: #141919;
        color: #bebfbf;
        padding: 1rem 2rem;
        border-radius: 10px;
        font-size: 15px;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        text-underline-offset: none;
    }

    .PrintBTN:hover {
        background-color: #4d4d4d;
        color: #e9e9e9;
    }
</style>