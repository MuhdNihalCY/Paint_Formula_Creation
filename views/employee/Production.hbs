<section>



    <div id="popupWrapper">

    </div>
    <div id="overlay"></div>

    <div id="fullscreen-popup">
        <!-- Popup content -->
        <div class="popupContent">
            <div class="PopHeaderDiv">
                <p class="PopHeader">Select Date</p>
                <button class="Popclose-button" onclick="closeFullscreenPopup()">X</button>
            </div>
            <hr>
            <div class="PopUpDatesDiv">
                <p class="PopUpLabel">Start Date</p>
                <input type="date" placeholder="Select Start Date" name="StartDate" id="StartDate">
                <p class="PopUpLabel">End Date</p>
                <input type="date" placeholder="Select Start Date" name="EndDate" id="EndDate">
            </div>
            <div class="PopButtonDiv">
                <button class="PopSubmitBtn" onclick="submitDateRange()">Apply Dates</button>
                <button class="PopCancelBtn" onclick="ClearDate()">Clear Filters</button>
            </div>
        </div>
    </div>

    <div class="MainSection">

        <div class="custom-container">
            <div class="OfficeWelcomeDivHeader">
                <div class="mainInner">
                    {{!-- <p class="OfficeWelcomeText">Welcome Dispatcher</p> --}}
                    <div class="SearchFormDiv">
                        <div class="SearchTypesection">
                            <div class="SearchTypeDiv">
                                <p class="SearchTypeLabel">Search Type</p>
                                <select class="search_type" name="" id="search_type" onchange="handleInputChange()">
                                    <option value="Internal">Internal search</option>
                                    <option value="Global">Global search</option>
                                </select>
                            </div>
                        </div>
                        <div class="SearchMainInpSection">
                            <div class="searchInput">
                                <input type="search" id="FormSearch" placeholder="Search"
                                    class="autocomplete-input SearchInP">
                                <div class="autocomplete-options" id="FormSearchList"></div>
                            </div>


                            <div id="dateRangeContainer">
                                <input readonly type="text" id="DateRange" placeholder="Select Date Range"
                                    class="autocomplete-input DateInputS" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="OrdersGridMainDiv">
                <div id="cardParent" class="row align-items-start justify-content-center">





                </div>
            </div>
        </div>
</section>


<script>

    // global state declaration
    let State = {};

    function getAllCardsFromBoard() {
        // Replace 'your-backend-url' with the actual URL of your backend endpoint.
        const backendURL = '/getAllCardsFromBoard';

        // Make a GET request to the backend using the fetch API.
        fetch(backendURL)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Parse the response as JSON.
            })
            .then(data => {
                // Now 'data' contains the response from the server.
                console.table("got all global cards:", data.AllCards);
                State.AllCardsFromBoard = data.AllCards;
                // addCardDataToCards(data.AllCardsFromBoard)
            }).catch(error => {
                // Handle any errors that occurred during the fetch.
                console.error('Fetch error:', error);
            });
    }

    async function fetchAllCardsFormOfficeSectionList() {
        try {
            const backendURL = '/getAllCardsFromProduction';
            const response = await fetch(backendURL);

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json(); // Parse the response as JSON.
            State.AllCards = data.AllCards;
            addCardDataToCards(data.AllCards);
        } catch (error) {
            // Handle any errors that occurred during the fetch.
            console.error('Fetch error:', error);
        }
    }

    // Call the function to initiate the AJAX request.
    document.addEventListener('DOMContentLoaded', function () {
        // This code will run when the page is fully loaded and ready
        fetchAllCardsFormOfficeSectionList();
        getAllCardsFromBoard()

    });

    function addCardDataToCards(AllCards) {
        console.log("Cards: ", AllCards)
        const parentDiv = document.getElementById('cardParent');
        // Clear the parent element by setting its innerHTML to an empty string
        parentDiv.innerHTML = '';

        let NewCard;
        if (AllCards.length === 0) {
            // If there are no elements in AllCards, display "No Orders"
            NewCard = `<div class="NoOrders">No Orders</div>`;
            // Create a temporary div element to convert the HTML string to DOM elements
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = NewCard;

            // Append the child elements from tempDiv to parentDiv
            while (tempDiv.firstChild) {
                parentDiv.appendChild(tempDiv.firstChild);
            }

        } else {
            AllCards.forEach((card, index) => {
                if (card.ImageUrl) {
                    //console.log("Have attachment image Url" + card.id);
                    NewCard = `

                    <div class="EachCard " onclick="SelectaCard('${card._id}')" >
                        <div class="cardNamesection">
                            <p class="Cardname">${card.Name}</p>
                        </div>
                        <div class="cardImagesection">
                            <img src="/images/RefImages/${card.FileNo}.jpg" class="cardImg">
                        </div>
                        <div class="cardActionBTNSEction">
                            {{!-- <button class="ViewCardBtn" onclick="SelectaCard('${card._id}')">View Card</button> --}}
                            {{!-- <button class="ActionCardBtn" onclick="MoveCardToDriver('${card._id}')" >Move card to Driver</button> --}}
                              {{!-- <a href="/dispatcher/moveToCustomerCollection/${card._id}" class="btn ActionCardBtn">Move Card to Customer Collection</a> --}}
                            {{!-- <button class="ActionCardBtn" onclick="moveToCustomerCollection('${card._id}')" >Move Card to Customer Collection</button> --}}
                        </div>
                    </div>`;

                } else {
                    //console.log("Didn't have attachment image Url" + card.id);
                    NewCard = `
                <div class="EachCard " onclick="SelectaCard('${card._id}')">
                    <div class="cardNamesection">
                        <p class="Cardname">${card.Name}</p>
                    </div>
                    <div class="cardImagesection">
                    </div>
                </div>`;
                }

                // Create a temporary div element to convert the HTML string to DOM elements
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = NewCard;

                // Append the child elements from tempDiv to parentDiv
                while (tempDiv.firstChild) {
                    parentDiv.appendChild(tempDiv.firstChild);
                }
            });
        }
    }


    // gloabl Card data
    function addCardDataToCardsGlobal(AllCards) {
        const parentDiv = document.getElementById('cardParent');
        // Clear the parent element by setting its innerHTML to an empty string
        parentDiv.innerHTML = '';

        let NewCard;
        if (AllCards.length === 0) {
            // If there are no elements in AllCards, display "No Orders"
            NewCard = `<div class="NoOrders">No Orders</div>`;
            // Create a temporary div element to convert the HTML string to DOM elements
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = NewCard;

            // Append the child elements from tempDiv to parentDiv
            while (tempDiv.firstChild) {
                parentDiv.appendChild(tempDiv.firstChild);
            }

        } else {
            AllCards.forEach((card, index) => {
                if (card.ImageUrl) {
                    console.log("DriverName" + card.DriverName);
                    NewCard = `
                <div class="EachCard " onclick="SelectaCard('${card._id}')">
                    <div class="cardNamesection">
                        <p class="Cardname">${card.Name}</p>
                        ${card.CurrentList === card.ProductionName ? `<img src="/images/Icons/Edit.jpg" class="CardEditIcon" alt="">` : ``}
                    </div>
                    <div class="cardNamesection">
                        <p class="Cardname">Current List: ${card.CurrentList}</p>
                    </div>
                    
                    <div class="cardImagesection">
                        <img src="/images/RefImages/${card.FileNo}.jpg" class="cardImg">
                    </div>
                </div>`;
                } else {
                    //console.log("Didn't have attachment image Url" + card.id);
                    NewCard = `
                <div class="EachCard " onclick="SelectaCard('${card._id}')">
                    <div class="cardNamesection">
                        <p class="Cardname">${card.Name}</p>
                           ${card.CurrentList === card.ProductionName ? `<img src="/images/Icons/Edit.jpg" class="CardEditIcon" alt="">` : ``}
                    </div>
                    <div class="cardNamesection">
                        <p class="Cardname">Current List: ${card.CurrentList}</p>
                    </div>
                    <div class="cardImagesection">
                    </div>
                </div>`;
                }

                // Create a temporary div element to convert the HTML string to DOM elements
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = NewCard;

                // Append the child elements from tempDiv to parentDiv
                while (tempDiv.firstChild) {
                    parentDiv.appendChild(tempDiv.firstChild);
                }
            });
        }
    }



    // search functionality

    const input = document.getElementById('FormSearch'); // Assuming you have an input element
    const searchMatchedArray = [];

    input.addEventListener('input', function () {
        handleInputChange();
    });

    /*// Add an event listener to listen for input changes in the search input
    input.addEventListener('input', function () {
        const searchTerm = input.value.toLowerCase(); // Convert the input to lowercase for case-insensitive matching

        const allcards = State.AllCards;
        // Use the filter method to find matching cards
        const matchingCards = allcards.filter(card => {
            // Check if the search term exists in the card's name or description
            return (
                card.name.toLowerCase().includes(searchTerm) ||
                card.desc.toLowerCase().includes(searchTerm)
            );
        });

        // Update the searchMatchedArray with the matching cards
        searchMatchedArray.length = 0; // Clear the array
        searchMatchedArray.push(...matchingCards); // Add matching cards

        // You can now use the searchMatchedArray as needed
        //console.log(searchMatchedArray);
        addCardDataToCards(searchMatchedArray);
    });*/




    // pop up screen
    function SelectaCard(id) {
        console.log("card ID: ", id)
        let AllCards = State.AllCards;
        let Card;

        for (let i = 0; i < AllCards.length; i++) {
            if (AllCards[i]._id == id) {
                card = AllCards[i];

                showCardPopup(card)
                break;
            }
        }
    }



    function showCardPopup(card) {
        document.getElementById('popupWrapper').style.display = 'flex';
        document.getElementById('overlay').style.display = 'block';
        document.getElementById('popupWrapper').innerHTML = "";

        var popup = document.createElement('div');
        popup.id = 'popup';

        var popupContent = `
            <form action="/cardUpdated/${card._id}" id="EmployeeCardUpdate" method="post">
                <div class="CloseBTNsection">
                    <p class="CardTitle">Card Details</p>
                    <div onclick="closeCardPopup()" id="closeButton">X</div>
                </div>
                <div id="popupContent">
                    <div class="CardNameSection">
                        <img src="/images/Icons/CardName.png" class="CardnameIcon" alt="">
                        <p class="CardNameStatic">${card.Name}</p>
                    </div>
                    <div class="CardDiscriptionSection">
                        <div class="CardDiscriptionHeader">
                            <img src="/images/Icons/description.png" alt="" class="cardDescriptionIcon">
                            <p class="CardDescriptionHeadername">Description</p>
                        </div>
                        <textarea id="description" class="CardDescription" name="description" required
                            placeholder="Enter card description..." readonly>${card.description}</textarea>
                    </div>
                    <div class="CardChecklistSection">
                        <div class="CardChecklistSectionHeader">
                            <img src="/images/Icons/Tick Box.png" alt="" class="cardCheckliseIcon">
                            <p class="cardChecklistHeaderName">Checklist</p>
                        </div>
                      <div class="ChecklistItemsParent">
                        {{!-- <input type="text" name="ChecklistID" value="${card.idChecklists[0]}" hidden readonly>   --}}
    ${card.CheckListItems.checkItems ? card.CheckListItems.checkItems.map((checkItem, index) => `
        <div class="CheckEachItem">
            <input type="checkbox" id="ChecklistItem${index}" name="ChecklistItemCheck${index}" class="ChecklistItem"
                   onchange="toggleTextDecoration(this, 'checklistItem${index}', '${card._id}')" ${checkItem.State === "Complete" ? `checked` : ''} />
            <input type="text" class="checklistItem${index} checklistItem" ${checkItem.State === "Complete" ? `style="text-decoration: line-through;"` : ''}
                   name="ChecklistItem${index}" value="${checkItem.Name}" placeholder="Checklist Item" readonly>
        </div>
    `).join('') : ''}
</div>

        </div >
        <div class="CardContactSection">
            <div class="ContactHeader">
                <img src="/images/Icons/Contacts.png" alt="" class="cardContactIcon">
                    <p class="cardContactHeaderName">Contact number</p>
            </div>
            <div class="cardContactNumberDiv">
                <input type="text" name="ContactcountrySelect" id="ContactcountrySelect " required readonly value="${card.ContactcountrySelect}"
                    class="CountryCodeselecte">
                    <input type="text" class="ContactNumber" id="ContactNumber" name="ContactNumber" oninput="validateContactNumber()" readonly value="${card.ContactNumber}"
                        placeholder="Contact number" required>
                    </div>
            </div>
            <div class="CardContactSection">
                <div class="ContactHeader">
                    <img src="/images/Icons/WhatsApp.png" alt="" class="cardContactIcon">
                        <p class="cardContactHeaderName">WhatsApp number</p>
                </div>
                <div class="cardWhatsappNumberDiv">
                    <input type="text" name="WhatsAppcountrySelect" id="WhatsAppcountrySelect" required readonly value="${card.WhatsAppcountrySelect}"
                        class="CountryCodeselecte">
                        <input type="text" name="WhatsappNumber" class="WhatsappNumber" id="WhatsappNumber" oninput="validateWhatsapptNumber()" readonly value="${card.WhatsappNumber}"
                            placeholder="Whatsapp number" required>
                        </div>
                        {{!-- < div class="SameAsContactCheckSection">
                        <input type="checkbox" id="IsSameContact" name="IsSameContact">
                            <p class="SameContactText">Same as Contact number</p>
                        </div> --}}
                </div>
                <div class="CardContactSection">
                    <div class="ContactHeader">
                        <img src="/images/Icons/Contacts.png" alt="" class="cardContactIcon">
                            <p class="cardContactHeaderName">Contact number</p>
                    </div>
                    <div class="cardAlternateContactNumberDiv">
                        <input type="text" name="AlternateContactcountrySelect" id="AlternateContactcountrySelect " readonly value="${card.AlternateContactcountrySelect}"
                            class="CountryCodeselecte">
                            <input type="text" class="AltenateContactNumber" id="AlternateContactNumber" oninput="validateAlternateContactNumber" readonly value="${card.AlternateContactNumber}"
                                name="AlternateContactNumber" placeholder="Alternate Contact number">
                            </div>
                    </div>
                    <div class="CardAttachmentSEction">
                        <div class="CardAttachmentHeader">
                            <img src="/images/Icons/Attach.png" alt="" class="cardAttachIcon">
                                <p class="cardContactHeaderName">Attachment</p>
                        </div>
                        <div class="AttachmentImageDiv">
                            <img src="/images/RefImages/${card.FileNo}.jpg" class="AttachmentIMG" alt="">
                        </div>
                    </div>
                    
                    <div class="CardPrintLabelDiv" >
                    </div>
                    <div class="CardSaveBTNSEction">
                        <input type="submit" value="Save card" id="SaveBTN" class="btn SaveBTN">
                            {{!-- <a href="/dispatcher/moveToCustomerCollection/${card._id}" class="btn SaveBTN">Move card to Customer Collection</a> --}}
                    </div>
                </div>
            </form>
            `;

        // Set the HTML content for the popup
        popup.innerHTML = popupContent;

        // Append the popup to the popupWrapper
        var popupWrapper = document.getElementById('popupWrapper');
        popupWrapper.appendChild(popup);

        checkAllCheckboxes(card.id)

        // Display the popup
        // popup.style.display = 'block';
    }

    function closeCardPopup() {
        document.getElementById('popupWrapper').style.display = 'none';
        document.getElementById('overlay').style.display = 'none';
    }

    /*
        document.getElementById('closeButton').addEventListener('click', function () {
                closeCardPopup()
            });

            */
    /*
        document.getElementById('popupWrapper').addEventListener('click', function () {
                closeCardPopup()
            });
            */




    // Remove any non-numeric characters
    function validateContactNumber() {
        const ContactNumber = document.getElementById('ContactNumber');

        ContactNumber.value = ContactNumber.value.replace(/[^0-9]/g, '');
    }



    // Remove any non-numeric characters
    function validateWhatsapptNumber() {
        const WhatsappNumber = document.getElementById('WhatsappNumber');
        WhatsappNumber.value = WhatsappNumber.value.replace(/[^0-9]/g, '');
    }

    // Remove any non-numeric characters
    function validateAlternateContactNumber() {
        const alternateContactInput = document.getElementById('AlternateContactNumber');
        alternateContactInput.value = alternateContactInput.value.replace(/[^0-9]/g, '');
    }



    function ShowInputForCheckList() {


        //   console.log("CheckListCount: ", CheckListCount);


        const cardAddChecklistSection = document.getElementById('CardAddChecklistsection');
        cardAddChecklistSection.removeAttribute('hidden');

        const AddAnItemBTN = document.getElementById('AddAnItemBTN').setAttribute('hidden', true);



    }


    function AddItemToCheckList() {
        const parentDiv = document.querySelector('.ChecklistItemsParent');
        const checklistItems = parentDiv.querySelectorAll('.checklistItem'); // Corrected the selector
        var CheckListCount = checklistItems.length;
        var ListItemElement = document.getElementById('AddCheckListItemINP');
        var ChecklistItem = ListItemElement.value; // Assuming you have an element with this id

        if (ChecklistItem) {



            var CountOfNextItem = parseInt(CheckListCount) + 1;

            // Create a new input element
            var newItem = document.createElement('input');
            newItem.type = 'text';
            newItem.className = 'checklistItem';
            newItem.name = `ChecklistItem${CountOfNextItem}`;
            newItem.value = ChecklistItem;
            newItem.placeholder = 'checklist Item';
            newItem.readOnly = true;

            // Append the new item to the parentDiv
            parentDiv.appendChild(newItem);
            ListItemElement.value = "";
            const cardAddChecklistSection = document.getElementById('CardAddChecklistsection');
            cardAddChecklistSection.setAttribute('hidden', true);
            const AddAnItemBTN = document.getElementById('AddAnItemBTN').removeAttribute('hidden');

        }


    }


    function CloseAddItem() {
        var ListItemElement = document.getElementById('AddCheckListItemINP');
        ListItemElement.value = "";
        const cardAddChecklistSection = document.getElementById('CardAddChecklistsection');
        cardAddChecklistSection.setAttribute('hidden', true);
        const AddAnItemBTN = document.getElementById('AddAnItemBTN').removeAttribute('hidden');
    }


    function toggleTextDecoration(checkbox, inputClassName, cardId) {
        const inputElement = document.querySelector(`input.${inputClassName}`);
        inputElement.style.textDecoration = checkbox.checked ? 'line-through' : 'none';
        const checkboxes = document.querySelectorAll('[type="checkbox"]');
        const allChecked = [...checkboxes].every(checkbox => checkbox.checked);
        const form = document.getElementById('EmployeeCardUpdate');
        const submitButton = document.getElementById('SaveBTN');

        if (allChecked) {
            form.action = `/cardUpdatedReadyforDispatch/${cardId}`;
            submitButton.value = "Save card and Move to Ready to Dispatch";
        } else {
            form.action = `/cardUpdated/${cardId}`;
            submitButton.value = "Save card";
        }
    }


    function checkAllCheckboxes(cardId) {
        const checkboxes = document.querySelectorAll('.ChecklistItem');
        const form = document.getElementById('EmployeeCardUpdate');
        const submitButton = document.getElementById('SaveBTN');
        let allChecked = true;

        checkboxes.forEach(checkbox => {
            if (!checkbox.checked) {
                allChecked = false;
            }
        });

        if (allChecked) {
            form.action = `/cardUpdatedReadyforDispatch/${cardId}`;
            submitButton.value = "Save card and Move to Ready to Dispatch";
        } else {
            form.action = `/cardUpdated/${cardId}`;
            submitButton.value = "Save card";
        }
    }






    //function MoveCardToDriver(CardID) {
    // open POP up for move card to driver

    //}


    /*
    
        const cardAddChecklistSection = document.getElementById('CardAddChecklistsection');
    cardAddChecklistSection.setAttribute('hidden', true);
    
    */


    // Date Popup

    const dateRangeContainer = document.getElementById("dateRangeContainer");

    /* dateRangeContainer.addEventListener("click", openFullScreenPopup);
 
     // add alternative to date popup
     const DateRange = document.getElementById("DateRange");
     DateRange.addEventListener("click", openFullScreenPopup);*/

    dateRangeContainer.addEventListener("click", function (event) {
        if (event.target.id === "DateRange") {
            openFullScreenPopup();
        }
    });


    function openFullScreenPopup() {
        var element = document.getElementById('fullscreen-popup');
        element.style.display = "flex";
    }

    function closeFullscreenPopup() {
        var element = document.getElementById('fullscreen-popup');
        element.style.display = "none";
    }



    function ClearDate() {
        var StartDate = document.getElementById('StartDate');
        var EndDate = document.getElementById('EndDate');
        var DateRange = document.getElementById('DateRange');

        StartDate.value = "";
        EndDate.value = "";
        DateRange.value = "";
        StartDate.max = "";
        EndDate.min = "";
    }

    function HandleStartDate() {
        var startDateInp = document.getElementById('StartDate');
        var endDateInp = document.getElementById('EndDate');
        endDateInp.min = startDateInp.value;
    }

    function HandleEndDate() {
        var startDateInp = document.getElementById('StartDate');
        var endDateInp = document.getElementById('EndDate');
        startDateInp.max = endDateInp.value;
    }

    const startDateInput = document.getElementById('StartDate');
    const endDateInput = document.getElementById('EndDate');

    // When the Start Date changes, update the minimum date for the End Date
    startDateInput.addEventListener('change', () => {
        HandleStartDate()
    });

    // When the End Date changes, update the maximum date for the Start Date
    endDateInput.addEventListener('change', () => {
        HandleEndDate()
    });

    function submitDateRange() {
        var startDateIn = document.getElementById('StartDate').value;
        var endDateIn = document.getElementById('EndDate').value;

        // Check if both start date and end date are selected
        if (startDateIn && endDateIn) {
            // Convert to Date objects
            const startDate = new Date(startDateIn);
            const endDate = new Date(endDateIn);

            // Function to format the date as "day month year" (e.g., "5 July 2023")
            function formatDate(date) {
                const day = date.getDate();
                const month = date.toLocaleString('default', { month: 'long' });
                const year = date.getFullYear();
                return `${day} ${month} ${year}`;
            }

            // Convert to formatted date strings
            const formattedStartDate = formatDate(startDate);
            const formattedEndDate = formatDate(endDate);

            // Output
            // console.log("Formatted Date:", formattedStartDate, " to ", formattedEndDate);

            var FormattedDate = formattedStartDate + " to " + formattedEndDate;

            document.getElementById('DateRange').value = FormattedDate;
            closeFullscreenPopup();
        } else {
            // Handle case when no date is selected
            document.getElementById('DateRange').value = "";
            alert("Select two Dates!")
        }

        handleInputChange();

    }

    function onClearAllForm() {
        document.getElementById('customerName').value = "";
        document.getElementById('colorCode').value = "";
        document.getElementById('colorName').value = "";
        document.getElementById('DateRange').value = "";
        document.getElementById('StartDate').value = "";
        document.getElementById('EndDate').value = "";
    }

    function handleInputChange() {
        const SearchType = document.getElementById('search_type').value;

        if (SearchType === "Internal") {
            doInternalSearch()
        } else {
            doExternalSearch()
        }


        function doInternalSearch() {
            const searchInput = document.getElementById('FormSearch');
            const startDateInput = document.getElementById('StartDate');
            const endDateInput = document.getElementById('EndDate');

            const searchTerm = searchInput.value.toLowerCase();
            const startDate = startDateInput.value;
            const endDate = endDateInput.value;



            const allcards = State.AllCards;

            console.log("Doing Internal Search", allcards);

            // Use the filter method to find matching cards based on search term
            const matchingCards = allcards.filter(card => {
                // Check if the search term exists in the card's name or description
                return (
                    card.name.toLowerCase().includes(searchTerm) ||
                    card.desc.toLowerCase().includes(searchTerm)
                );
            });

            // Filter cards based on the date range
            const results = matchingCards.filter(card => {
                const cardDate = new Date(card.dateLastActivity); // Replace 'date' with the actual date property
                if (startDate && endDate) {
                    const startDateObj = new Date(startDate);
                    const endDateObj = new Date(endDate);
                    return cardDate >= startDateObj && cardDate <= endDateObj;
                }
                return true; // Return true if no date range is specified
            });

            // Update the searchMatchedArray with the matching cards
            searchMatchedArray.length = 0; // Clear the array
            searchMatchedArray.push(...results); // Add matching cards

            // You can now use the searchMatchedArray as needed
            addCardDataToCards(searchMatchedArray);
        }


        function doExternalSearch() {
            const searchInput = document.getElementById('FormSearch');
            const startDateInput = document.getElementById('StartDate');
            const endDateInput = document.getElementById('EndDate');

            const searchTerm = searchInput.value.toLowerCase();
            const startDate = startDateInput.value;
            const endDate = endDateInput.value;



            const allcards = State.AllCardsFromBoard;

            console.log("Doing External Search", allcards);

            // Use the filter method to find matching cards based on search term
            const matchingCards = allcards.filter(card => {
                // Check if the search term exists in the card's name or description
                return (
                    card.name.toLowerCase().includes(searchTerm) ||
                    card.desc.toLowerCase().includes(searchTerm)
                );
            });

            // Filter cards based on the date range
            const results = matchingCards.filter(card => {
                const cardDate = new Date(card.dateLastActivity); // Replace 'date' with the actual date property
                if (startDate && endDate) {
                    const startDateObj = new Date(startDate);
                    const endDateObj = new Date(endDate);
                    return cardDate >= startDateObj && cardDate <= endDateObj;
                }
                return true; // Return true if no date range is specified
            });

            // Update the searchMatchedArray with the matching cards
            searchMatchedArray.length = 0; // Clear the array
            searchMatchedArray.push(...results); // Add matching cards

            // You can now use the searchMatchedArray as needed

            addCardDataToCardsGlobal(searchMatchedArray);
        }

    }

</script>

<style>
    body {
        background-color: #EEF0FD;
    }

    #fullscreen-popup {
        position: fixed;
        top: 0;
        bottom: 0;
        right: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(34, 37, 49, .7);
        z-index: 9999;
        overflow: hidden;
        display: none;
        justify-content: center;
        align-items: center;
    }

    .popupContent {
        width: 40rem;
        height: 18rem;
        background-color: rgb(229, 233, 242);
    }

    .PopHeaderDiv {
        display: flex;
        justify-content: space-between;
        padding-left: 3rem;
        padding-right: 2rem;
    }

    .PopHeader {
        font-size: 25px;
        font-weight: 600;
        margin-top: 2rem;
    }

    .Popclose-button {
        border: none;
        font-size: 30px;
        font-weight: 700;
        background-color: rgb(229, 233, 242);
        color: gray;
    }

    .Popclose-button:hover {
        color: rgb(20, 20, 20);
    }

    .PopUpDatesDiv {
        display: flex;
        justify-content: space-around;
    }

    .PopUpLabel {
        font-size: 20px;
        font-weight: 600;
        margin-top: 1rem;
        margin-left: 2rem;
    }

    #StartDate,
    #EndDate {
        padding: 1rem;
        margin-right: 2rem;
    }

    .PopButtonDiv {
        display: flex;
        justify-content: center;
    }

    .PopButtonDiv button {
        margin: 2rem;
        background-color: #3b3be1;
        padding: 1rem 2rem;
        color: whitesmoke;
        font-size: 20px;
        font-weight: 600;
    }

    .PopButtonDiv button:hover {
        background-color: #2121be;
    }

    .custom-container {
        max-width: 100%;
        /* Adjust this value to your preferred maximum width */
        margin-left: auto;
        margin-right: auto;
        padding-left: 15px;
        /* Add padding to match Bootstrap's container padding */
        padding-right: 15px;
        /* Add padding to match Bootstrap's container padding */
        box-sizing: border-box;
        /* Include padding and border in the width */
    }

    .MainSection {
        padding: 2rem 0;
    }

    .OfficeEndSection {
        display: flex;
        justify-content: end;
        padding-right: 2rem;
    }

    .OfficeLogoutAtag {
        text-decoration: none !important;
    }

    .OfficeLogoutDiv {
        background-color: #2d2d2d;
        width: 19rem;
        height: 5rem;
        border-radius: 2rem;
        padding: 1rem 2rem;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .officeLogoutImg {
        width: 50px;
        margin-right: 2rem;
    }

    .OfficeLogoutText {
        margin: 0;
        color: white;
        text-decoration: none;
        font-size: 33px;
        font-weight: 600;
    }

    .OfficeWelcomeDivHeader {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 2rem 0;
    }

    .mainInner {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .OfficeWelcomeText {
        font-size: 30px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .SearchFormDiv {
        width: 80%;
    }

    .SalesWelcomeText {
        font-size: 30px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .SearchTypesection {
        width: 100%;
        display: flex;
        justify-content: end;
        align-items: center;
    }

    .SearchTypeDiv {
        display: flex;
        flex-direction: column;
        justify-content: start;
        align-items: start;
        padding: 2rem 0;
    }

    .SearchTypeLabel {
        margin: 0;
    }

    .search_type {
        padding: 0.5rem 1rem;
        border-radius: 10px;
    }

    .SearchMainInpSection {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .searchInput {
        width: 50vw;
    }

    .DateInputS {
        width: 25vw;
    }


    .SearchInP {
        padding-right: 3rem;
        background-image: url(/images/Icons/Search_icon.svg);
        background-position: right 0.5rem center;
        background-repeat: no-repeat;
        background-size: 1.5rem;
        width: 100%;
    }

    .autocomplete-input {
        border: 1px solid lightgray;
        border-left-color: blue;
        border-left-width: 5px;
        padding-left: 15px;
        font-size: 20px;
        font-weight: 600;
        border-radius: 14px;
        height: 3rem;
    }

    .EachCard {
        /* width: 30rem;*/
        min-height: 8rem;
        background-color: white;
        border: 1px solid gray;
        border-radius: 25px;
        margin: 1rem;
        max-width: 550px;
    }

    .cardNamesection {
        display: flex;
        justify-content: space-between;
        align-items: start;
        padding: 2rem 1rem;
    }

    .Cardname {
        font-size: 25px;
        font-weight: 700;
    }

    .CardEditIcon {
        width: 35px;
        cursor: pointer;
    }

    .CardEditIcon:hover {
        width: 40px;
    }

    .cardImagesection {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1rem;
    }

    .cardImg {
        height: 13rem;
    }

    /*Pop up screen*/

    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: none;
        /*none*/
        z-index: 1;
    }

    #popupWrapper {
        display: none;
        /*none*/
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 2;
    }

    #popup {
        background: #EEF0FD;
        width: 80%;
        padding: 20px;
        border-radius: 10px;
        position: relative;
        max-height: 80vh;
        overflow-y: auto;
    }

    .CloseBTNsection {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2rem;
        padding: 0 3rem;
        width: 100%;
        margin-right: 2rem;
    }

    .CardTitle {
        margin: 0;
        font-size: 35px;
        font-weight: 800;
    }

    #closeButton {
        font-weight: 900;
        font-size: 20px;
        cursor: pointer;
    }

    #popupContent {
        /* Your content styles */
        padding-top: 3rem;
    }


    .CardNameSection {
        display: flex;
        justify-content: start;
        margin: 1rem 2rem;
        align-items: center;
    }

    .CardnameIcon,
    .cardDescriptionIcon,
    .cardCheckliseIcon,
    .cardContactIcon,
    .cardAttachIcon {
        height: 30px;
        background-color: inherit;
    }


    .CardCustomerName,
    .CardNameStatic,
    .CardDescriptionHeadername,
    .cardChecklistHeaderName,
    .cardContactHeaderName {
        font-size: 25px;
        font-weight: 600;
        margin: 0;
        margin-left: 0.5rem;
    }

    .CardCustomerName {
        border-radius: 5px;
        border-color: gray;
        padding: 0.5rem 1rem;
        width: 50%;
    }

    .CardDiscriptionSection,
    .CardChecklistSection,
    .CardContactSection,
    .CardAttachmentSEction {
        display: flex;
        flex-direction: column;
        margin: 2rem 2rem;
    }

    .CardDiscriptionHeader,
    .CardChecklistSectionHeader,
    .ContactHeader,
    .CardAttachmentHeader {
        display: flex;
        margin-bottom: 1rem;
    }

    .CardDescription {
        width: 100%;
        height: 150px;
        /* Adjust the height as needed */
        padding: 10px;
        /*border: 1px solid #ccc;
        border-radius: 5px;*/
        resize: vertical;
        /* Allows vertical resizing */
        font-size: 16px;
        border: none;
        outline: none;
        background-color: #EEF0FD;
    }

    .ChecklistItemsParent {
        display: flex;
        flex-direction: column;
    }

    .checklistItem {
        border: none;
        width: 80%;
        outline: none;
        font-size: 25px;
        font-size: 600;
        margin-left: 0.5rem;
        background-color: #EEF0FD;
    }

    .AddAnItemBTN {
        margin-top: 2rem;
        padding: 1rem 2rem;
        width: 12rem;
        border: none;
        border-radius: 20px;
        background-color: #3B3BE1;
        color: white;
        font-size: 22px;
        font-weight: 600;
        margin-left: 3rem;
    }

    .AddCheckListItemINP {
        border: 1px solid gray;
        border-radius: 5px;
        padding: 1rem;
        margin-left: 2rem;
        width: 80%;
        margin-top: 2rem;
    }

    .AddChecklistBTns {
        margin-left: 2rem;
    }

    .SaveChecklistBTN,
    .CancelCheklistBTN {
        padding: 1rem 2rem;
        border: none;
        border-radius: 20px;
        background-color: #3B3BE1;
        color: white;
        font-size: 22px;
        font-weight: 600;
        outline: none;
        margin: 1rem;
    }

    .CancelCheklistBTN {
        background-color: transparent;
        color: black;
        border: 1px solid gray;
    }

    .CountryCodeselecte,
    .ContactNumber,
    .WhatsappNumber,
    .AltenateContactNumber,
    .SelectProPeople {
        width: 7rem;
        padding: 1rem 1rem;
        font-size: 25px;
        font-weight: 600;
        border-radius: 5px;
    }

    .ContactNumber,
    .WhatsappNumber,
    .AltenateContactNumber,
    .SelectProPeople {
        min-width: 20rem;
    }

    .cardWhatsappNumberDiv,
    .cardContactNumberDiv,
    .cardAlternateContactNumberDiv {
        margin: 0 2rem;
    }

    .SameAsContactCheckSection {
        display: flex;
        justify-content: start;
        align-items: center;
        margin-top: 1rem;
    }

    #IsSameContact {
        margin-right: 0.5rem;
        border: 2px solid gray;
    }

    input[type="checkbox"] {
        width: 20px;
        height: 20px;
    }

    .SameContactText {
        margin: 0;
        font-size: 20px;
        font-weight: 600;
    }

    .AttachmentImageDiv {
        width: 100%;
        height: 400px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: auto;
        border: 1px solid gray;
        border-radius: 25px;
    }

    .AttachmentIMG {
        height: 300px;
    }

    .CardSaveBTNSEction {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        padding-bottom: 5rem;
    }

    .SaveBTN {
        margin-top: 2rem;
        padding: 1rem 2rem;
        width: 35rem;
        border: none;
        border-radius: 20px;
        background-color: #3B3BE1;
        color: white;
        font-size: 22px;
        font-weight: 600;
        margin-left: 3rem;
    }

    .SaveBTN:hover {
        font-weight: 700;
        color: wheat;
    }

    .NoOrders {
        width: 100%;
        height: 5rem;
        display: flex;
        justify-content: center;
        align-items: center;
        /* border: 1px solid gray;*/
        border-radius: 25px;
        color: red;
        font-size: 30px;
        font-weight: 600;
        padding-bottom: 5rem;
    }

    .CardPrintLabelDiv {
        padding-left: 32px;
    }

    .PrintBtn {
        background-color: #EEF0FD;
        border: 1px solid gray;
        border-radius: 24px;
        width: 16rem;
        margin: 1rem 2rem;
        font-size: 25px;
        font-weight: 600;
        padding: 1rem 0;
    }

    .PrintBtn:hover {
        background-color: #c1c9ff;
    }

    .cardActionBTNSEction {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding-bottom: 3rem;
    }

    .ActionCardBtn {
        padding: 0.5rem 1rem;
        width: 27rem;
        border: none;
        border-radius: 20px;
        background-color: #3B3BE1;
        color: white;
        font-size: 22px;
        font-weight: 600;
        margin-top: 1rem;

    }

    .ActionCardBtn:hover {
        color: rgb(224, 224, 241);
    }

    .ViewCardBtn {
        background-color: #EEF0FD;
        padding: 0.5rem 1rem;
        width: 15rem;
        border-radius: 20px;
        color: black;
        font-size: 22px;
        font-weight: 600;
        margin: 1rem 0;
    }

    .CheckEachItem {
        display: flex;
        align-items: center;
        padding-left: 3rem;
    }
</style>