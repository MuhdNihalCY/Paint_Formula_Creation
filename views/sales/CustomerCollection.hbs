<section>
    <div id="loader-container">
        {{!-- <div class="loader"></div> --}}
        <div class="loader">
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
        </div>
    </div>

    <div id="EachCustomerDetailsPopUp" class="EachCustomerDetailsPopUp">
        <div class="Popup EachCustPopup">
            <div class="MainPopupTopsection">
                <img onclick="ClosePopupForEachCustomer()" class="MainPopupCloseIcon" src="/images/Icons/x.png" alt="">
            </div>
            <div class="PopCustomerName">
                <p id="popCustNameText" class="popCustNameText"></p>
            </div>
            <div class="popupEachCustMainSec">
                <div class="popUpEachCustLeftSec">
                    <div class="PopCustAddressSec">
                        <p class="PopAddressText">Address</p>
                        <p id="PopCustomerAddressContent" class="PopontentText"></p>
                    </div>
                    <div class="PopCustAddressSec">
                        <p class="PopAddressText">Location</p>
                        <p id="PopCustomerLocationContent" class="PopontentText"></p>
                    </div>
                </div>
                <div class="popUpEachCustRightSec">
                    <div class="PopCustAddressSec">
                        <p class="PopAddressText">Sales.Ex</p>
                        <p id="PopCustomerSalesExContent" class="PopontentText"></p>
                    </div>
                    <div class="PopCustAddressSec">
                        <p class="PopAddressText">Co-Ordinator</p>
                        <p id="PopCustomerCoOrdinatorContent" class="PopontentText"></p>
                    </div>
                </div>
            </div>
            <hr>
            <div class="PopCustomerMainActionBTnSec">
                <button class="PurchasePaymentAnalysisBTN ActiveActionBTN"
                    onclick="ShowPurchasePaymentAnalysis()">Purchase payment analysis</button>
                <button class="PurchaseDetailsBTN" onclick="ShowPurchaseDetails()">Purchase details</button>
                <button class="FollowUpSummeryBTN" onclick="ShowFollowUpSummery()">Follow-up summery</button>
            </div>

            <div id="PurchasePaymentAnalysisDiv" class="PurchasePaymentAnalysisDiv">
                <div class="PurchaseSubButtonsDiv">
                    <button onclick="ShowAccountStatement()" id="AccontStatementBtn"
                        class="PusrchaseSubButton ">Statement of accounts</button>
                    <button onclick="ShowLedgerDetails()" id="LedgerBtn" class="PusrchaseSubButton ">Ledger</button>
                    <button onclick="ShowCustomerPurchaseDetail()" id="PurchaseBtn"
                        class="PusrchaseSubButton  ">Customer purchase
                        details</button>
                </div>
                <div class="AccountStatements" id="AccountStatements">
                    <div class="LineGraph">
                        <div id="myChart" style="width:100%; height:500px;"></div>
                    </div>
                    <div class="BraGraph">
                        <div id="columnchart_material" style="width: 100%; height: 500px;"></div>
                    </div>
                </div>
                <div id="LedgerDetails" class="LedgerDetails">
                    <hr>
                    <div id="ledgerCollections" class="ledgerCollections">
                    </div>
                </div>
                <div class="CustomerPurchaseDetails" id="CustomerPurchaseDetails">
                    <div class="PurchaseDetailsSearchSection">
                        <input type="search" placeholder="Search.." name="search" class="PurchaseSearchInput"
                            id="PurchaseSearchInput" />
                    </div>
                    <div class="PurchaseTableDiv">
                        <div class="PurchaseTableHeader PurchaseTableFormat">
                            <p>Date</p>
                            <p>Vch no</p>
                            <p>Po no</p>
                            <p>Items</p>
                            <p>Qty</p>
                            <p>Price</p>
                            <p>Amount</p>
                            <p>Vch type</p>
                            <p>Debit</p>
                            <p>Credit</p>
                            <p>Balance</p>
                        </div>
                        <div id="PurchaseTableBodyDiv" class="PurchaseTableBodyDiv">

                        </div>
                    </div>
                </div>
            </div>

            <div id="purchaseDetailsDiv" class="purchaseDetailsDiv">
                <div class="PurchaseSubButtonsDiv">
                    <button onclick="ShowProductPurchaseDetails()" id="ProductPurchaseBtn"
                        class="PusrchaseSubButton ">Products</button>
                    <button onclick="ShowBinderPurchaseDetails()" id="BinderPurchaseBtn"
                        class="PusrchaseSubButton ">Binders</button>
                    <button onclick="ShowAdditivesPurchaseDetail()" id="AddtivesPurchaseBtn"
                        class="PusrchaseSubButton  ">Additives</button>
                </div>

                <div class="ProductPurchaseDetails" id="ProductPurchaseDetails">
                    <div class="PurchaseDetailsSearchSection">
                        <input type="search" placeholder="Search.." name="search" class="PurchaseSearchInput"
                            id="ProductReportDataPurchaseSearch" />
                    </div>
                    <div class="PurchaseTableDiv">
                        <div class="PurchaseTableHeader ProductPurchaseTableFormat">
                            <p>Group</p>
                            <p>Inventory</p>
                            <script>
                                // JavaScript code to print past 12 months including the current month in reverse order
                                var months = [
                                    "January", "February", "March", "April", "May", "June",
                                    "July", "August", "September", "October", "November", "December"
                                ];


                                // Get the current date
                                const currentDate = new Date();

                                // Create an array of the past 12 months starting from the current month
                                const past12Months = Array.from({ length: 12 }, (_, index) => {
                                    const monthIndex = (currentDate.getMonth() - index + 12) % 12;
                                    return months[monthIndex].substring(0, 3); // Use substring(0, 3) to get the first 3 letters
                                });

                                //                                console.log("past12Months: ", past12Months);

                                for (var i = 0; i <= 11; i++) {  // Start from the last month and iterate in reverse
                                    // Print the month
                                    document.write("<p>" + past12Months[i] + "</p>");
                                }
                            </script>
                            <p>Total</p>
                            <p>Last year total</p>
                        </div>
                        <div id="PurchaseProductTableBodyDiv" class="PurchaseReportTableProducts">

                        </div>
                    </div>


                </div>

                <div class="BinderPurchaseDetails" id="BinderPurchaseDetails">
                    <div class="PurchaseDetailsSearchSection">
                        <input type="search" placeholder="Search.." name="search" class="PurchaseSearchInput"
                            id="BinderReportDataPurchaseSearch" />
                    </div>
                    <div class="PurchaseTableDiv">
                        <div class="PurchaseTableHeader ProductPurchaseTableFormat ProductGroupPurchaseTableFormat">
                            <p>Binder</p>
                            <script>


                                for (var i = 0; i <= 11; i++) {  // Start from the last month and iterate in reverse
                                    // Print the month
                                    document.write("<p>" + past12Months[i] + "</p>");
                                }
                            </script>

                            <p>Total</p>
                            <p>Last year total</p>
                        </div>
                        <div id="BinderPurchaseReportDataBodyDiv" class="PurchaseReportTableBinders">

                        </div>
                    </div>
                </div>

                <div class="AdditivesPurchaseDetails" id="AdditivesPurchaseDetails">
                    <div class="PurchaseDetailsSearchSection">
                        <input type="search" placeholder="Search.." name="search" class="PurchaseSearchInput"
                            id="AdditveReportDataPurchaseSearch" />
                    </div>
                    <div class="PurchaseTableDiv">
                        <div class="PurchaseTableHeader ProductPurchaseTableFormat ProductGroupPurchaseTableFormat">
                            <p>Binder</p>
                            <script>


                                for (var i = 0; i <= 11; i++) {  // Start from the last month and iterate in reverse
                                    // Print the month
                                    document.write("<p>" + past12Months[i] + "</p>");
                                }
                            </script>

                            <p>Total</p>
                            <p>Last year total</p>
                        </div>
                        <div id="PurchaseAdditiveReportDataBodyDiv" class="PurchaseReportTableAdditives">

                        </div>
                    </div>
                </div>

            </div>

            <div id="FollowUpSummeryDiv" class="FollowUpSummeryDiv">
                <div class="PurchaseDetailsSearchSection">
                    <input type="search" placeholder="Search.." name="search" class="PurchaseSearchInput"
                        id="FollowUpSearch" />
                </div>
                <div id="FollowUpsCollections" class="FollowUpsCollections">

                </div>
            </div>

        </div>
    </div>
    </div>

    <div class="UploadLedgerDataPopUp" id="UploadLedgerDataPopUp">
        <div class=" popup UpLedPopUp">
            <div class="MainPopupTopsection">
                <img onclick="ClosePopupForUploadLedger()" class="MainPopupCloseIcon" src="/images/Icons/x.png" alt="">
            </div>
            <div class="CreateCustomerHeaderDiv">
                <p class="popCardHeaderText">Upload Ledger Data</p>
            </div>
            <form autocomplete="off" action="/sales/uploadLedgerData" method="post" enctype="multipart/form-data">
                <div class="CCMainSection UpnameSection">
                    <div class="CCNameSection UpnameSection">
                        <p class="ccNameText">Customer Name</p>
                        <input type="text" id="CustomerNameUpload" name="CustomerName" placeholder="Enter name here"
                            class="CCInputname UpLedInputname " oninput="CustomerNameSuggestions()" required>

                        <div class="customer-suggestions-container">
                            <datalist id="customerNames">
                                <!-- Add options dynamically using JavaScript -->
                            </datalist>
                        </div>

                    </div>
                </div>
                <div class="CCMainSection UpnameSection">
                    <p class="ccNameText" for="excelFile">Select an Excel file (.xlsx only):</p>
                    {{!-- <p class="LedgerConditions"> </p> --}}
                    <input type="file" name="excelFile" id="excelFile" class="CCInputname UpLedInputname" accept=".xlsx"
                        required>
                </div>
                <div class="popSaveBtnSection">
                    <input class="UpLedBTNupload" type="submit" value="Upload">
                </div>
            </form>
        </div>
    </div>

    <div id="CustomerCreationPopup" class="CustomerCreationPopup">
        <div id="" class="popup CCPopup">
            <div class="MainPopupTopsection">
                <img onclick="CloseCustomerCreationPopup()" class="MainPopupCloseIcon" src="/images/Icons/x.png" alt="">
            </div>
            <div class="CreateCustomerHeaderDiv">
                <p class="popCardHeaderText">Create Customer</p>
            </div>
            <div class="CCMainSection">
                <div class="CCFirstLeft">
                    <div class="CCNameSection">
                        <p class="ccNameText">Customer Name</p>
                        <input type="text" id="CustomerName" placeholder="Enter name here" class="CCInputname">
                    </div>

                    <div class="CCAddressSection">
                        <p class="ccAdressText">Address</p>
                        <textarea name="" id="CCAddressInput" placeholder="Address here" class="CCAddressInput"
                            rows="10"></textarea>
                    </div>

                    <div class="CCLocationSection">
                        <p class="ccLocationText">Location</p>
                        <input type="text" id="ccLocation" placeholder="Enter Location here" class="CCInputLocations">
                    </div>

                </div>

                <div class="CcFirstRight">
                    <div class="CcSalesEXSection">
                        <p class="ccNameText">Sales Ex.</p>
                        <input type="text" id="CCSalesEx" name="CCSalesEx" class="CCSalesEx">
                    </div>
                    <div class="CcSalesEXSection">
                        <p class="ccNameText">Co-ordinator</p>
                        <input type="text" id="CCCo-ordinator" name="CCCo-ordinator" class="CCCo-ordinator">
                    </div>
                </div>
            </div>

            <hr class="ccHR">
            <div class="CCContactPeronSection">
                <div class="CreateCustomerHeaderDiv">
                    <p class="popCardHeaderText">Contact Person</p>
                </div>
                <div id="CCContactCollections" class="CCContactCollections">
                    <div class="ccEachContact">
                        <div class="ccContactNameSection">
                            <p class="ccContactNameText">Name</p>
                            <input type="text" id="ccContactPersonNameInput1" class="ccContactPersonNameInput"
                                placeholder="Name of contact Person" name="ccContactPersonNameInput1">
                        </div>
                        <div class="CCnumberSection">
                            <div class="ccContactNumberSection">
                                <img src="/images/Icons/Call.png" class="CallIcon" alt="">
                                <select name="ccContactPersonCounrtryCodeInput1"
                                    class="ccContactPersonCounrtryCodeInput" id="ccContactPersonCounrtryCodeInput1">
                                    <option value="+971">+971</option>
                                    <option value="+966">+966</option>
                                    <option value="+91">+91</option>
                                    <option value="+98">+98</option>
                                    <option value="+86">+86</option>
                                    <option value="+81">+81</option>
                                    <option value="+7">+7</option>
                                    <option value="+60">+60</option>
                                    <option value="+65">+65</option>
                                    <option value="+92">+92</option>
                                    <option value="+880">+880</option>
                                    <option value="+62">+62</option>
                                    <option value="+1">+1</option>
                                    <option value="+27">+27</option>
                                    <option value="+30">+30</option>
                                    <option value="+31">+31</option>
                                    <option value="+32">+32</option>
                                    <option value="+33">+33</option>
                                    <option value="+34">+34</option>
                                    <option value="+351">+351</option>
                                    <option value="+358">+358</option>
                                    <option value="+39">+39</option>
                                    <option value="+40">+40</option>
                                    <option value="+41">+41</option>
                                    <option value="+420">+420</option>
                                    <option value="+43">+43</option>
                                    <option value="+44">+44</option>
                                    <option value="+45">+45</option>
                                    <option value="+46">+46</option>
                                    <option value="+47">+47</option>
                                    <option value="+48">+48</option>
                                    <option value="+49">+49</option>
                                    <option value="+51">+51</option>
                                    <option value="+52">+52</option>
                                    <option value="+53">+53</option>
                                    <option value="+54">+54</option>
                                    <option value="+55">+55</option>
                                    <option value="+56">+56</option>
                                    <option value="+57">+57</option>
                                    <option value="+58">+58</option>
                                    <option value="+61">+61</option>
                                    <option value="+64">+64</option>
                                    <option value="+66">+66</option>
                                    <option value="+673">+673</option>
                                    <option value="+82">+82</option>
                                    <option value="+84">+84</option>
                                    <option value="+90">+90</option>
                                    <option value="+93">+93</option>
                                    <option value="+94">+94</option>
                                    <option value="+95">+95</option>
                                </select>
                                <input type="text" id="ccContactPersonNumberInput1" class="ccContactPersonNumberInput"
                                    placeholder="Contact number" oninput="validateInput(this)"
                                    name="ccContactPersonNumberInput1">
                            </div>
                            <div class="ccContactNumberSection">
                                <img src="/images/Icons/WhatsApp_out.png" class="CallIcon" alt="">
                                <select name="ccContactPersonWhatsAppCounrtryCodeInput1"
                                    class="ccContactPersonWhatsAppCounrtryCodeInput"
                                    id="ccContactPersonWhatsAppCounrtryCodeInput1">
                                    <option value="+971">+971</option>
                                    <option value="+966">+966</option>
                                    <option value="+91">+91</option>
                                    <option value="+98">+98</option>
                                    <option value="+86">+86</option>
                                    <option value="+81">+81</option>
                                    <option value="+7">+7</option>
                                    <option value="+60">+60</option>
                                    <option value="+65">+65</option>
                                    <option value="+92">+92</option>
                                    <option value="+880">+880</option>
                                    <option value="+62">+62</option>
                                    <option value="+1">+1</option>
                                    <option value="+27">+27</option>
                                    <option value="+30">+30</option>
                                    <option value="+31">+31</option>
                                    <option value="+32">+32</option>
                                    <option value="+33">+33</option>
                                    <option value="+34">+34</option>
                                    <option value="+351">+351</option>
                                    <option value="+358">+358</option>
                                    <option value="+39">+39</option>
                                    <option value="+40">+40</option>
                                    <option value="+41">+41</option>
                                    <option value="+420">+420</option>
                                    <option value="+43">+43</option>
                                    <option value="+44">+44</option>
                                    <option value="+45">+45</option>
                                    <option value="+46">+46</option>
                                    <option value="+47">+47</option>
                                    <option value="+48">+48</option>
                                    <option value="+49">+49</option>
                                    <option value="+51">+51</option>
                                    <option value="+52">+52</option>
                                    <option value="+53">+53</option>
                                    <option value="+54">+54</option>
                                    <option value="+55">+55</option>
                                    <option value="+56">+56</option>
                                    <option value="+57">+57</option>
                                    <option value="+58">+58</option>
                                    <option value="+61">+61</option>
                                    <option value="+64">+64</option>
                                    <option value="+66">+66</option>
                                    <option value="+673">+673</option>
                                    <option value="+82">+82</option>
                                    <option value="+84">+84</option>
                                    <option value="+90">+90</option>
                                    <option value="+93">+93</option>
                                    <option value="+94">+94</option>
                                    <option value="+95">+95</option>
                                </select>
                                <input type="text" id="ccContactPersonWhatsappNumberInput1"
                                    oninput="validateInput(this)" class="ccContactPersonWhatsappNumberInput"
                                    placeholder="Contact WhatsApp number" name="ccContactPersonWhatsappNumberInput1">
                            </div>
                        </div>
                    </div>
                </div>

                <div onclick="ccAddNewContact()" class="ccAddNewContact">
                    <div class="CCAddnewcontactBtn">
                        <p>+</p>
                    </div>
                    <p class="CcAddNewContactText">Add more contact</p>
                </div>

                <div class="popSaveBtnSection">
                    <button onclick="SaveCustomerDetails()">Save card</button>
                </div>

            </div>
        </div>
    </div>

    <div id="overlay"></div>


    <div class="CustomerMainDiv">
        <div class="custom-container">
            <div class="CustomerHeaderDiv">
                <h2 class="CustomersTitle">Customers</h2>
                <div class="CustomerActionBTNSection">
                    <div>
                        <button class="addCustomerButton" onclick="OpenPopupForUploadLedger()" id="addCustomerButton">
                            <span>
                                <svg xmlns="http://www.w3.org/2000/svg" width="34" height="34" viewBox="0 0 34 34"
                                    fill="none">
                                    <path
                                        d="M16.5833 10.75V22.4167M10.75 16.5833H22.4167M31.1667 16.5833C31.1667 24.6375 24.6375 31.1667 16.5833 31.1667C8.52918 31.1667 2 24.6375 2 16.5833C2 8.52918 8.52918 2 16.5833 2C24.6375 2 31.1667 8.52918 31.1667 16.5833Z"
                                        stroke="#B3B7BA" stroke-width="4" stroke-linecap="round"
                                        stroke-linejoin="round" />
                                </svg>
                                Add Ledger Data
                            </span>
                        </button>
                    </div>
                    <div>
                        <button class="addCustomerButton" onclick="OpenCustomerCreationPopup()" id="addCustomerButton">
                            <span>
                                <svg xmlns="http://www.w3.org/2000/svg" width="34" height="34" viewBox="0 0 34 34"
                                    fill="none">
                                    <path
                                        d="M16.5833 10.75V22.4167M10.75 16.5833H22.4167M31.1667 16.5833C31.1667 24.6375 24.6375 31.1667 16.5833 31.1667C8.52918 31.1667 2 24.6375 2 16.5833C2 8.52918 8.52918 2 16.5833 2C24.6375 2 31.1667 8.52918 31.1667 16.5833Z"
                                        stroke="#B3B7BA" stroke-width="4" stroke-linecap="round"
                                        stroke-linejoin="round" />
                                </svg>
                                Add new customer
                            </span>
                        </button>
                    </div>
                </div>
            </div>
            {{!-- Header Ends --}}

            {{!-- cards Area --}}
            <div class="CustomerCardsArea">
                <div class="OneCard">
                    <div class="OneCardIcon">
                        <svg xmlns="http://www.w3.org/2000/svg" class="custom-svg" viewBox="0 0 38 33" fill="none">
                            <path
                                d="M25.8 2.79794C28.3189 4.05407 30.05 6.66241 30.05 9.67647C30.05 12.6905 28.3189 15.2989 25.8 16.555M29.2 25.4838C31.7695 26.6506 34.0833 28.552 36 31M2 31C5.30903 26.7738 9.80161 24.1765 14.75 24.1765C19.6984 24.1765 24.191 26.7738 27.5 31M22.4 9.67647C22.4 13.9161 18.975 17.3529 14.75 17.3529C10.525 17.3529 7.1 13.9161 7.1 9.67647C7.1 5.43687 10.525 2 14.75 2C18.975 2 22.4 5.43687 22.4 9.67647Z"
                                stroke="#B3B7BA" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </div>
                    <div class="OneCardHeader">
                        <p class="OneCardHeaderText">Total Customers</p>
                    </div>
                    <div class="OneCardCount">
                        <p id="TotalCustomersCount" class="OneCardContText">0</p>
                    </div>
                </div>
                <div class="OneCard">
                    <div class="OneCardIcon">
                        <svg xmlns="http://www.w3.org/2000/svg" class="custom-svg" viewBox="0 0 42 38" fill="none">
                            <path
                                d="M28.6 30.3333L32.4 34.1111L40 26.5556M21 24.6667H13.4C9.85884 24.6667 8.08827 24.6667 6.69161 25.2418C4.82939 26.0086 3.34987 27.4795 2.57852 29.3308C2 30.7193 2 32.4796 2 36M27.65 2.54921C30.4352 3.67005 32.4 6.3847 32.4 9.55556C32.4 12.7264 30.4352 15.4411 27.65 16.5619M23.85 9.55556C23.85 13.7284 20.4474 17.1111 16.25 17.1111C12.0526 17.1111 8.65 13.7284 8.65 9.55556C8.65 5.38274 12.0526 2 16.25 2C20.4474 2 23.85 5.38274 23.85 9.55556Z"
                                stroke="#B3B7BA" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </div>
                    <div class="OneCardHeader">
                        <p class="OneCardHeaderText">Orders</p>
                    </div>
                    <div class="OneCardCount">
                        <p id="OrderCountText" class="OneCardContText">0</p>
                    </div>
                </div>
            </div>
            {{!-- Cards ends here --}}

            {{!-- Main Table Starts --}}
            <div class="MainTableDivArea">
                <div class="MainTableHeaderDiv">
                    <div class="searchDiv">
                        <input type="search" class="search-input" id="searchInput" placeholder="Search...">
                        <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                            viewBox="0 0 24 24" fill="none" stroke="#DADADA" stroke-width="2" stroke-linecap="round"
                            stroke-linejoin="round">
                            <circle cx="11" cy="11" r="8"></circle>
                            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                        </svg>
                    </div>
                    <div class="sortBySection">
                        <p>sort by</p>
                        <select name="" id="sortSelect" onchange="sortTable()">
                            <option selected disabled value="">Select a sort option</option>
                            <option value="0">Customer Name</option>
                            <option value="1">Location</option>
                        </select>
                    </div>
                </div>
                <div class="TableSecion">
                    <table id="CuTable">
                        <thead>
                            <tr>
                                <th>Customer</th>
                                <th>Locations</th>
                                <th>Address</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Data will be populated dynamically after page load -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>

<script>

    var State = {
        Customers: [],
        AllOrders: [],
        AllCustomerNames: []
    }
    // Add an event listener for the DOMContentLoaded event
    document.addEventListener('DOMContentLoaded', function () {
        // The page has finished loading, you can now make your AJAX call here
        showLoader();
        getAllOrders();

    });

    // Function to show the loader
    function showLoader() {
        document.getElementById('loader-container').style.display = 'flex';
    }

    // Function to hide the loader
    function hideLoader() {
        document.getElementById('loader-container').style.display = 'none';
    }


    function callAllCustomersData() {
        fetch('/sales/GetAllCustomersAndFollowUp/api')
            .then(response => response.json())
            .then(data => {
                console.log('Data from the server:', data);
                State.Customers
                OrganizeData(data);
                // Handle the response data as needed
            })
            .catch(error => console.error('Error:', error));
    }

    function getAllOrders() {
        fetch('/sales/getallorders/api')
            .then(response => response.json())
            .then(data => {
                console.log("Order Data", data)
                State.AllOrders = data;
                callAllCustomersData();
            }).catch(err => console.log(err));
    }

    async function OrganizeData(data) {
        // Create an array to store the result
        const result = [];

        // Iterate over each customer in AllCustomer
        data.AllCustomer.forEach(customer => {
            // Create an object for each customer
            const customerObj = {
                ...customer,
                FollowUps: []
            };

            // Iterate over each follow-up in AllFollowUP
            data.AllFollowUP.forEach(followUp => {
                // Check if the follow-up matches the customer
                if (followUp.Customer_Name === customer.Customername) {
                    // Push the matching follow-up to the FollowUps array
                    customerObj.FollowUps.push(followUp);
                }
            });

            // Push the customer object to the result array
            result.push(customerObj);
        });

        // Log the final result
        console.log(result);
        State.Customers = result;
        console.log("All Customers: ", State.Customers);


        populateTable();
    }


    function populateTable(MatchedCustomer) {
        var Customers;
        if (MatchedCustomer) {
            Customers = MatchedCustomer;
        } else {
            Customers = State.Customers;
        }

        var table = document.getElementById("CuTable");
        var tbody = table.getElementsByTagName('tbody')[0];

        // Clear existing rows
        tbody.innerHTML = "";

        // Populate the table with all data
        Customers.forEach(customer => {
            var row = tbody.insertRow(-1);

            // Map the keys to the corresponding column headers
            var columnHeaders = ['Customername', 'Loaction', 'Address'];
            columnHeaders.forEach((header, index) => {
                var cell = row.insertCell(index);
                cell.textContent = customer[header];

                // Add click event to each row
                // Add onclick attribute to each row
                row.setAttribute('onclick', `OpenEachCustomerPanel('${customer.Customername}','${customer.Loaction}')`);
            });
        });

        // total Customers
        document.getElementById('TotalCustomersCount').textContent = Customers.length;
        var AllOrders = State.AllOrders
        console.log("AllOrders: ", AllOrders);
        document.getElementById('OrderCountText').textContent = AllOrders.length;


        sortTable();
    }




    // Sort function
    function sortTable() {
        var n = document.getElementById("sortSelect").value;
        if (n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("CuTable");
            switching = true;
            dir = "asc";
            while (switching) {
                switching = false;
                rows = table.rows;
                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    if (dir === "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir === "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount === 0 && dir === "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
        hideLoader()
    }

    // Search input listener
    document.getElementById("searchInput").addEventListener("input", function () {
        var input, filter, matchedData, i, j, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        matchedData = [];
        var data = State.Customers;

        // Check each customer for a match
        for (i = 0; i < data.length; i++) {
            var customer = data[i];
            var isMatch = false;

            // Check each property of the customer for a match
            for (var key in customer) {
                if (customer.hasOwnProperty(key)) {
                    txtValue = customer[key].toString().toUpperCase();
                    if (txtValue.indexOf(filter) > -1) {
                        // If any property of the customer matches, set isMatch to true
                        isMatch = true;
                        break; // Break the inner loop, no need to check other properties
                    }
                }
            }

            // If any property of the customer matches, add it to the matchedData array
            if (isMatch) {
                matchedData.push(customer);
                console.log("matchedData")
            }
            console.log("matchData")
            console.log(matchedData);
        }

        // Update the table with the matched data
        populateTable(matchedData);
    });


    // customer Creation
    function CloseCustomerCreationPopup() {
        var CustomerCreationPopup = document.getElementById('CustomerCreationPopup');
        CustomerCreationPopup.style.display = "none";
    }

    function OpenCustomerCreationPopup() {
        var CustomerCreationPopup = document.getElementById('CustomerCreationPopup');
        CustomerCreationPopup.style.display = "flex";
    }

    function validateInput(input) {
        // Remove non-numeric characters using a regular expression
        input.value = input.value.replace(/\D/g, '');
    }

    function ccAddNewContact() {
        var CCContactCollections = document.getElementById('CCContactCollections');
        // // console.log("Contact Count: ", CCContactCollections)
        createContact(CCContactCollections);
    }


    function createContact(CCContactCollections) {


        // Get the parent div by its id
        var parentDiv = document.getElementById('CCContactCollections');
        var ccEachContactCount = parentDiv.getElementsByClassName('ccEachContact').length;

        ccEachContactCount = parseInt(ccEachContactCount) + 1;




        // Create main contact div
        var contactDiv = document.createElement('div');
        contactDiv.classList.add('ccEachContact');

        // Create name section
        var nameSectionDiv = document.createElement('div');
        nameSectionDiv.classList.add('ccContactNameSection');

        // Create a paragraph element
        var nameText = document.createElement('p');
        nameText.classList.add('ccContactNameText');
        nameText.textContent = 'Name';

        // Create name input
        var nameInput = document.createElement('input');
        nameInput.type = 'text';
        nameInput.classList.add('ccContactPersonNameInput');
        nameInput.placeholder = 'Name of contact Person';
        /* nameInput.setAttribute('oninput', 'validateInput(this)');*/
        nameInput.name = 'ccContactPersonNameInput';
        nameInput.id = `ccContactPersonNameInput${ccEachContactCount}`

        // Append name input to name section
        nameSectionDiv.appendChild(nameText);
        nameSectionDiv.appendChild(nameInput);

        // Create number section
        var numberSectionDiv = document.createElement('div');
        numberSectionDiv.classList.add('CCnumberSection');

        // Create contact number section
        var contactNumberSectionDiv = document.createElement('div');
        contactNumberSectionDiv.classList.add('ccContactNumberSection');

        // Create Call icon
        var callIcon = document.createElement('img');
        callIcon.src = '/images/Icons/Call.png';
        callIcon.classList.add('CallIcon');
        callIcon.alt = '';

        // Create country code input for contact number
        var countryCodeInput = document.createElement('select');
        countryCodeInput.name = 'ccContactPersonCounrtryCodeInput';
        countryCodeInput.classList.add('ccContactPersonCounrtryCodeInput');
        countryCodeInput.id = `ccContactPersonCounrtryCodeInput${ccEachContactCount}`;

        // Add options to country code input
        var countryCodes = ["+971", "+966", "+91", "+98", "+86", "+81", "+7", "+60", "+65", "+92",
            "+880", "+62", "+1", "+27", "+30", "+31", "+32", "+33", "+34", "+351",
            "+358", "+39", "+40", "+41", "+420", "+43", "+44", "+45", "+46", "+47",
            "+48", "+49", "+51", "+52", "+53", "+54", "+55", "+56", "+57", "+58",
            "+61", "+64", "+66", "+673", "+82", "+84", "+90", "+93", "+94", "+95"];

        for (var i = 0; i < countryCodes.length; i++) {
            var option = document.createElement('option');
            option.value = countryCodes[i];
            option.text = countryCodes[i];
            countryCodeInput.appendChild(option);
        }

        // Create contact number input
        var contactNumberInput = document.createElement('input');
        contactNumberInput.type = 'text';
        contactNumberInput.id = `ccContactPersonNumberInput${ccEachContactCount}`;
        contactNumberInput.classList.add('ccContactPersonNumberInput');
        contactNumberInput.placeholder = 'Contact number';
        contactNumberInput.setAttribute('oninput', 'validateInput(this)');
        contactNumberInput.name = 'ccContactPersonNumberInput';

        // Append Call icon, country code input, and contact number input to contact number section
        contactNumberSectionDiv.appendChild(callIcon);
        contactNumberSectionDiv.appendChild(countryCodeInput);
        contactNumberSectionDiv.appendChild(contactNumberInput);

        // Create WhatsApp number section
        var whatsappNumberSectionDiv = document.createElement('div');
        whatsappNumberSectionDiv.classList.add('ccContactNumberSection');

        // Create WhatsApp icon
        var whatsappIcon = document.createElement('img');
        whatsappIcon.src = '/images/Icons/WhatsApp_out.png';
        whatsappIcon.classList.add('CallIcon');
        whatsappIcon.alt = '';

        // Create country code input for WhatsApp number
        var whatsappCountryCodeInput = document.createElement('select');
        whatsappCountryCodeInput.name = 'ccContactPersonWhatsAppCounrtryCodeInput';
        whatsappCountryCodeInput.classList.add('ccContactPersonWhatsAppCounrtryCodeInput');
        whatsappCountryCodeInput.id = `ccContactPersonWhatsAppCounrtryCodeInput${ccEachContactCount}`;

        // Add options to WhatsApp country code input
        for (var j = 0; j < countryCodes.length; j++) {
            var optionWhatsApp = document.createElement('option');
            optionWhatsApp.value = countryCodes[j];
            optionWhatsApp.text = countryCodes[j];
            whatsappCountryCodeInput.appendChild(optionWhatsApp);
        }

        // Create WhatsApp number input
        var whatsappNumberInput = document.createElement('input');
        whatsappNumberInput.type = 'text';
        whatsappNumberInput.id = `ccContactPersonWhatsappNumberInput${ccEachContactCount}`;
        whatsappNumberInput.setAttribute('oninput', 'validateInput(this)');
        whatsappNumberInput.classList.add('ccContactPersonWhatsappNumberInput');
        whatsappNumberInput.placeholder = 'Contact WhatsApp number';
        whatsappNumberInput.name = 'ccContactPersonWhatsappNumberInput';

        // Append WhatsApp icon, WhatsApp country code input, and WhatsApp number input to WhatsApp number section
        whatsappNumberSectionDiv.appendChild(whatsappIcon);
        whatsappNumberSectionDiv.appendChild(whatsappCountryCodeInput);
        whatsappNumberSectionDiv.appendChild(whatsappNumberInput);

        // Append name section, contact number section, and WhatsApp number section to main contact div
        contactDiv.appendChild(nameSectionDiv);
        contactDiv.appendChild(numberSectionDiv);
        numberSectionDiv.appendChild(contactNumberSectionDiv);
        numberSectionDiv.appendChild(whatsappNumberSectionDiv);

        // Append the created contact div to the contacts container
        CCContactCollections.appendChild(contactDiv);
    }


    function SaveCustomerDetails() {
        showLoader();

        var Customername, Address, Loaction, SalesEx, Co_ordinator, Contact

        Customername = document.getElementById('CustomerName').value;
        Address = document.getElementById('CCAddressInput').value;
        Loaction = document.getElementById('ccLocation').value;
        SalesEx = document.getElementById('CCSalesEx').value;
        Co_ordinator = document.getElementById('CCCo-ordinator').value;

        // Get the contact people
        var ContactCollections = document.getElementById('CCContactCollections');
        var ccEachContactCount = parseInt(ContactCollections.getElementsByClassName('ccEachContact').length);
        Contact = [];

        for (i = 1; i <= ccEachContactCount; i++) {
            // // console.log(document.getElementById(`ccContactPersonNameInput${ccEachContactCount}`));
            if (document.getElementById(`ccContactPersonNameInput${i}`)) {
                var OneContact = {
                    Name: document.getElementById(`ccContactPersonNameInput${i}`).value,
                    CallCountryCode: document.getElementById(`ccContactPersonCounrtryCodeInput${i}`).value,
                    CallNumber: document.getElementById(`ccContactPersonNumberInput${i}`).value,
                    WhatsappCountryCode: document.getElementById(`ccContactPersonWhatsAppCounrtryCodeInput${i}`).value,
                    WhatsappNumber: document.getElementById(`ccContactPersonWhatsappNumberInput${i}`).value,
                }
                //console.log("OneContact",OneContact);
                Contact.push(OneContact);
            }
        }

        if (!Customername || !Address || !Loaction || !SalesEx || !Co_ordinator || Contact.length === 0) {
            // alert("Please fill all fields");
        } else {
            // URL of your backend API endpoint
            var apiUrl = '/sales/saveCustomer/';

            // Data to be sent in the POST request (adjust as needed)
            var postData = {
                Customername: Customername,
                Address: Address,
                Loaction: Loaction,
                SalesEx: SalesEx,
                Co_ordinator: Co_ordinator,
                Contact: Contact
            };

            //console.log("Contact:",Contact);

            // Convert the data object to a JSON string
            var jsonData = JSON.stringify(postData);

            // Set up the fetch options
            var fetchOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // Add any additional headers if needed
                },
                body: jsonData,
            };

            // Make the fetch request
            fetch(apiUrl, fetchOptions)
                .then(response => response.json()) // Parse the JSON response
                .then(data => {
                    // Handle the data from the server
                    // // console.log('Response from server:', data);
                    CloseCustomerCreationPopup();
                    getAllOrders()
                    resetCustomerValues();
                })
                .catch(error => {
                    // Handle errors
                    console.error('Error:', error);
                });

        }

    }

    function resetCustomerValues() {
        document.getElementById('CustomerName').value = '';
        document.getElementById('CCAddressInput').value = '';
        document.getElementById('ccLocation').value = '';
        document.getElementById('CCSalesEx').value = '';
        document.getElementById('CCCo-ordinator').value = '';

        var ContactCollections = document.getElementById('CCContactCollections');
        var ccEachContactCount = parseInt(ContactCollections.getElementsByClassName('ccEachContact').length);

        for (i = 1; i <= ccEachContactCount; i++) {
            document.getElementById(`ccContactPersonNameInput${i}`).value = '';
            document.getElementById(`ccContactPersonCounrtryCodeInput${i}`).value = '';
            document.getElementById(`ccContactPersonNumberInput${i}`).value = '';
            document.getElementById(`ccContactPersonWhatsAppCounrtryCodeInput${i}`).value = '';
            document.getElementById(`ccContactPersonWhatsappNumberInput${i}`).value = '';
        }
    }

    function OpenPopupForUploadLedger() {
        State.Customers.forEach((customer) => {
            State.AllCustomerNames.push(customer.Customername);
        })
        document.getElementById('UploadLedgerDataPopUp').style.display = "flex";
        var Customers = State.AllCustomerNames;
        console.log(Customers);
    }

    function ClosePopupForUploadLedger() {
        document.getElementById('UploadLedgerDataPopUp').style.display = "none";
        if (document.getElementById('CustomerNameUploadautocomplete-list')) {
            document.getElementById('CustomerNameUploadautocomplete-list').innerHTML = "";
        }
    }

    function OpenEachCustomerPanel(Customername, Location) {
        var EachCustomerDetailsPopUp = document.getElementById('EachCustomerDetailsPopUp');
        EachCustomerDetailsPopUp.style.display = "flex";

        // console.log("Customername: ",Customername," Location: ",Location);
        console.log("All Customers:", State.Customers);

        var Customer = State.Customers.find((OneCustomer) => {
            return OneCustomer.Customername === Customername && OneCustomer.Loaction === Location;
        })

        console.log("Selectec Customer: ", Customer);
        if (Customer) {
            document.getElementById('popCustNameText').textContent = Customer.Customername;
            document.getElementById('PopCustomerAddressContent').textContent = Customer.Address;
            document.getElementById('PopCustomerLocationContent').textContent = Customer.Loaction;
            document.getElementById('PopCustomerSalesExContent').textContent = Customer.SalesEx;
            document.getElementById('PopCustomerCoOrdinatorContent').textContent = Customer.Co_ordinator;

            ApplyLineGraphToOutStandingBalance(Customer)
            ShowAccountStatement();
        }
    }

    function ClosePopupForEachCustomer() {
        ShowPurchasePaymentAnalysis();



        var EachCustomerDetailsPopUp = document.getElementById('EachCustomerDetailsPopUp');
        EachCustomerDetailsPopUp.style.display = "none";

    }

    async function ApplyLineGraphToOutStandingBalance(Customer) {
        showLoader();

        var TableData = []; // table data

        await fetch(`/sales/GetAllCustomerPurchaseData/api/${Customer.Customername}`)
            .then(response => response.json())
            .then(data => {
                console.log('Data from the server:', data);
                TableData = data;
            })
            .catch(error => console.error('Error:', error));


        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {
            // Use your actual balance data
            const balanceData = [];

            TableData.forEach((EachData) => {
                if (EachData.balance) {
                    balanceData.push({
                        date: new Date(EachData.Date),
                        balance: EachData.balance
                    })
                }
            })

            // Sort balanceData based on the date in ascending order
            const sortedBalanceData = sortBalanceData(balanceData);

            const data = generateChartData(sortedBalanceData);

            var options = {
                backgroundColor: '#323940',
                chartArea: {
                    backgroundColor: '#323940', // Set the background color inside the chart to #323940
                },
                titleTextStyle: {
                    color: '#B3B7BA', // Set the text color for the title
                },
                hAxis: {
                    title: 'Month',
                    titleTextStyle: {
                        color: '#B3B7BA', // Set the text color for the title
                    },
                    textStyle: {
                        color: '#B3B7BA' // Set the text color for horizontal axis labels
                    },
                    format: 'MMM yyyy', // Format the x-axis labels to display month abbreviation and year
                    slantedText: false, // Display labels at an angle
                    gridlines: {
                        color: '#575757' // Set the color of the y-axis gridlines
                    }

                },
                vAxis: {
                    title: 'Balance',
                    minValue: 0,
                    titleTextStyle: {
                        color: '#B3B7BA', // Set the text color for the title
                    },
                    textStyle: {
                        color: '#B3B7BA' // Set the text color for vertical axis labels
                    },
                    gridlines: {
                        color: '#575757' // Set the color of the y-axis gridlines
                    }
                },
                legend: {
                    position: 'top',
                    textStyle: {
                        color: 'white' // Set the text color for the legend
                    },
                },
                colors: ['#66ccff'],
            };

            // Draw
            const chart = new google.visualization.LineChart(document.getElementById('myChart'));
            chart.draw(data, options);
        }

        function sortBalanceData(balanceData) {
            return balanceData.sort((a, b) => {
                // Compare dates
                return a.date - b.date;
            });
        }

        function generateChartData(balanceData) {
            const data = new google.visualization.DataTable();
            data.addColumn('date', 'Date');
            data.addColumn('number', 'Balance');

            // Add each date and its corresponding balance
            balanceData.forEach((entry) => {
                data.addRow([entry.date, entry.balance]);
            });

            return data;
        }




        ShowPurchasePaymentGraphPage(TableData)
    }

    async function ShowPurchasePaymentGraphPage(TableData) {

        google.charts.load('current', { 'packages': ['bar'] });
        google.charts.setOnLoadCallback(drawChart);

        function drawChart() {
            // Process the TableData to aggregate amounts by month
            var monthData = {};

            // Loop through the TableData
            TableData.forEach(function (entry) {
                // Convert the date string to a JavaScript Date object
                var date = new Date(entry.Date);
                // Extract the month and year
                var monthYear = date.toLocaleString('en-US', { month: 'short', year: 'numeric' });

                // Initialize the monthData entry if it doesn't exist
                if (!monthData[monthYear]) {
                    monthData[monthYear] = { Purchase: 0, Payments: 0 };
                }

                // Add Debit (purchase) amount to Purchase
                monthData[monthYear].Purchase += entry.Debit || 0;
                // Add Credit (payment) amount to Payments
                monthData[monthYear].Payments += entry.Credit || 0;
            });

            // Convert monthData to an array for charting
            var chartData = [['Month', 'Purchase', 'Payments']];

            for (var monthYear in monthData) {
                var data = monthData[monthYear];
                // Ensure that Purchase and Payments are treated as numbers, not strings
                chartData.push([monthYear, parseFloat(data.Purchase), parseFloat(data.Payments)]);
            }

            var data = google.visualization.arrayToDataTable(chartData);

            var options = {
                chart: {
                    title: 'Purchase and Payments for the Past 12 Months',
                    subtitle: 'Based on Debit and Credit Amounts',
                },
                colors: ['#6699ff', '#ff471a'],
                backgroundColor: '#323940',
                chartArea: {
                    backgroundColor: '#323940', // Set the background color inside the chart to #323940
                },
                titleTextStyle: {
                    color: '#B3B7BA', // Set the text color for the title
                },
                hAxis: {
                    textStyle: {
                        color: '#B3B7BA', // Set the text color for horizontal axis labels
                    },
                },
                vAxis: {
                    textStyle: {
                        color: '#B3B7BA', // Set the text color for vertical axis labels
                    },
                },
                legend: {
                    textStyle: {
                        color: '#B3B7BA', // Set the text color for the legend
                    },
                },
            };

            var chart = new google.charts.Bar(document.getElementById('columnchart_material'));

            chart.draw(data, google.charts.Bar.convertOptions(options));
        }
        hideLoader();

    }

    function ShowPurchasePaymentAnalysis() {
        var PurchasePaymentAnalysisDiv = document.getElementById('PurchasePaymentAnalysisDiv');
        PurchasePaymentAnalysisDiv.style.display = "flex";

        var purchaseDetailsDiv = document.getElementById('purchaseDetailsDiv');
        purchaseDetailsDiv.style.display = "none";
        var FollowUpSummeryDiv = document.getElementById('FollowUpSummeryDiv');
        FollowUpSummeryDiv.style.display = "none";

        // Toggle active state for buttons
        toggleActiveState('PurchasePaymentAnalysisBTN');
    }

    async function ShowCustomerPurchaseDetailFromLedger() {
        showLoader();

        var purchaseDetailsDiv = document.getElementById('CustomerPurchaseDetails');
        purchaseDetailsDiv.style.display = "flex";

        // var PurchasePaymentAnalysisDiv = document.getElementById('PurchasePaymentAnalysisDiv');
        // PurchasePaymentAnalysisDiv.style.display = "none";

        // Toggle active state for buttons
        toggleActiveState('PurchaseDetailsBTN');

        var TableData = []; // table data
        var popCustName = document.getElementById('popCustNameText').textContent;
        await fetch(`/sales/GetAllCustomerPurchaseData/api/${popCustName}`)
            .then(response => response.json())
            .then(data => {
                console.log('Table Data: ', data);
                TableData = data;
                ApplyPurchaseDetails(data)
            })
            .catch(error => console.error('Error:', error));


    }


    function ApplyPurchaseDetails(data) {
        hideLoader();

        var PurchaseTableBodyDiv = document.getElementById('PurchaseTableBodyDiv');
        PurchaseTableBodyDiv.innerHTML = "";

        var fragment = document.createDocumentFragment();
        var StartFlag = false;

        function SetStartFlag() {
            StartFlag = true;
        }

        function RemoveStartFlag() {
            StartFlag = false;
        }

        function getSingleItems(Item) {
            var virtualItem = `
            ${StartFlag ? '<hr class="PurchaseTableHR" />' : ''}
            <div class="EachItemDiv">
                <p>${Item.Item} ${Item.ItemSecondaryName ? ' - ' + Item.ItemSecondaryName : ''}</p>
                <p>${Item.Qty}</p>
                <p>${Item.Price}</p>
                <p>${Item.Amount}</p>
            </div>
        `;
            return virtualItem;
        }

        function getReciptItems(Item) {
            var virtualItem = `
            ${StartFlag ? '<hr class="PurchaseTableHR" />' : ''}
            <div class="EachItemDiv">
                <p>Vch no:  ${Item.VchNo}</p>
                <p></p>
                <p></p>
                <p>${Item.Amount}</p>
            </div>
        `;
            return virtualItem;
        }

        function getSingleRow(Item) {
            var tempDiv = document.createElement('div');
            var virtualRow = `
            <div class="EachTableRow">
                <p>${Item.Date}</p>
                <p>${Item.VchNo}</p>
                <p>${Item.poNo ? Item.poNo : ''}</p>
                <div class="itemsDivCollections">
                    ${Item.Items.length > 0 ?
                    Item.Items.map((SingleItem, index) => {
                        if (index > 0) {
                            SetStartFlag();
                        }
                        return getSingleItems(SingleItem);
                    }).join('') :
                    Item.PaidCollection.length > 0 ?
                        Item.PaidCollection.map((SingleItem, index) => {
                            if (index > 0) {
                                SetStartFlag();
                            }
                            return getReciptItems(SingleItem);
                        }).join('') : ''
                }
                </div>
                <p>${Item.vchType}</p>
                <p>${Item.Debit ? Item.Debit : ''}</p>
                <p>${Item.Credit ? Item.Credit : ''}</p>
                <p>${Item.balance}</p>
            </div>
        `;
            RemoveStartFlag();
            tempDiv.innerHTML = virtualRow;
            while (tempDiv.children.length > 0) {
                fragment.appendChild(tempDiv.children[0]);
            }
        }

        if (data.length > 0) {
            data.forEach(getSingleRow);
        }

        PurchaseTableBodyDiv.appendChild(fragment);

        hideLoader();
    }








    function ShowFollowUpSummery() {
        var PurchasePaymentAnalysisDiv = document.getElementById('PurchasePaymentAnalysisDiv');
        PurchasePaymentAnalysisDiv.style.display = "none";

        var purchaseDetailsDiv = document.getElementById('purchaseDetailsDiv');
        purchaseDetailsDiv.style.display = "none";

        var FollowUpSummeryDiv = document.getElementById('FollowUpSummeryDiv');
        FollowUpSummeryDiv.style.display = "block";

        ShowAllFollowUps();

        // Toggle active state for buttons
        toggleActiveState('FollowUpSummeryBTN');
    }


    function toggleActiveState(clickedBtnClass) {
        // Remove ActiveActionBTN class from all buttons
        var buttons = document.getElementsByClassName('ActiveActionBTN');
        for (var i = 0; i < buttons.length; i++) {
            buttons[i].classList.remove('ActiveActionBTN');
        }

        // Add ActiveActionBTN class to the clicked button
        var clickedBtn = document.getElementsByClassName(clickedBtnClass)[0];
        clickedBtn.classList.add('ActiveActionBTN');
    }


    document.getElementById('PurchaseSearchInput').addEventListener('input', function () {
        var searchValue = this.value.toLowerCase();

        var rows = document.getElementById('PurchaseTableBodyDiv').querySelectorAll('.EachTableRow');

        var matchingRows = [];

        rows.forEach(function (row) {
            // Hide all rows initially
            row.style.display = 'none';

            // Show matching rows
            if (row.textContent.toLowerCase().includes(searchValue)) {
                row.style.display = '';
                matchingRows.push(row);
            }
        });

        // console.log("Matching Rows:", matchingRows);
    });

    function ShowAccountStatement() {
        var AccountStatements = document.getElementById('AccountStatements');
        var LedgerDetails = document.getElementById('LedgerDetails');
        var CustomerPurchaseDetails = document.getElementById('CustomerPurchaseDetails');

        AccountStatements.style.display = "block";
        LedgerDetails.style.display = "none";
        CustomerPurchaseDetails.style.display = "none";

        var AccontStatementBtn = document.getElementById('AccontStatementBtn');
        var PurchaseBtn = document.getElementById('PurchaseBtn');
        var LedgerBtn = document.getElementById('LedgerBtn');

        // Add or remove class for active state
        AccontStatementBtn.classList.add("PurchaseSubButtonActive");
        LedgerBtn.classList.remove("PurchaseSubButtonActive");
        PurchaseBtn.classList.remove("PurchaseSubButtonActive");
    }

    function ShowLedgerDetails() {
        getAllCustomerLedgerFile();
        var LedgerDetails = document.getElementById('LedgerDetails');
        var AccountStatements = document.getElementById('AccountStatements');
        var CustomerPurchaseDetails = document.getElementById('CustomerPurchaseDetails');

        LedgerDetails.style.display = "block";
        AccountStatements.style.display = "none";
        CustomerPurchaseDetails.style.display = "none";

        var LedgerBtn = document.getElementById('LedgerBtn');
        var PurchaseBtn = document.getElementById('PurchaseBtn');
        var AccontStatementBtn = document.getElementById('AccontStatementBtn');

        // Add or remove class for active state
        LedgerBtn.classList.add("PurchaseSubButtonActive");
        PurchaseBtn.classList.remove("PurchaseSubButtonActive");
        AccontStatementBtn.classList.remove("PurchaseSubButtonActive");

    }

    function ShowCustomerPurchaseDetail() {
        var CustomerPurchaseDetails = document.getElementById('CustomerPurchaseDetails');
        var AccountStatements = document.getElementById('AccountStatements');
        var LedgerDetails = document.getElementById('LedgerDetails');

        CustomerPurchaseDetails.style.display = "block";
        LedgerDetails.style.display = "none";
        AccountStatements.style.display = "none";

        var PurchaseBtn = document.getElementById('PurchaseBtn');
        var LedgerBtn = document.getElementById('LedgerBtn');
        var AccontStatementBtn = document.getElementById('AccontStatementBtn');

        // Add or remove class for active state
        PurchaseBtn.classList.add("PurchaseSubButtonActive");
        LedgerBtn.classList.remove("PurchaseSubButtonActive");
        AccontStatementBtn.classList.remove("PurchaseSubButtonActive");


        ShowCustomerPurchaseDetailFromLedger();
    }

    function CustomerNameSuggestions() {
        var customerNamesDatalist = document.getElementById("customerNames");
        var customerSuggestionsContainer = document.querySelector(".customer-suggestions-container");
        var customerNameInput = document.getElementById("CustomerNameUpload");

        customerNamesDatalist.innerHTML = "";
        customerNamesDatalist.style.display = "block";
        customerNamesDatalist.style.border = "1px solid gray";

        // Populate datalist with customer names
        State.Customers.forEach(function (customer) {
            var option = document.createElement("option");
            option.value = customer.Customername;
            option.textContent = customer.Customername;
            customerNamesDatalist.appendChild(option);
        });

        // Filter and display suggestions
        var inputValue = customerNameInput.value.toLowerCase();
        var options = customerNamesDatalist.getElementsByTagName("option");

        for (var i = 0; i < options.length; i++) {
            var optionValue = options[i].value.toLowerCase();
            if (optionValue.startsWith(inputValue)) {
                options[i].style.display = "";
                options[i].addEventListener("click", function () {
                    customerNameInput.value = this.value;
                    customerNamesDatalist.style.display = "none"
                    customerNamesDatalist.style.border = "none"

                });
            } else {
                options[i].style.display = "none";
            }
        }
    }


    async function getAllCustomerLedgerFile() {
        showLoader();
        var popCustNameText = document.getElementById('popCustNameText').textContent;
        await fetch(`/sales/GetAllCustomerledgerFile/api/${popCustNameText}`)
            .then(response => response.json())
            .then(data => {
                console.log('Data from the server:', data);
                addLedgerFiles(data);
            })
            .catch(error => console.error('Error:', error));


        hideLoader()
    }


    function addLedgerFiles(data) {
        var ledgerCollections = document.getElementById('ledgerCollections');
        ledgerCollections.innerHTML = "";
        //console.log(data);
        if (data.length > 0) {
            data.forEach((Item, index) => {
                var virtualItem = `
                <div class="EachLedgerItem">
                    <img class="ExcelIcon" src="/images/Icons/Microsoft Excel_icon.png" alt="">
                    <div class="EachLedgerInfo">
                        <p class="LedgerName">${Item.name}</p>
                        <p class="LedgerInfoData">Uploaded at ${Item.Date}</p>
                    </div>
                    <a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,${Item.Excel}" class="btn LedgerDownloadBtn">Download</a>
                </div>
                `;

                ledgerCollections.innerHTML += virtualItem;
            })
        }
    }


    function ShowPurchaseDetails() {
        var purchaseDetailsDiv = document.getElementById('purchaseDetailsDiv');
        purchaseDetailsDiv.style.display = "flex";
        var PurchasePaymentAnalysisDiv = document.getElementById('PurchasePaymentAnalysisDiv');
        PurchasePaymentAnalysisDiv.style.display = "none";
        var FollowUpSummeryDiv = document.getElementById('FollowUpSummeryDiv');
        FollowUpSummeryDiv.style.display = "none";

        GetProductBinderAdditive();

        // Toggle active state for buttons
        toggleActiveState('PurchaseDetailsBTN');



    }

    async function GetProductBinderAdditive() {
        showLoader()
        var Customer_Name = document.getElementById('popCustNameText').textContent;
        await fetch(`/sales/GetProductBinderAdditive/PurchasedDetails/api/${Customer_Name}`)
            .then(response => response.json())
            .then(data => {
                console.log('Data from the server:', data);
                State.ReportData = data;
                // Handle the response data as needed
                //call products
                ShowProductPurchaseDetails();
            })
            .catch(error => console.error('Error:', error));

        hideLoader();
    }


    function ShowProductPurchaseDetails() {
        var ProductPurchaseDetails = document.getElementById('ProductPurchaseDetails');
        var BinderPurchaseDetails = document.getElementById('BinderPurchaseDetails');
        var AdditivesPurchaseDetails = document.getElementById('AdditivesPurchaseDetails');

        ProductPurchaseDetails.style.display = 'block';
        BinderPurchaseDetails.style.display = 'none';
        AdditivesPurchaseDetails.style.display = 'none';

        var ProductReportData = State.ReportData.ProductReportData;
        console.log("ProductReportData: ", ProductReportData);



        function groupByMonths(data) {
            const result = [];

            console.log('Group by months data: ', data);

            // Iterate through each item in the data array
            data.forEach(item => {
                const productGroup = item.ProductGroup;

                // Find the product group entry in the result array
                let productGroupEntry = result.find(entry => entry.ProductGroup === productGroup);

                // If the product group entry doesn't exist, create it
                if (!productGroupEntry) {
                    productGroupEntry = {
                        ProductGroup: productGroup,
                        Product: []
                    };

                    // Add the new product group entry to the result array
                    result.push(productGroupEntry);
                }

                // Find the product entry in the product group
                let productEntry = productGroupEntry.Product.find(product => product.Abbreviation === item.Abbreviation);

                // If the product entry doesn't exist, create it
                if (!productEntry) {
                    productEntry = {
                        TinterName: item.TinterName,
                        Abbreviation: item.Abbreviation,
                        Past_12_Months_Quantity: {},
                        Last_year_Quantity: 0, // Initialize Last_year_Quantity to 0
                        Total_Quantity: 0 // Initialize Total_Quantity to 0
                    };

                    // Add the new product entry to the product group
                    productGroupEntry.Product.push(productEntry);
                }

                // Parse the OrderDate and extract the month key
                const dateParts = item.OrderDate.split('-');
                const currentDate = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);
                const monthKey = currentDate.toLocaleString('en-US', { month: 'long' });

                // Calculate the quantity for the current month
                const monthQuantity = data
                    .filter(d => {
                        const dDateParts = d.OrderDate.split('-');
                        const dDate = new Date(`${dDateParts[2]}-${dDateParts[1]}-${dDateParts[0]}`);
                        return dDate.getMonth() === currentDate.getMonth() && d.Abbreviation === item.Abbreviation;
                    })
                    .reduce((sum, d) => sum + d.TinterQuantityGrams, 0);

                // Assign the calculated quantity to the corresponding month in the product entry
                productEntry.Past_12_Months_Quantity[monthKey] = monthQuantity;

                // Calculate the quantity for last year
                const lastYearQuantity = data
                    .filter(d => {
                        const dDateParts = d.OrderDate.split('-');
                        const dDate = new Date(`${dDateParts[2]}-${dDateParts[1]}-${dDateParts[0]}`);
                        return dDate.getFullYear() === currentDate.getFullYear() - 1 && d.Abbreviation === item.Abbreviation;
                    })
                    .reduce((sum, d) => sum + d.TinterQuantityGrams, 0);

                // Assign the calculated quantity to Last_year_Quantity in the product entry
                productEntry.Last_year_Quantity = lastYearQuantity;

                // Calculate the total quantity for the past 12 months
                const totalQuantity = Object.values(productEntry.Past_12_Months_Quantity).reduce((sum, value) => sum + value, 0);

                // Assign the calculated total quantity to Total_Quantity in the product entry
                productEntry.Total_Quantity = totalQuantity;
            });

            return result;
        }

        // Calculate the date twelve months ago
        const twelveMonthsAgo = new Date();
        twelveMonthsAgo.setMonth(twelveMonthsAgo.getMonth() - 12);

        // Calculate the date eleven months ago
        const elevenMonthsAgo = new Date();
        elevenMonthsAgo.setMonth(elevenMonthsAgo.getMonth() - 11);

        // Calculate the date for last year
        const lastYear = new Date();
        lastYear.setFullYear(lastYear.getFullYear() - 1);

        // Call the groupByMonths function with the ProductReportData array
        const groupedData = groupByMonths(ProductReportData);

        // Display the grouped data
        //console.log(groupedData);

        State.ReportData.ProductMonthGroupedData = groupedData;

        var PurchaseProductTableBodyDiv = document.getElementById('PurchaseProductTableBodyDiv');
        PurchaseProductTableBodyDiv.innerHTML = '';

        var months = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];

        // Get the current date
        const currentDate = new Date();

        // Create an array of the past 12 months starting from the current month
        const past12Months = Array.from({ length: 12 }, (_, index) => {
            const monthIndex = (currentDate.getMonth() - index + 12) % 12;
            return months[monthIndex];
        });
        var GroupDataModifiedByMonth = []
        console.log("sers");
        console.log("groupedData: ", groupedData);
        groupedData.forEach((EachGroup) => {
            console.log("Each Group is ", EachGroup);
            var GroupMonthData = {
                name: EachGroup.ProductGroup,
                EachMonthSum: [],
                Products: [],
                TotalSumOfEachGroup: 0
            };

            // find for Product Group
            past12Months.forEach((EachMonth) => {
                // Manage Group data
                var monthSum = 0;
                var productMonthCount = 0;
                EachGroup.Product.forEach((EachInventory) => {
                    //  console.log("Each Month: ", EachMonth);
                    if (EachInventory.Past_12_Months_Quantity[EachMonth]) {
                        // console.log(" EachInventory: ", EachInventory);
                        // console.log(`Quantity of : ${EachMonth} is ${EachInventory.Past_12_Months_Quantity[EachMonth]}`)
                        // add to sum of each month .
                        monthSum += EachInventory.Past_12_Months_Quantity[EachMonth]
                        productMonthCount = EachInventory.Past_12_Months_Quantity[EachMonth]
                    }
                })
                GroupMonthData.EachMonthSum.push(monthSum);
                GroupMonthData.TotalSumOfEachGroup += monthSum;



                // manage Product data




            })
            GroupDataModifiedByMonth.push(GroupMonthData);
            EachGroup.Product.forEach((EachInventory) => {

                GroupMonthData.Products.push(transformData(EachInventory));

            });

        })
        function transformData(input) {
            const months = past12Months;

            const past12MonthsQuantity = months.map(month => input.Past_12_Months_Quantity[month] || 0);

            const transformedData = {
                TinterName: input.TinterName,
                Abbreviation: input.Abbreviation,
                Past_12_Months_Quantity: past12MonthsQuantity,
                Last_year_Quantity: input.Last_year_Quantity,
                Total_Quantity: past12MonthsQuantity.reduce((sum, quantity) => sum + quantity, 0)
            };

            return transformedData;
        }


        console.log("GroupDataModifiedByMonth: ", GroupDataModifiedByMonth);

        function createGroupRow(groupData) {
            // Map EachMonthSum to formatted <p> elements and join them
            const sumData = groupData.EachMonthSum.map((singleMonthData) => `<p>${singleMonthData.toFixed(1)}</p>`).join('');

            // Create the virtual row
            const virtualRow = `
                    <div class="product-group-div">
                        <p>${groupData.name}</p>
                        <p></p>
                        <div class="product-group-div-sum">
                            ${sumData}
                            <p>${groupData.TotalSumOfEachGroup.toFixed(1)}</p>
                            <p>0</p>
                        </div>
                    </div>
                `;

            return virtualRow;
        }


        // Group Table data 

        GroupDataModifiedByMonth.forEach((eachGroup, i) => {
            console.log("Index : ", i);
            console.log("eachGroup : ", eachGroup);

            var productRow = document.createElement('div');
            productRow.classList.add('EachProductRow');

            const groupRow = createGroupRow(eachGroup);
            productRow.innerHTML += groupRow;
            PurchaseProductTableBodyDiv.appendChild(productRow);


            eachGroup.Products.map((EachProduct) => {
                const groupRow = createProductRow(EachProduct);
                productRow.innerHTML += groupRow;
                PurchaseProductTableBodyDiv.appendChild(productRow);
            })


        });



        function createProductRow(ProductData) {
            console.log("ProductData: ", ProductData);
            // Check if EachMonthSum is defined, otherwise use an empty array
            const sumData = (ProductData.Past_12_Months_Quantity || []).map((singleMonthData) => `<p>${singleMonthData.toFixed(1)}</p>`).join('');

            const virtualRow = `
                    <div class="product-group-div">
                        <p></p>
                        <p>${ProductData.TinterName}</p>
                        <div class="product-group-div-sum">
                            ${sumData}
                            <p>${ProductData.Total_Quantity ? ProductData.Total_Quantity.toFixed(1) : ''}</p>
                            <p>0</p>
                        </div>
                    </div>
                `;

            return virtualRow;
        }
    }

    // search  bar functionality for product
    document.getElementById('ProductReportDataPurchaseSearch').addEventListener('input', function () {
        var searchValue = this.value.toLowerCase();

        var rows = document.getElementById('PurchaseProductTableBodyDiv').querySelectorAll('.EachProductRow');

        var matchingRows = [];

        rows.forEach(function (row) {
            // Hide all rows initially
            row.style.display = 'none';

            // Show matching rows
            if (row.textContent.toLowerCase().includes(searchValue)) {
                row.style.display = '';
                matchingRows.push(row);
            }
        });

        // console.log("Matching Rows:", matchingRows);
    });

    // search  bar functionality for product group
    /*document.getElementById('ProductGroupReportDataPurchaseSearch').addEventListener('input', function () {
        var searchValue = this.value.toLowerCase();

        var rows = document.getElementById('PurchaseProductGroupTableBodyDiv').querySelectorAll('.EachProductGroupRow');

        var matchingRows = [];

        rows.forEach(function (row) {
            // Hide all rows initially
            row.style.display = 'none';

            // Show matching rows
            if (row.textContent.toLowerCase().includes(searchValue)) {
                row.style.display = '';
                matchingRows.push(row);
            }
        });

        // console.log("Matching Rows:", matchingRows);
    });*/


    function ShowBinderPurchaseDetails() {
        var BinderPurchaseDetails = document.getElementById('BinderPurchaseDetails');
        var ProductPurchaseDetails = document.getElementById('ProductPurchaseDetails');
        var AdditivesPurchaseDetails = document.getElementById('AdditivesPurchaseDetails');

        BinderPurchaseDetails.style.display = 'block';
        ProductPurchaseDetails.style.display = 'none';
        AdditivesPurchaseDetails.style.display = 'none';

        var BinderReportData = State.ReportData.BinderReportData;

        console.log('BinderReportData: ', BinderReportData);

        var months = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];

        var binderData = BinderReportData;

        // Process data to calculate past 12 months sum
        var result = binderData.reduce((acc, item) => {
            const orderDate = new Date(item.OrderDate.replace(/(\d{2})-(\d{2})-(\d{4})/, "$2/$1/$3"));
            const monthIndex = (currentDate.getMonth() - orderDate.getMonth() + 12) % 12;

            if (!acc[item.BinderName]) {
                acc[item.BinderName] = {
                    BinderName: item.BinderName,
                    Past_12_Months_Quantity: Array(12).fill(0),
                    Total_Quantity: 0
                };
            }

            acc[item.BinderName].Past_12_Months_Quantity[monthIndex] += item.BinderQuantityGrams;
            acc[item.BinderName].Total_Quantity += item.BinderQuantityGrams;

            return acc;
        }, {});

        // Convert result to array
        const BinderModifiedData = Object.values(result);

        console.log(BinderModifiedData);

        var BinderPurchaseReportDataBodyDiv = document.getElementById('BinderPurchaseReportDataBodyDiv');
        BinderPurchaseReportDataBodyDiv.innerHTML = '';

        BinderModifiedData.forEach((EachBinderData) => {
            ShowBinderRowData(EachBinderData);
        })

        function ShowBinderRowData(BinderData) {
            // Create a div element for each product row
            var productRow = document.createElement('div');
            productRow.classList.add('EachBinderDataRow');

            const sumData = (BinderData.Past_12_Months_Quantity || []).map((singleMonthData) => `<p>${singleMonthData.toFixed(1)}</p>`).join('');

            const virtualRow = `
                    {{!-- <div class="product-group-div"> --}}
                        <p>${BinderData.BinderName}</p>
                        {{!-- <div class="product-group-div-sum"> --}}
                            ${sumData}
                            <p>${BinderData.Total_Quantity ? parseInt(BinderData.Total_Quantity) : ''}</p>
                            <p>0</p>
                        {{!-- </div> --}}
                    {{!-- </div> --}}
                `;
            productRow.innerHTML += virtualRow;

            BinderPurchaseReportDataBodyDiv.appendChild(productRow);
        }



        /*BinderReportData.forEach((EachProduct) => {
            // Create a div element for each product row
            var productRow = document.createElement('div');
            productRow.classList.add('EachBinderDataRow');

            // list of binders 
            

            // Append the p elements to the product row div
            productRow.appendChild(orderDate);
            productRow.appendChild(tinterName);
            productRow.appendChild(tinterQuantity);

            // Append the product row div to the PurchaseTableBodyDiv
            PurchaseProductTableBodyDiv.appendChild(productRow);
        });*/
    }

    // search  bar functionality for Binders report data
    document.getElementById('BinderReportDataPurchaseSearch').addEventListener('input', function () {
        var searchValue = this.value.toLowerCase();

        var rows = document.getElementById('BinderPurchaseReportDataBodyDiv').querySelectorAll('.EachBinderDataRow');

        var matchingRows = [];

        rows.forEach(function (row) {
            // Hide all rows initially
            row.style.display = 'none';

            // Show matching rows
            if (row.textContent.toLowerCase().includes(searchValue)) {
                row.style.display = '';
                matchingRows.push(row);
            }
        });

        // console.log("Matching Rows:", matchingRows);
    });

    function ShowAdditivesPurchaseDetail() {
        var AdditivesPurchaseDetails = document.getElementById('AdditivesPurchaseDetails');
        var ProductPurchaseDetails = document.getElementById('ProductPurchaseDetails');
        var BinderPurchaseDetails = document.getElementById('BinderPurchaseDetails');

        AdditivesPurchaseDetails.style.display = 'block';
        ProductPurchaseDetails.style.display = 'none';
        BinderPurchaseDetails.style.display = 'none';

        var AdditiveReportData = State.ReportData.AdditiveReportData;

        console.log('AdditiveReportData: ', AdditiveReportData);

        var months = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];

        var AddtiiveData = AdditiveReportData;

        // Process data to calculate past 12 months sum
        var result = AddtiiveData.reduce((acc, item) => {
            const orderDate = new Date(item.OrderDate.replace(/(\d{2})-(\d{2})-(\d{4})/, "$2/$1/$3"));
            const monthIndex = (currentDate.getMonth() - orderDate.getMonth() + 12) % 12;

            if (!acc[item.AdditiveName]) {
                acc[item.AdditiveName] = {
                    AdditiveName: item.AdditiveName,
                    Past_12_Months_Quantity: Array(12).fill(0),
                    Total_Quantity: 0
                };
            }

            acc[item.AdditiveName].Past_12_Months_Quantity[monthIndex] += item.AdditiveQuantityGrams;
            acc[item.AdditiveName].Total_Quantity += item.AdditiveQuantityGrams;

            return acc;
        }, {});

        // Convert result to array
        const
            additiveModifiedData = Object.values(result);

        console.log(additiveModifiedData);

        var PurchaseAdditiveReportDataBodyDiv = document.getElementById('PurchaseAdditiveReportDataBodyDiv');
        PurchaseAdditiveReportDataBodyDiv.innerHTML = '';

        additiveModifiedData.forEach((EachAdditiveData) => {
            ShowAddtiveRowData(EachAdditiveData);
        })

        function ShowAddtiveRowData(AdditiveData) {
            // Create a div element for each product row
            var productRow = document.createElement('div');
            productRow.classList.add('EachAdditiveDataRow');

            const sumData = (AdditiveData.Past_12_Months_Quantity || []).map((singleMonthData) => `<p>${singleMonthData.toFixed(1)}</p>`).join('');

            const virtualRow = `
                    {{!-- <div class="product-group-div"> --}}
                        <p>${AdditiveData.AdditiveName}</p>
                        {{!-- <div class="product-group-div-sum"> --}}
                            ${sumData}
                            <p>${AdditiveData.Total_Quantity ? parseInt(AdditiveData.Total_Quantity) : ''}</p>
                            <p>0</p>
                        {{!-- </div> --}}
                    {{!-- </div> --}}
                `;
            productRow.innerHTML += virtualRow;

            PurchaseAdditiveReportDataBodyDiv.appendChild(productRow);
        }


        /* var PurchaseProductTableBodyDiv = document.getElementById('PurchaseAdditiveReportDataBodyDiv');
         PurchaseProductTableBodyDiv.innerHTML = '';
 
         AdditiveReportData.forEach((EachProduct) => {
             // Create a div element for each product row
             var productRow = document.createElement('div');
             productRow.classList.add('EachAdditiveDataRow');
 
             // Create p elements for each piece of information
             var orderDate = document.createElement('p');
             orderDate.textContent = EachProduct.OrderDate;
 
             var tinterName = document.createElement('p');
             tinterName.textContent = EachProduct.AdditiveName;
 
             var tinterQuantity = document.createElement('p');
             // Convert quantities to kilograms and liters if above 1000
             const quantityInGrams = EachProduct.AdditiveQuantityGrams > 1000 ? (EachProduct.AdditiveQuantityGrams / 1000).toFixed(2) + ' kg' : EachProduct.AdditiveQuantityGrams.toFixed(2) + ' g';
             const volumeInMilliliters = EachProduct.AdditiveVolume > 1000 ? (EachProduct.AdditiveVolume / 1000).toFixed(2) + ' L' : EachProduct.AdditiveVolume.toFixed(2) + ' mL';
 
             // Display the quantities
             tinterQuantity.textContent = `${quantityInGrams} --- ${volumeInMilliliters}`;
             //  tinterQuantity.textContent = `${EachProduct.AdditiveQuantityGrams.toFixed(2)} g --- ${EachProduct.AdditiveVolume.toFixed(2)} mL`;
 
             // Append the p elements to the product row div
             productRow.appendChild(orderDate);
             productRow.appendChild(tinterName);
             productRow.appendChild(tinterQuantity);
 
             // Append the product row div to the PurchaseTableBodyDiv
             PurchaseProductTableBodyDiv.appendChild(productRow);
         });*/
    }

    // search  bar functionality for Binders report data
    document.getElementById('AdditveReportDataPurchaseSearch').addEventListener('input', function () {
        var searchValue = this.value.toLowerCase();

        var rows = document.getElementById('PurchaseAdditiveReportDataBodyDiv').querySelectorAll('.EachAdditiveDataRow');

        var matchingRows = [];

        rows.forEach(function (row) {
            // Hide all rows initially
            row.style.display = 'none';

            // Show matching rows
            if (row.textContent.toLowerCase().includes(searchValue)) {
                row.style.display = '';
                matchingRows.push(row);
            }
        });

        // console.log("Matching Rows:", matchingRows);
    });

    function ShowAllFollowUps() {
        var CustomerName = document.getElementById('popCustNameText').textContent;

        var CustomerData = State.Customers.find((eachCustomer) => eachCustomer.Customername === CustomerName);


        var Follow_Ups = CustomerData.FollowUps;
        // Sort in descending order based on InsertedTime
        Follow_Ups.sort((a, b) => b.InsertedTime - a.InsertedTime);

        console.log("CustomerData followups = ", Follow_Ups);
        var FollowUpsCollections = document.getElementById('FollowUpsCollections');
        FollowUpsCollections.innerHTML = ""; // Clear the existing content

        Follow_Ups.forEach((followUp) => {
            // Convert timestamp to Date object
            const dateObject = new Date(followUp.InsertedTime);

            var virtualItem = `
        <div class="EachFollowUp">
            <p><strong>Serial No: </strong>${followUp.Serial_No}</p>
            {{!-- <p class="FollowUpInsertedtext">Inserted at: ${formattedDateTime}</p> --}}
             <p class="FollowUpInsertedtext">Inserted at: ${dateObject.getFullYear()}-${String(dateObject.getMonth() + 1).padStart(2, '0')}-${String(dateObject.getDate()).padStart(2, '0')} ${String(dateObject.getHours()).padStart(2, '0')}:${String(dateObject.getMinutes()).padStart(2, '0')}:${String(dateObject.getSeconds()).padStart(2, '0')}</p>
            <p><strong>Customer Name: </strong>${followUp.Customer_Name}</p>
            <p><strong>Purpose: </strong>${followUp.Purpose}</p>
            <p><strong>Connection Type: </strong>${followUp.Connection_Type}</p>
            <div class="FollowUpCommentSection">
                <p><strong>Comment: </strong>${followUp.Comment}</p>
            </div>
            <p><strong>Contact Person: </strong>${followUp.Contact_Person}</p>
            <p><strong>Employee Name: </strong>${followUp.EmployeeName}</p>
        </div>
    `;

            FollowUpsCollections.innerHTML += virtualItem; // Append the new content
        });
    }


    // search  bar functionality for Binders report data
    document.getElementById('FollowUpSearch').addEventListener('input', function () {
        var searchValue = this.value.toLowerCase();

        var rows = document.getElementById('FollowUpsCollections').querySelectorAll('.EachFollowUp');

        var matchingRows = [];

        rows.forEach(function (row) {
            // Hide all rows initially
            row.style.display = 'none';

            // Show matching rows
            if (row.textContent.toLowerCase().includes(searchValue)) {
                row.style.display = '';
                matchingRows.push(row);
            }
        });

        // console.log("Matching Rows:", matchingRows);
    });









</script>


<style>
    /*Loader */
    #loader-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
        display: none;
    }

    .loader {
        display: flex;
        align-items: center;
    }

    .bar {
        display: inline-block;
        width: 3px;
        height: 20px;
        background-color: rgba(255, 255, 255, .5);
        border-radius: 10px;
        animation: scale-up4 1s linear infinite;
    }

    .bar:nth-child(2) {
        height: 35px;
        margin: 0 5px;
        animation-delay: .25s;
    }

    .bar:nth-child(3) {
        animation-delay: .5s;
    }

    @keyframes scale-up4 {
        20% {
            background-color: #ffff;
            transform: scaleY(1.5);
        }

        40% {
            transform: scaleY(1);
        }
    }


    /*Loader Ends*/


    /* Target the scrollbar */
    ::-webkit-scrollbar {
        width: 12px;
        /* Set the width of the scrollbar */
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background-color: rgb(101, 101, 101);
        /* Set the color of the scrollbar handle */
        border-radius: 6px;
        /* Set the border radius of the scrollbar handle */
    }

    /* Track */
    ::-webkit-scrollbar-track {
        background-color: #1E2226;
        /* Set the color of the scrollbar track */
    }

    .Container {
        width: 100%;
    }

    section {
        overflow-x: hidden;
    }

    .HeaderMainALl {
        background-color: #1E2226;
        margin: 0;
    }

    .CustomerMainDiv {
        background-color: #1E2226;
        padding: 2rem;
        width: 100%;
    }

    .custom-container {
        width: 100%;
        max-width: 1720px;
        /* Set your desired max-width */
        margin-right: auto;
        margin-left: auto;
        padding-right: 15px;
        padding-left: 15px;
    }

    .CustomerHeaderDiv {
        display: flex;
        justify-content: space-between;
        margin: 1rem 0;
    }

    .CustomersTitle {
        font-size: 3rem;
        font-weight: 700;
        color: #DADADA;
    }

    .addCustomerButton {
        padding: 1rem 1rem;
        background-color: #333;
        font-size: 1.5rem;
        font-weight: 600;
        color: #DADADA;
    }

    .addCustomerButton:hover {
        background-color: #1e1e1e;
    }

    .addCustomerButton span {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .CustomerCardsArea {
        margin: 2rem 0;
        display: flex;
        gap: 2rem;
    }

    .OneCard {
        background-color: #2C3136;
        border-radius: 2rem;
        min-width: 22rem;
    }

    .OneCardIcon {
        margin-left: 2rem;
        margin-top: 2rem;
    }

    .custom-svg {
        width: 30px;
    }

    .OneCardHeader {
        color: #DADADA;
        text-align: left;
        padding-left: 2rem;
        padding-top: 1rem;
        font-size: 1.5rem;
        font-weight: 500;
    }

    .OneCardCount {
        color: #DADADA;
        text-align: right;
        padding: 1rem 2rem;
        font-size: 2.5rem;
        font-weight: 600;
    }

    .MainTableDivArea {
        margin-top: 5rem;
    }

    .MainTableHeaderDiv {
        display: flex;
        justify-content: end;
        gap: 1rem;
        margin-right: 2rem;
    }

    /* Style for the search input container */
    .searchDiv {
        position: relative;
        width: 300px;
        /* Adjust the width as needed */
    }

    /* Style for the search input */
    .search-input {
        width: 100%;
        padding: 10px;
        padding-left: 40px;
        /* Space for the icon */
        box-sizing: border-box;
        border: 1px solid #DADADA;
        border-radius: 10px;
        font-size: 20px;
        font-weight: 600;
        background-color: transparent;
        color: #DADADA;
    }

    /* Style for the search icon */
    .search-icon {
        position: absolute;
        top: 50%;
        left: 10px;
        transform: translateY(-50%);
        cursor: pointer;
    }

    .sortBySection {
        display: flex;
        gap: 1rem;
        width: 450px;
        justify-content: end;
    }

    .sortBySection p {
        margin: 0;
        font-size: 20px;
        font-weight: 600;
        color: #DADADA;
        margin-top: 8px;
    }

    .sortBySection select {
        width: 20rem;
        padding: 10px;
        padding-left: 40px;
        /* Space for the icon */
        box-sizing: border-box;
        border: 1px solid #DADADA;
        border-radius: 10px;
        font-size: 20px;
        font-weight: 600;
        background-color: transparent;
        color: #DADADA;
    }

    .sortBySection option {
        font-size: 20px;
        font-weight: 600;
        background-color: #333;
        margin: .5rem 0;
    }

    .TableSecion {
        margin-bottom: 10rem;
        max-height: 80vh;
        overflow-y: auto;
        position: relative;
        margin-top: 1rem;
    }



    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-size: 20px;
        font-weight: 600;
        color: #DADADA;
    }

    th,
    td {
        border: 2px solid #333333;
        padding: 30px 10px;
        text-align: center;
    }

    th {
        background-color: #333333;
        color: #B3B7BA;
        cursor: pointer;
        padding: 1rem 0;
    }

    #CuTable {
        width: 100%;
        border-collapse: collapse;
    }

    tr {
        padding: 0.5rem 0;
    }


    tr:nth-child(even) {
        background-color: #2C3136;
    }

    tr:hover {
        background-color: #4A5156;
        cursor: pointer;
    }

    #CuTable thead {
        position: sticky;
        top: 0;
        z-index: 1;
    }

    /*Creating New Customer*/

    .CustomerCreationPopup {
        background: rgba(0, 0, 0, 0.7);
        display: none;
        /*none*/
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 2;
    }

    .popup {
        background: #EEF0FD;
        width: 50rem;
        padding: 20px;
        border-radius: 10px;
        position: relative;
        max-height: 80vh;
        overflow-y: auto;
    }

    .CCPopup {
        padding: 2rem;
        background-color: #323940;
        color: #B3B7BA;
        font-family: sans-serif;
        width: 55rem;
        padding: 20px;
        border-radius: 10px;
        position: relative;
        height: 90vh;
        overflow-y: auto;
    }

    .MainPopupTopsection {
        display: flex;
        justify-content: end;
        align-items: start;
    }

    .MainPopupCloseIcon {
        width: 25px;
    }

    .CreateCustomerHeaderDiv {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .popCardHeaderText {
        margin: 0;
        font-size: 25px;
        font-weight: 700;
    }

    .CCMainSection {
        display: flex;
        justify-content: space-between;
        align-items: start;
        width: 100%;
        padding: 2rem 0;
    }

    .CCFirstLeft {
        width: 55%;
        height: 5rem;
    }


    .CCNameSection,
    .CCAddressSection,
    .CCLocationSection {
        width: 100%;
        display: flex;
        justify-content: start;
        margin-top: 1rem;
    }

    .ccNameText,
    .ccAdressText,
    .ccLocationText,
    .ccContactNameText,
    .CcAddNewContactText,
    .OrderIDNumber {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
        word-wrap: normal;
        margin-top: 8px;
    }

    .CCInputname,
    .CCInputLocations,
    #OrderName,
    #customer_contact,
    #NewFormulaNameInput,
    #NewFromulaQtyInput,
    #NewProductUnit,
    .NewOrderNewFormulaNameSection button,
    #NewReadyProductsInput,
    #NewReadyProductsQtyInput,
    #NewReadyProductUnit,
    .PopReadyProductsInputSection button {
        background-color: #3B444C;
        margin: 0 1rem;
        padding: 0.5rem 1rem;
        border-radius: 10px;
        width: 15rem;
        color: #B3B7BA;
        font-family: sans-serif;
        font-size: 20px;
        font-weight: 600;
        border: 1px solid #B3B7BA;
    }

    #NewFormulaNameInput {
        width: 25rem;
    }

    #NewFromulaQtyInput,
    #NewProductUnit {
        width: 7rem;
    }

    .NewOrderNewFormulaNameSection {
        display: flex;
        justify-content: space-between;
        margin-bottom: 2rem;
    }

    .NewOrderNewFormulaNameSection button {
        width: 7rem;
    }

    .CCAddressInput {
        background-color: #3B444C;
        margin: 0 1rem;
        padding: 0.5rem 1rem;
        border-radius: 10px;
        width: 19.5rem;
        color: #B3B7BA;
        font-family: sans-serif;
        font-size: 20px;
        font-weight: 600;
        border: 1px solid #B3B7BA;
    }

    .CCInputLocations {
        width: 19.5rem;
    }

    .CcSalesEXSection,
    .ccContactNameSection {
        display: flex;
        margin-top: 1rem;
    }

    .CCSalesEx,
    .CCCo-ordinator {
        background-color: #3B444C;
        margin: 0 1rem;
        padding: 0.5rem 1rem;
        border-radius: 10px;
        width: 14rem;
        color: #B3B7BA;
        font-family: sans-serif;
        font-size: 20px;
        font-weight: 600;
        border: 1px solid #B3B7BA;
    }

    .CCCo-ordinator {
        width: 12rem;
    }

    .ccHR {
        background-color: #B3B7BA;
        margin-top: 330px;
    }

    .CCContactPeronSection {
        padding-top: 2rem;
    }

    .ccEachContact {
        margin: 3rem 0;
    }

    .ccContactPersonNameInput {
        background-color: #3B444C;
        margin: 0 1rem;
        padding: 0.5rem 1rem;
        border-radius: 10px;
        width: 20rem;
        color: #B3B7BA;
        font-family: sans-serif;
        font-size: 20px;
        font-weight: 600;
        border: 1px solid #B3B7BA;
    }

    .CCnumberSection {
        display: flex;
        gap: 2rem;
        margin-top: 1.5rem;
    }

    .CallIcon {
        width: 30px;
        height: 30px;
        margin-top: 7px;
    }

    .ccContactNumberSection {
        display: flex;
    }

    .ccContactPersonNumberInput,
    .ccContactPersonWhatsappNumberInput {
        background-color: #3B444C;
        margin: 0 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 10px;
        width: 14rem;
        color: #B3B7BA;
        font-family: sans-serif;
        font-size: 20px;
        font-weight: 600;
        border: 1px solid #B3B7BA;
    }

    .ccAddNewContact {
        margin-top: 2rem;
        display: flex;
        justify-content: start;
        gap: 1rem;
        align-items: center;
    }

    .CCAddnewcontactBtn {
        background-color: #3B444C;
        color: #B3B7BA;
        border: 1px solid #B3B7BA;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 3rem;
        height: 3rem;
    }

    .CCAddnewcontactBtn p {
        margin: 0;
        font-size: 3rem;
        padding: 0.5rem;
        font-weight: 800;
        margin-top: -5px;
    }

    .CcAddNewContactText {}

    .ccContactPersonCounrtryCodeInput,
    .ccContactPersonWhatsAppCounrtryCodeInput {
        background-color: #3B444C;
        margin: 0 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 10px;
        width: 7rem;
        color: #B3B7BA;
        font-family: sans-serif;
        font-size: 20px;
        font-weight: 600;
        border: 1px solid #B3B7BA;
    }


    .popSaveBtnSection,
    .popCommentSaveBtnSection {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 2rem 0;
    }

    .popSaveBtnSection button {
        background-color: #3B444C;
        color: #B3B7BA;
        border: #B3B7BA 1px solid;
        border-radius: 10px;
        padding: 0.5rem 20%;
        font-size: 25px;
        font-weight: 700;
    }

    .CustomerActionBTNSection {
        display: flex;
        gap: 1rem;
    }

    .UploadLedgerDataPopUp,
    .EachCustomerDetailsPopUp {
        background: rgba(0, 0, 0, 0.7);
        display: none;
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 2;
    }

    .UpLedPopUp {
        padding: 2rem;
        background-color: #323940;
        color: #B3B7BA;
        font-family: sans-serif;
        width: 30rem;
        border-radius: 10px;
        position: relative;
        height: 35rem;
        overflow-y: auto;
    }

    .UpnameSection {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        padding: 1rem 0;
    }

    .UpLedInputname {
        width: 90%;
    }

    .UpLedBTNupload {
        color: #323940;
        background-color: #B3B7BA;
        font-size: 20px;
        font-weight: 600;
        padding: 0.5rem 2rem;
        border-radius: 10px;
    }

    #CustomerNameUploadautocomplete-list {
        position: absolute;
        z-index: 3;
        max-height: 100px;
        overflow-y: auto;
        padding: 1rem 2rem;
        background-color: #1e1e1e;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-top: 90px;
        margin-left: 25px;
        font-size: 18px;
    }

    .LedgerConditions {
        text-align: center;
        font-size: 15px;
    }

    .EachCustPopup {
        padding: 2rem;
        background-color: #323940;
        color: #B3B7BA;
        font-family: sans-serif;
        width: 90%;
        border-radius: 10px;
        position: relative;
        max-height: 90vh;
        overflow-y: auto;
        margin: 2rem 0;
    }

    .PopCustomerName {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .popCustNameText {
        font-size: 25px;
        font-weight: 700;
    }

    .popupEachCustMainSec {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2rem;
        gap: 2rem;
    }

    .PopAddressText {
        font-size: 20px;
        font-size: 600;
    }

    .PopontentText {
        font-size: 25px;
        font-weight: 600;
        margin-left: 1rem;
    }

    .popUpEachCustLeftSec {
        width: 35rem;
    }

    .popUpEachCustRightSec {
        width: 23rem;
    }

    .PopCustomerMainActionBTnSec {
        display: flex;
        justify-content: space-evenly;
    }

    .PurchasePaymentAnalysisBTN,
    .PurchaseDetailsBTN,
    .FollowUpSummeryBTN {
        padding: 1rem 2rem;
        border-radius: 27px;
        font-size: 20px;
        font-weight: 700;
        border: 1px solid gray;
        background-color: #B3B7BA;
    }

    .PopCustomerMainActionBTnSec button:hover {
        background-color: #3b4046;
        color: #B3B7BA;
    }

    .ActiveActionBTN {
        background-color: #2e3135;
        color: #B3B7BA;
    }

    .PurchasePaymentAnalysisDiv,
    .purchaseDetailsDiv,
    .CustomerPurchaseDetails {
        display: flex;
        flex-direction: column;
        margin: 1rem;
        border: 1px solid gray;
        border-radius: 10px;
        padding: 1.5rem;
        gap: 4rem;
    }

    .PurchaseSubButtonsDiv {
        display: flex;
        gap: 3rem;
        justify-content: center;
    }

    .PusrchaseSubButton {
        width: fit-content;
        padding: 0.5rem 2rem;
        background: transparent;
        border: 1px solid gray;
        outline: none;
        color: #B3B7BA;
        font-size: 20px;
        font-weight: 600;
        border-radius: 15px;
    }

    .PusrchaseSubButton:hover {
        background-color: #3b4046;
        color: #B3B7BA;
    }

    .PusrchaseSubButtonActive {
        background-color: #24272b;
        color: #B3B7BA;
    }


    .BarGraph {
        padding-bottom: 5rem;
    }

    .purchaseDetailsDiv,
    .CustomerPurchaseDetails {
        display: none;
        gap: 1rem;
    }

    .PurchaseDetailsSearchSection {
        display: flex;
        justify-content: end;
        align-items: center;
    }

    .PurchaseDetailsSearchSectionForProductGroups {
        justify-content: space-between;
        margin-top: 4rem;
        align-items: center;
    }

    .PurchaseDetailsSearchSectionForProductGroups p {
        margin: 0;
    }

    .PurchaseSearchInput {
        padding: 1rem 1rem;
        border-radius: 10px;
        background-color: transparent;
        font-size: 15px;
        font-weight: 600;
        color: #B3B7BA;
        border: 1px solid gray;
    }

    .PurchaseTableFormat {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 3fr 0.5fr 0.5fr 1fr 1fr 1fr 1fr 1fr;
        align-items: center;
        gap: 10px;
        padding: 15px 24px;
        align-content: center;
    }

    .PurchaseTableFormat p {
        margin-bottom: 0;
        text-align: center;
    }

    .PurchaseTableHeader {
        background: #1d1d1d;
        font-size: 17px;
        font-weight: 600;
        border: 1px solid gray;
    }

    .PurchaseTableBodyDiv {
        display: flex;
        flex-direction: column;
        max-height: 95vh;
        overflow-y: auto;
    }

    .EachTableRow {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 5fr 1fr 1fr 1fr 1fr;
        align-items: start;
        gap: 10px;
        padding: 15px 24px;
        align-content: center;
        border: 1px solid gray;
    }

    .EachTableRow p {
        text-align: center;
        margin-bottom: 0;
        font-size: 18px;
        font-weight: 600;
    }

    .EachItemDiv {
        display: grid;
        grid-template-columns: 3fr 0.5fr 0.5fr 1fr;
        padding-bottom: 10px;
        align-items: start;
    }

    .PurchaseTableHR {
        margin: 0;
        margin-bottom: 1rem;
    }

    .ledgerCollections {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
    }

    .EachLedgerItem {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 2rem;
    }

    .EachLedgerItem p {
        margin: 0;
        margin-bottom: 5px;
        font-size: 15px;
        font-weight: 600;
    }

    .ExcelIcon {
        width: 5rem;
    }

    .LedgerDownloadBtn {
        border: none;
        text-decoration: none;
        padding: 1rem 2rem;
        background: #b3b7ba;
    }

    .customer-suggestions-option {
        cursor: pointer;
        padding: 8px;
    }

    .customer-suggestions-option:hover {
        background-color: #f0f0f0;
    }

    #customerNames {
        display: none;
        max-height: 10rem;
        overflow-y: auto;
    }

    #customerNames option {
        padding: 0.5rem;
        font-weight: 600;
        font-size: 18px;
        cursor: pointer;
    }

    #ProductPurchaseDetails,
    #BinderPurchaseDetails,
    #AdditivesPurchaseDetails {
        display: none;
    }

    .ProductPurchaseTableFormat {
        margin-top: 2rem;
        display: grid;
        grid-template-columns: 1fr 4fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
        align-items: center;
        gap: 10px;
        padding: 15px 24px;
        align-content: center;
    }

    .ProductPurchaseTableFormat p {
        margin-bottom: 0;
        text-align: center;
    }

    .ProductGroupPurchaseTableFormat {
        margin-top: 1rem;
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    }

    .ProductGroupsText {
        font-size: 18px;
        font-weight: 600;
    }

    .PurchaseReportTableProducts,
    .PurchaseReportTableProductGroups,
    .PurchaseReportTableBinders,
    .PurchaseReportTableAdditives {
        display: flex;
        flex-direction: column;
        max-height: 95vh;
        overflow-y: auto;
    }

    .EachProductGroupRow,
    .EachAdditiveDataRow,
    .EachBinderDataRow {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
        align-items: start;
        gap: 10px;
        padding: 15px 24px;
        align-content: center;
        border: 1px solid gray;
    }

    .EachProductGroupRow,
    .EachAdditiveDataRow,
    .EachBinderDataRow {
        grid-template-columns: 1fr 1fr 1fr;
    }

    .EachProductRow p,
    .EachProductGroupRow p,
    .EachAdditiveDataRow p,
    .EachBinderDataRow p {
        text-align: center;
        margin-bottom: 0;
        font-size: 15px;
        font-weight: 600;
        margin: 1rem 0;
    }

    .EachAdditiveDataRow,
    .EachBinderDataRow {
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    }

    .FollowUpSummeryDiv {
        margin-top: 2rem;
    }

    .FollowUpsCollections {
        margin-top: 2rem;
        border: 1px solid gray;
        border-radius: 15px;
        padding: 2rem;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr;
        row-gap: 1rem;
        column-gap: 1rem;
    }

    .EachFollowUp {
        border: 1px solid gray;
        border-radius: 15px;
        padding: 1rem;
    }

    .EachFollowUp {
        font-size: 16px;
    }

    .EachProductRow {
        display: flex;
        flex-direction: column;
        border-bottom: 1px solid gray;
    }

    .EachInventoryRow {
        display: grid;
        grid-template-columns: 3fr 12fr 1fr 1fr;
        align-items: start;
        /* gap: 10px;*/
        align-content: center;
        /*  border: 1px solid gray;*/
    }

    .EachproductMonthRow {
        display: grid;
        align-items: start;
        /*  gap: 10px;*/
        align-content: center;
        /*border: 1px solid gray;*/
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    }

    .product-group-div {
        display: grid;
        grid-template-columns: 1.8fr 2.7fr 14fr;
    }

    .product-group-div-sum {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    }
</style>