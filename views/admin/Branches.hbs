<section class="AdminPage">
    <div id="loader-container">
        {{!-- <div class="loader"></div> --}}
        <div class="loader">
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
        </div>
    </div>

    {{!-- Add User Pop up start here --}}
    <div id="popup-container" class="popup">
        <div class="popup-content">
            <!-- Your form goes here -->
            <form id="AddNewBranchForm" action="/admin/addNewBranch" method="post">
                <div class="AddUserFormDiv">
                    <div class="AddUserHeaderDiv">
                        <p id="AddUserHeadingText" class="AddUserHeading">Add New Branch</p>
                        <div id="AddUserCloseBtn" class="AddUserCloseBtn">
                            <p>X</p>
                        </div>
                    </div>
                    <hr>
                    <div class="AddUserBodyDiv">
                        <div class="AddUserEachSectionDiv">
                            <p class="AddUserLabel">Branch Name</p>
                            <input type="text" required placeholder="Enter Branch name" id="BranchName"
                                name="BranchName" class="AddUserINP">
                            <input type="text" hidden aria-disabled="true" name="BranchID" id="BranchID">
                        </div>
                        <div class="AddUserEachSectionDiv">
                            <p class="AddUserLabel">Location</p>
                            <input type="text" required placeholder="Enter Location" id="Location" name="Location"
                                class="AddUserINP">
                        </div>
                        <div class="AddUserEachSectionDiv">
                            <p class="AddUserLabel">Contact</p>
                            <input type="text" name="Contact" placeholder="eg. 971501234567" class="AddUserINP" required
                                id="contactInput">
                        </div>
                        <div class="AddUserEachSectionDiv AddBranchesubmitDiv">
                            <input type="submit" id="SBTBTNbranch" class="btn AddUserBTNSubmit" value="Add Branch">
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    {{!-- popup for view branch --}}
    <div id="ViewBranchPopup" class="popup">
        <div class="ViewBranchDiv">
            <div class="ViewBRheader">
                <div onclick="hidePopUpTOViewBranch()" id="ViewBranchCloseBtn"
                    class=" AddUserCloseBtn ViewBranchCloseBtn">
                    <p>X</p>
                </div>
            </div>
            <div class="ViewBranchMain">
                <div class="BranchMainHeader">
                    <p id="viewBranchName" class="ViewBranchaName"></p>
                    <p id="ViewBranchID" hidden></p>
                    <div class="BranchContactSec">
                        <p>Contact: </p>
                        <p id="ContactNumber"></p>
                    </div>
                </div>
                <div class="ViewBranchLocationDiv">
                    <p class="ViewBranchaLocation">Location:</p>
                    <p id="ViewBranchaLocation" class="ViewBranchaLocation">East Cost DB st</p>
                </div>
                <hr>
                <div class="ViewBranchDirSlection">
                    <button id="EmployeeStaffBTN">Employee & Staff Directory</button>
                    <button id="InventoryBTN">Inventory</button>
                </div>
                <div class="EmployeeAndStaffArea">
                    <div class="ManagerSection">
                        <p>Manager:</p>
                        <p id="Managername"></p>
                    </div>
                    <div class="search-container">
                        <input type="search" id="searchInput" placeholder="Search...">
                    </div>
                    <div class="employeeTable">
                        <table class="custom-table employee_table">
                            <thead>
                                <tr>
                                    <th id="nameHeader" data-order="">
                                        Name
                                        <i class="fas fa-sort"></i>
                                    </th>
                                    <th id="designationHeader" data-order="">
                                        Designation
                                        <i class="fas fa-sort"></i>
                                    </th>
                                    <th>
                                        Contact
                                    </th>
                                    <th>
                                        Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="EmployeeTable">
                                <!-- Table content will be rendered here -->
                            </tbody>
                        </table>

                    </div>
                </div>
                <div class="Inventory">
                    <div class="USMainHeaderDiv">
                        <div class="USHeaderEachItemDiv USHeaderEachItemDivActive " onclick="changeClass(this)">
                            <p>Products</p>
                        </div>
                        {{!--
                        </a> --}}
                        {{!-- <a class="USAtag" href="/BinderStockUpdate"> --}}
                            <div class="USHeaderEachItemDiv " onclick="changeClass(this)">
                                <p>Binders</p>
                            </div>
                            {{!--
                        </a> --}}
                        {{!-- <a class="USAtag" href="/AdditiveStockUpdate"> --}}
                            <div class="USHeaderEachItemDiv" onclick="changeClass(this)">
                                <p>Additives</p>
                            </div>
                            {{!--
                        </a> --}}
                    </div>

                    <div id="productStocks" class=" productStocks INVMainContentDiv">
                        <div class="search-container">
                            <input type="search" id="ProductsearchInput" placeholder="Search...">
                        </div>
                        <table id="ProductTable" class="display employee_table">
                            <thead>
                                <tr class="text-center">
                                    <th class="text-center" style="font-size: 20px;">Item</th>
                                    <th class="text-center" style="font-size: 20px;">Old Stock</th>
                                    <th class="text-center" style="font-size: 20px;">Standard Unit</th>
                                    <th class="text-center" style="font-size: 20px;">New Stock & Action</th>
                                </tr>
                            </thead>
                            <tbody id="ProductTableBody">

                            </tbody>
                        </table>
                    </div>

                    <div id="BinderStocks" class="BinderStocks INVMainContentDiv">
                        <div class="search-container">
                            <input type="search" id="BindersearchInput" placeholder="Search...">
                        </div>
                        <table id="BinderTable" class="display employee_table">
                            <thead>
                                <tr class="text-center">
                                    <th class="text-center" style="font-size: 20px;">Item</th>
                                    <th class="text-center" style="font-size: 20px;">Old Stock</th>
                                    <th class="text-center" style="font-size: 20px;">New Stock & Action</th>
                                </tr>
                            </thead>
                            <tbody id="BinderTableBody">

                            </tbody>
                        </table>
                    </div>

                    <div id="AdditivesStoks" class=" AdditivesStoks INVMainContentDiv">
                        <div class="search-container">
                            <input type="search" id="AdditivesearchInput" placeholder="Search...">
                        </div>
                        <table id="AdditiveTable" class="display employee_table">
                            <thead>
                                <tr class="text-center">
                                    <th class="text-center" style="font-size: 20px;">Item</th>
                                    <th class="text-center" style="font-size: 20px;">Old Stock</th>
                                    <th class="text-center" style="font-size: 20px;">New Stock & Action</th>
                                </tr>
                            </thead>
                            <tbody id="AdditiveTableBody">

                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <aside class="ADSidebar">
        <div class="ADSidebarLogoDiv">
            <img class="AdLogo" src="/images/Logo/MegaPaintsLogo.png" alt="">
        </div>
        <div class="ADSelectioSideBarDIv">
            <a href="/admin">
                <div class="Category ">
                    <p class="ADDelectionSideBarLabel">Category</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Sub-Category">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Sub-Category</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Product">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Product</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Additives">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Additives</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Binders">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Binders</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Branches">
                <div class="Category ADactiveButton">
                    <p class="ADDelectionSideBarLabel">Branches</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Users">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Users</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>


            <div class="ADAccount">
                <p class="ADDelectionSideBarLabel">Account</p>
                <img src="/images/Icons/MoreSelect.png" alt="" class="ADAccountIcon">
            </div>

            <div class="ADAccountExpandDiv">
                <a href="/admin/change-password">
                    <div class="ADlogoutDiv">
                        <p>Change Password</p>
                        {{!-- <img src="/images/Icons/logout.png" alt="" class="ADLogoutIcon"> --}}
                    </div>
                </a>
                <a href="/admin/logout">
                    <div class="ADlogoutDiv">
                        <p>Logout</p>
                        <img src="/images/Icons/logout.png" alt="" class="ADLogoutIcon">
                    </div>
                </a>
            </div>

        </div>
    </aside>
    <section class="AdMainArea">
        <div class="ADMainAreaDiv">
            <div class="ADMainAreaHeaderDiv">
                <p class="ADMainAreaHeader">Branches</p>
            </div>
            <div class="ADMainAddButtonDiv">
                {{!-- <a href="/admin/addUser"> --}}
                    <div id="ADMainAddButton" class="ADMainAddButton">
                        <p>Add New </p>
                        <img src="/images/Icons/add.png" alt="" class="ADAddNewIcon">
                    </div>
                    {{!--
                </a> --}}
            </div>

            <p class="AddError text-center" id="AddErrorPTag" style="color: red;">{{Error}}</p>

            <div class="ADMainTableDiv">
                <table id="" class="ADMainTable  table table-bordered text-center ADcustom-border">
                    <thead class="ADTableHead">
                        <tr class="ADTableHeadTR">
                            <th>Branch Name</th>
                            <th>Location</th>
                            <th>Contact</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="tableBody">
                        {{!-- {{#if Branches}}
                        {{#each Branches}}
                        <tr>
                            <td>{{this.UserID}}</td>
                            <td>{{this.UserName}}</td>
                            <td>{{this.Designation}}</td>
                            <td>{{this.Contact}}</td>
                            <td><a href="/admin/EditUser/{{this.UserID}}" class="btn btn-primary">Edit</a></td>
                        </tr>
                        {{/each}}
                        {{else}}
                        <tr>
                            <td class="ADSubCategoryNotAvailable" colspan="4">No Branches are Added</td>
                        </tr>
                        {{/if}} --}}
                    </tbody>
                </table>


            </div>

        </div>

    </section>
</section>


<script>
    // alert(AddingError);

    var AllBranches = [];
    var AllInventory = {};
    var AllUsers = [];

    // JavaScript to show the popup
    const addButton = document.getElementById('ADMainAddButton');
    const popupContainer = document.getElementById('popup-container');
    const AddUserCloseBtn = document.getElementById('AddUserCloseBtn');
    const ViewBranchPopup = document.getElementById('ViewBranchPopup');

    // Get references to the elements
    const contactInput = document.getElementById('contactInput');

    // const alternateContactInput = document.getElementById('alternateContactInput');



    // Function to show the loader
    function showLoader() {
        document.getElementById('loader-container').style.display = 'flex';
    }

    // Function to hide the loader
    function hideLoader() {
        document.getElementById('loader-container').style.display = 'none';
    }




    document.addEventListener("DOMContentLoaded", function () {
        showLoader()
        checkForError();
        loadAllUser();

        // buttons

        var employeeStaffBtn = document.getElementById("EmployeeStaffBTN");
        var inventoryBtn = document.getElementById("InventoryBTN");
        var employeeStaffDiv = document.querySelector(".EmployeeAndStaffArea");
        var inventoryDiv = document.querySelector(".Inventory");

        // Show employee and staff div at loading time
        employeeStaffDiv.style.display = "block";
        employeeStaffDiv.classList.add("slide-in");
        employeeStaffBtn.classList.add("activeBtn");

        employeeStaffBtn.addEventListener("click", function () {
            // Show employee and staff div, hide inventory div
            employeeStaffDiv.style.display = "block";
            inventoryDiv.style.display = "none";
            // Add animation class
            employeeStaffDiv.classList.add("slide-in");
            // Remove animation class after animation is complete
            setTimeout(function () {
                employeeStaffDiv.classList.remove("slide-in");
            }, 500);

            // Highlight the selected button
            employeeStaffBtn.classList.add("activeBtn");
            inventoryBtn.classList.remove("activeBtn");
        });

        inventoryBtn.addEventListener("click", function () {
            // Show inventory div, hide employee and staff div
            inventoryDiv.style.display = "block";
            employeeStaffDiv.style.display = "none";
            // Add animation class
            inventoryDiv.classList.add("slide-in");
            // Remove animation class after animation is complete
            setTimeout(function () {
                inventoryDiv.classList.remove("slide-in");
            }, 500);

            // Highlight the selected button
            inventoryBtn.classList.add("activeBtn");
            employeeStaffBtn.classList.remove("activeBtn");
            populateProductTables();
        });

        // employee table
        var nameHeader = document.getElementById("nameHeader");
        var designationHeader = document.getElementById("designationHeader");

        function renderUsersTable(data) {
            console.log(" render table data", data);
            var tableBody = document.getElementById("EmployeeTable");
            tableBody.innerHTML = "";

            data.forEach(function (row) {
                console.log("rows;", row);
                var tr = document.createElement("tr");
                tr.innerHTML = `
                        <td>${row.UserName}</td>
                        <td>${row.Designation}</td>
                        <td>${row.Contact}</td>
                        <td>
                            <button>Edit</button>
                            <button>Delete</button>
                        </td>
                    `;
                tableBody.appendChild(tr);
            });
        }

        function sortData(field, order) {
            AllUsers.sort(function (a, b) {
                var valueA = a[field].toUpperCase();
                var valueB = b[field].toUpperCase();

                if (valueA < valueB) {
                    return order === "asc" ? -1 : 1;
                } else if (valueA > valueB) {
                    return order === "asc" ? 1 : -1;
                } else {
                    return 0;
                }
            });

            renderUsersTable(AllUsers);
        }

        nameHeader.addEventListener("click", function () {
            sortData("UserName", nameHeader.dataset.order === "asc" ? "desc" : "asc");
            nameHeader.dataset.order = nameHeader.dataset.order === "asc" ? "desc" : "asc";
            designationHeader.dataset.order = ""; // Reset the order for other headers
        });

        designationHeader.addEventListener("click", function () {
            sortData("Designation", designationHeader.dataset.order === "asc" ? "desc" : "asc");
            designationHeader.dataset.order = designationHeader.dataset.order === "asc" ? "desc" : "asc";
            nameHeader.dataset.order = ""; // Reset the order for other headers
        });

        // Initial rendering of the table

    });


    document.getElementById("searchInput").addEventListener("input", function () {
        searchTable();
    });

    function searchTable() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("EmployeeTable");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {
            var found = false; // Flag to determine if the search term is found in any column

            // Loop through the columns (td elements) in the current row
            for (var j = 0; j < tr[i].getElementsByTagName("td").length; j++) {
                td = tr[i].getElementsByTagName("td")[j];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        found = true;
                        break; // Exit the loop if the search term is found in any column
                    }
                }
            }

            // Set display style based on the search result
            if (found) {
                tr[i].style.display = "";
            } else {
                tr[i].style.display = "none";
            }
        }
    }



    function loadAllUser() {
        fetch('/admin/UsersAndBranches/Api')
            .then(response => response.json())
            .then(data => {
                AllBranches = data.Branches;
                AllUsers = data.Users;
                console.table(AllBranches);
                console.table(AllUsers);
                loadAllInventory();
                displayFilteredBranches(AllBranches);


            })
            .catch(error => {
                console.log('Error:', error);
            });
    }

    function loadAllInventory() {
        fetch('/admin/Inventory/Api')
            .then(response => response.json())
            .then(Inventory => {
                AllInventory = Inventory;
                console.log("AllInventory=", AllInventory);
                // displayFilteredBranches(AllBranches);


            })
            .catch(error => {
                console.log('Error:', error);
            });
    }

    function checkForError() {
        var AddErrorPTag = document.getElementById('AddErrorPTag').textContent;
        if (AddErrorPTag) {
            alert(AddErrorPTag);
            popupContainer.style.display = 'flex';
        }
    }



    function displayFilteredBranches(Branches) {
        const tableBody = document.querySelector('#tableBody'); // Assuming you have added an id "tableBody" to the <tbody> element

        // Clear the existing table body
        tableBody.innerHTML = '';

        //<td><a href="/admin/EditUser/{{this.UserID}}" class="btn btn-primary">Edit</a></td>
        // Check if filtered subcategories exist
        if (Branches.length > 0) {
            // Iterate over each filtered subcategory and create table rows
            Branches.forEach(Branch => {
                const row = document.createElement('tr');
                row.innerHTML = `
          <td>${Branch.BranchName}</td>
          <td>${Branch.Location}</td>
          <td>${Branch.Contact}</td>
          <td>
            <button class="btn btn-primary" onclick="EditBranch('${Branch._id}')">Edit</button>
            <button class="btn btn-warning" onclick="ViewBranch('${Branch.BranchName}')">View more</button>
          </td>

          `;
                tableBody.appendChild(row);
            });
        } else {
            // Display a message when no filtered subcategories are available
            const row = document.createElement('tr');
            row.innerHTML = `
          <td class="ADSubCategoryNotAvailable" colspan="5">No Branches is Added</td>
          `;
            tableBody.appendChild(row);
        }
        hideLoader()
    }







    addButton.addEventListener('click', () => {
        popupContainer.style.display = 'flex';
    });

    AddUserCloseBtn.addEventListener('click', () => {
        popupContainer.style.display = 'none';
        resetBranchPopUP();
    });

    // JavaScript to hide the popup when clicking outside of it
    popupContainer.addEventListener('click', (e) => {
        if (e.target === popupContainer) {
            popupContainer.style.display = 'none';
        }
    });





    // Function to allow only numeric input
    function allowOnlyNumericInput(inputField) {
        inputField.addEventListener('input', function () {
            // Remove any non-numeric characters
            this.value = this.value.replace(/[^0-9]/g, '');
        });
    }

    // Get references to the input fields
    //const contactInput = document.getElementById('contactInput');
    //const whatsappInput = document.getElementById('whatsappInput');

    // Call the function for each input field
    allowOnlyNumericInput(contactInput);


    function togglePassword() {
        const passwordInput = document.getElementById('LoginPassword');
        //var x = document.getElementById("myInput");
        if (passwordInput.type === "password") {
            passwordInput.type = "text";
        } else {
            passwordInput.type = "password";
        }
    }







    function EditBranch(BranchID) {
        console.log("Branch ID:", BranchID);
        const foundBranch = AllBranches.find(branch => branch._id === BranchID);

        if (foundBranch) {
            console.log('Found Branch:', foundBranch);
            showPopUpTOEditBranch(foundBranch)
        } else {
            console.log('Branch not found with ID:', BranchID);
        }

    }

    function ViewBranch(BranchName) {
        console.log("Branch ID:", BranchName);
        const foundBranch = AllBranches.find(branch => branch.BranchName === BranchName);

        if (foundBranch) {
            console.log('Found Branch:', foundBranch);
            showPopUpTOViewBranch(foundBranch);
            showEmployeesFromBranch(BranchName);
        } else {
            console.log('Branch not found with ID:', BranchName);
        }
    }


    function showPopUpTOEditBranch(Branch) {
        popupContainer.style.display = 'flex';
        document.getElementById('AddUserHeadingText').textContent = "Edit Branch"
        document.getElementById("AddNewBranchForm").action = "/admin/EditBranchBranch";
        document.getElementById('BranchName').value = Branch.BranchName;
        document.getElementById('Location').value = Branch.Location;
        document.getElementById('contactInput').value = Branch.Contact;
        document.getElementById('BranchID').ariaDisabled = false;
        document.getElementById('BranchID').value = Branch._id;
        document.getElementById('SBTBTNbranch').value = "Update Branch";
    }

    function resetBranchPopUP() {
        document.getElementById('AddUserHeadingText').textContent = "Add New Branch"
        document.getElementById("AddNewBranchForm").action = "/admin/addNewBranch";
        document.getElementById('BranchName').value = "";
        document.getElementById('Location').value = "";
        document.getElementById('contactInput').value = "";
        document.getElementById('BranchID').ariaDisabled = true;
        document.getElementById('BranchID').value = "";
    }

    function showPopUpTOViewBranch(foundBranch) {
        ViewBranchPopup.style.display = 'flex';
        console.log("foundBranch", foundBranch);
        document.getElementById('viewBranchName').textContent = foundBranch.BranchName;
        document.getElementById('ViewBranchID').textContent = foundBranch._id;
        document.getElementById('ContactNumber').textContent = `+${foundBranch.Contact}`;
        document.getElementById('ViewBranchaLocation').textContent = foundBranch.Location;


        populateProductTables();

    }

    async function showEmployeesFromBranch(BranchName) {
        // Manager selection

        AllUsers.forEach(user => {
            if (user.Branch === BranchName && user.Designation === "Manager") {
                document.getElementById('Managername').textContent = user.UserName;
            }else{
                document.getElementById('Managername').textContent = "No manger added!";
            }
        });

        var UsersFromBranch = [];
        // Wrap the forEach loop inside a Promise to make it asynchronous
        await new Promise(resolve => {
            AllUsers.forEach(user => {
                if (user.Branch === BranchName) {
                    UsersFromBranch.push(user);
                }
            });
            resolve();
        });

        console.log("UserFromBranch", UsersFromBranch);
        PopulateUsersTable(UsersFromBranch);
    }

    function PopulateUsersTable(Users) {
        console.log(" render table data", Users);
        var tableBody = document.getElementById("EmployeeTable");
        tableBody.innerHTML = "";

        Users.forEach(function (row) {
            console.log("rows;", row);
            var tr = document.createElement("tr");
            tr.innerHTML = `
                        <td>${row.UserName}</td>
                        <td>${row.Designation}</td>
                        <td>${row.Contact}</td>
                        <td>
                            <a href="/admin/EditUser/${row.UserID}" class="btn btn-primary" target="_blank">Edit</a>
                        </td>
                    `;
            tableBody.appendChild(tr);
        });
    }

    function hidePopUpTOViewBranch() {
        ViewBranchPopup.style.display = 'none'
    }


    function changeClass(clickedElement) {
        // Remove 'USHeaderEachItemDivActive' class from all elements
        var elements = document.querySelectorAll('.USHeaderEachItemDiv');
        elements.forEach(function (element) {
            element.classList.remove('USHeaderEachItemDivActive');
        });

        // Add 'USHeaderEachItemDivActive' class to the clicked element
        clickedElement.classList.add('USHeaderEachItemDivActive');

        var ClickedText = clickedElement.getElementsByTagName('p')[0].textContent;
        if (ClickedText === "Binders") {
            document.getElementById('BinderStocks').style.display = 'block';
            document.getElementById('AdditivesStoks').style.display = 'none';
            document.getElementById('productStocks').style.display = 'none';
            populateBindersTable()
        } else if (ClickedText === "Additives") {
            document.getElementById('AdditivesStoks').style.display = 'block';
            document.getElementById('productStocks').style.display = 'none';
            document.getElementById('BinderStocks').style.display = 'none';
            populateAdditivesTable()
        } else if (ClickedText === "Products") {
            document.getElementById('productStocks').style.display = 'block';
            document.getElementById('AdditivesStoks').style.display = 'none';
            document.getElementById('BinderStocks').style.display = 'none';
            populateProductTables();
        }
    }


    function populateProductTables() {
        // Populate Products Table
        var ViewBranchID = document.getElementById('ViewBranchID').textContent;
        const productsTable = document.getElementById("ProductTable");
        const productsTbody = productsTable.querySelector("tbody");
        productsTbody.innerHTML = '';

        var Products = AllInventory.Products;
        Products.forEach((product, index) => {
            var ProductStock = 0;
            if (product.BranchStocks) {

                product.BranchStocks.forEach((BranchStock) => {
                    if (BranchStock.BranchID === ViewBranchID) {
                        //  console.log("Matching : ",BranchStock);
                        ProductStock = BranchStock.Stock
                    }
                })
            }
            const row = document.createElement("tr");
            row.classList.add("text-center");

            const itemNameCell = document.createElement("td");
            itemNameCell.classList.add("USFormReadOnly");
            itemNameCell.textContent = product.Product_Name;
            row.appendChild(itemNameCell);

            const oldStockCell = document.createElement("td");
            oldStockCell.classList.add("USFormReadOnly");
            oldStockCell.id = `oldProductStock${index}`
            // console.log("Stocsk:: ",ProductStock ,"  for : ",product.Product_Name)
            oldStockCell.textContent = ProductStock;
            row.appendChild(oldStockCell);

            const standardUnitCell = document.createElement("td");
            standardUnitCell.classList.add("USFormReadOnly");
            standardUnitCell.textContent = `${product.StandardQuatity} ${product.StandardQuantityUnit}`;
            row.appendChild(standardUnitCell);

            const actionCell = document.createElement("td");
            const updateForm = document.createElement("form");
            // updateForm.action = `/admin/UpdateProductStock/${ViewBranchID}/${product.Product_Id}`;
            // updateForm.method = "post";

            const newStockInput = document.createElement("input");
            newStockInput.type = "text";
            newStockInput.id = `NewStockProduct${index}`
            newStockInput.classList.add("USFormWriteOnly");
            newStockInput.name = "NewStock";
            newStockInput.oninput = (event) => {
                allowNumbersOnly(event)
            }
            updateForm.appendChild(newStockInput);

            const updateButton = document.createElement("input");
            updateButton.type = "button";
            updateButton.classList.add("btn", "btn-primary");
            updateButton.value = "Update";
            // Add onclick function with the specified parameter
            updateButton.onclick = function () {
                UpdateProductStocks(ViewBranchID, product.Product_Id, index);
            };

            updateForm.appendChild(updateButton);


            actionCell.appendChild(updateForm);
            row.appendChild(actionCell);

            productsTbody.appendChild(row);
        });

        //  Similar code can be repeated for Binders and Additives tables.
        populateBindersTable()
    }

    function populateBindersTable() {
        var ViewBranchID = document.getElementById('ViewBranchID').textContent;
        const bindersTable = document.getElementById("BinderTable");
        const bindersTbody = bindersTable.querySelector("tbody");
        bindersTbody.innerHTML = "";

        var Binders = AllInventory.Binders;

        Binders.forEach((binder, index) => {
            var BinderStock = 0;
            if (binder.BranchStocks) {
                binder.BranchStocks.forEach((BranchStock) => {
                    if (BranchStock.BranchID === ViewBranchID) {
                        BinderStock = BranchStock.Stock
                    }
                })
            }

            const row = document.createElement("tr");
            row.classList.add("text-center");

            const itemNameCell = document.createElement("td");
            itemNameCell.classList.add("USFormReadOnly");
            itemNameCell.textContent = binder.Binder_Name;
            row.appendChild(itemNameCell);

            const oldStockCell = document.createElement("td");
            oldStockCell.classList.add("USFormReadOnly");
            oldStockCell.id = `oldBinderStock${index}`
            oldStockCell.textContent = BinderStock;
            row.appendChild(oldStockCell);

            const actionCell = document.createElement("td");
            const updateForm = document.createElement("form");
            // updateForm.action = `/admin/UpdateBinderStock/${ViewBranchID}/${binder.Binder_Id}`;
            // updateForm.method = "post";

            const newStockInput = document.createElement("input");
            newStockInput.type = "text";
            newStockInput.id = `NewStockBinder${index}`
            newStockInput.classList.add("USFormWriteOnly");
            newStockInput.name = "NewStock";
            newStockInput.oninput = (event) => {
                allowNumbersOnly(event)
            }
            updateForm.appendChild(newStockInput);

            const updateButton = document.createElement("input");
            updateButton.type = "button";
            updateButton.classList.add("btn", "btn-primary");
            updateButton.value = "Update";
            // Add onclick function with the specified parameter
            updateButton.onclick = function () {
                UpdateBinderStocks(ViewBranchID, binder.Binder_Id, index);
            };
            updateForm.appendChild(updateButton);

            actionCell.appendChild(updateForm);
            row.appendChild(actionCell);

            bindersTbody.appendChild(row);
        });
        populateAdditivesTable()
    }

    function populateAdditivesTable() {
        var ViewBranchID = document.getElementById('ViewBranchID').textContent;
        const additivesTable = document.getElementById("AdditiveTable");
        const additivesTbody = additivesTable.querySelector("tbody");
        additivesTbody.innerHTML = "";

        var Additives = AllInventory.Additives;
        Additives.forEach((additive, index) => {
            var AdditiveStock = 0;
            if (additive.BranchStocks) {

                additive.BranchStocks.forEach((BranchStock) => {
                    if (BranchStock.BranchID === ViewBranchID) {
                        AdditiveStock = BranchStock.Stock
                    }
                })
            }

            const row = document.createElement("tr");
            row.classList.add("text-center");

            const itemNameCell = document.createElement("td");
            itemNameCell.classList.add("USFormReadOnly");
            itemNameCell.textContent = additive.Additive_Name;
            row.appendChild(itemNameCell);

            const oldStockCell = document.createElement("td");
            oldStockCell.classList.add("USFormReadOnly");
            oldStockCell.id = `oldAdditiveStock${index}`
            oldStockCell.textContent = AdditiveStock;
            row.appendChild(oldStockCell);

            const actionCell = document.createElement("td");
            const updateForm = document.createElement("form");
            //updateForm.action = `/admin/UpdateAdditiveStock/${ViewBranchID}/${additive.Additive_Id}`;
            //updateForm.method = "post";

            const newStockInput = document.createElement("input");
            newStockInput.type = "text";
            newStockInput.id = `NewStockAdditve${index}`
            newStockInput.classList.add("USFormWriteOnly");
            newStockInput.name = "NewStock";
            newStockInput.oninput = (event) => {
                allowNumbersOnly(event)
            }
            updateForm.appendChild(newStockInput);

            const updateButton = document.createElement("input");
            updateButton.type = "button";
            updateButton.classList.add("btn", "btn-primary");
            updateButton.value = "Update";
            // Add onclick function with the specified parameter
            updateButton.onclick = function () {
                UpdateAdditiveStocks(ViewBranchID, additive.Additive_Id, index);
            };
            updateForm.appendChild(updateButton);

            actionCell.appendChild(updateForm);
            row.appendChild(actionCell);

            additivesTbody.appendChild(row);
        });
    }


    function UpdateProductStocks(ViewBranchID, Product_Id, index) {
        showLoader();
        var NewStock = document.getElementById(`NewStockProduct${index}`).value;
        fetch(`/admin/UpdateProductStock/${ViewBranchID}/${Product_Id}/${NewStock}/api`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                loadAllUser();
                document.getElementById(`NewStockProduct${index}`).value = "";
                document.getElementById(`oldProductStock${index}`).textContent = data.Stock;
            })
            .catch(error => {
                console.log('Error:', error);
            });

    }

    function UpdateBinderStocks(ViewBranchID, Binder_Id, index) {
        showLoader();
        var NewStock = document.getElementById(`NewStockBinder${index}`).value;
        fetch(`/admin/UpdateBinderStock/${ViewBranchID}/${Binder_Id}/${NewStock}/api`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                loadAllUser();
                document.getElementById(`NewStockBinder${index}`).value = "";
                document.getElementById(`oldBinderStock${index}`).textContent = data.Stock;
            })
            .catch(error => {
                console.log('Error:', error);
            });

    }

    function UpdateAdditiveStocks(ViewBranchID, AdditiveID, index) {
        showLoader();
        var NewStock = document.getElementById(`NewStockAdditve${index}`).value;
        fetch(`/admin/UpdateAdditiveStock/${ViewBranchID}/${AdditiveID}/${NewStock}/api`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                loadAllUser();
                document.getElementById(`NewStockAdditve${index}`).value = "";
                document.getElementById(`oldAdditiveStock${index}`).textContent = data.Stock;
            })
            .catch(error => {
                console.log('Error:', error);
            });

    }


    function allowNumbersOnly(event) {
        const inputElement = event.target;
        // Remove non-numeric characters using a regular expression
        inputElement.value = inputElement.value.replace(/\D/g, '');
    }

    document.getElementById("ProductsearchInput").addEventListener("input", function () {
        ProductsearchTable();
    });

    function ProductsearchTable() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("ProductsearchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("ProductTableBody");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {
            var found = false; // Flag to determine if the search term is found in any column

            // Loop through the columns (td elements) in the current row
            for (var j = 0; j < tr[i].getElementsByTagName("td").length; j++) {
                td = tr[i].getElementsByTagName("td")[j];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        found = true;
                        break; // Exit the loop if the search term is found in any column
                    }
                }
            }

            // Set display style based on the search result
            if (found) {
                tr[i].style.display = "";
            } else {
                tr[i].style.display = "none";
            }
        }
    }

    document.getElementById("BindersearchInput").addEventListener("input", function () {
        BindersearchTable();
    });

    function BindersearchTable() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("BindersearchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("BinderTableBody");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {
            var found = false; // Flag to determine if the search term is found in any column

            // Loop through the columns (td elements) in the current row
            for (var j = 0; j < tr[i].getElementsByTagName("td").length; j++) {
                td = tr[i].getElementsByTagName("td")[j];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        found = true;
                        break; // Exit the loop if the search term is found in any column
                    }
                }
            }

            // Set display style based on the search result
            if (found) {
                tr[i].style.display = "";
            } else {
                tr[i].style.display = "none";
            }
        }
    }

    document.getElementById("AdditivesearchInput").addEventListener("input", function () {
        AdditivesearchTable();
    });

    function AdditivesearchTable() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("AdditivesearchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("AdditiveTableBody");
        tr = table.getElementsByTagName("tr");

        for (i = 0; i < tr.length; i++) {
            var found = false; // Flag to determine if the search term is found in any column

            // Loop through the columns (td elements) in the current row
            for (var j = 0; j < tr[i].getElementsByTagName("td").length; j++) {
                td = tr[i].getElementsByTagName("td")[j];
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        found = true;
                        break; // Exit the loop if the search term is found in any column
                    }
                }
            }

            // Set display style based on the search result
            if (found) {
                tr[i].style.display = "";
            } else {
                tr[i].style.display = "none";
            }
        }
    }

</script>



<style>
    /*Loader */
    #loader-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
        display: none;
    }

    .loader {
        display: flex;
        align-items: center;
    }

    .bar {
        display: inline-block;
        width: 3px;
        height: 20px;
        background-color: rgba(255, 255, 255, .5);
        border-radius: 10px;
        animation: scale-up4 1s linear infinite;
    }

    .bar:nth-child(2) {
        height: 35px;
        margin: 0 5px;
        animation-delay: .25s;
    }

    .bar:nth-child(3) {
        animation-delay: .5s;
    }

    @keyframes scale-up4 {
        20% {
            background-color: #ffff;
            transform: scaleY(1.5);
        }

        40% {
            transform: scaleY(1);
        }
    }


    /*Loader Ends*/


    /* Styles for the background overlay */
    .popup {
        display: none;
        /* Use display: flex */
        align-items: center;
        /* Vertically center the content */
        justify-content: center;
        /* Horizontally center the content */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        /* Semi-transparent background */
        z-index: 90;
        /* Make sure it's above other elements */
        overflow-y: auto;
        padding: 2rem 0;

    }

    /* Styles for the form container */
    .popup-content {
        /* No need for position: absolute; */
        background-color: white;
        width: 500px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        overflow-y: auto;
        /* Allow vertical scrolling if content exceeds container height */
    }

    /*Poop up ends Here*/


    .AdminPage {
        display: flex;
    }

    .ADSidebar {
        flex: 0 0 auto;
        /* Prevent the sidebar from growing or shrinking */
        min-height: 100%;
        /* Minimum height to fill the container */
    }

    .AdMainArea {
        flex: 1;
        /* Allow the main area to grow and fill the remaining space */
        min-height: 100vh;
        /* Minimum height of the viewport */
        /* Add any other styling you want for the main area */
    }

    .ADSubCategorySelectionSelectBox {
        width: 18rem;
        margin-right: 30px;
    }

    .AddUserHeaderDiv {
        display: flex;
        justify-content: space-between;
        padding: 0 2rem;
        align-items: center;
    }

    .AddUserHeading {
        font-size: 25px;
        font-weight: 600;
        color: #3d3d3d;
        margin: 0;
    }

    .AddUserCloseBtn {
        border: 3px #3d3d3d solid;
        border-radius: 5px;
        width: 50px;
        height: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        user-select: none;
    }

    .AddUserCloseBtn p {
        margin: 0;
        color: #3d3d3d;
        font-size: 25px;
        font-weight: 700;
    }

    .AddUserBodyDiv {
        padding: 2rem;
    }

    .AddUserEachSectionDiv {
        margin-bottom: 2rem;
    }

    /* Style for the label */
    .AddUserLabel {
        color: #3d3d3d;
        font-size: 16px;
        /* Adjust font size as needed */
        margin-bottom: 0px;
        /* Add vertical gap space between label and input */
        font-weight: 700;
    }

    /* Style for the required asterisk */
    .AddUserLabel::after {
        content: '*';
        color: red;
        margin-left: 2px;
        /* Add a small horizontal gap between label and asterisk */
    }

    /* Style for the input field */
    .AddUserINP {
        /* Add any desired styles for the input, e.g., border, padding, etc. */
        border: 1px solid #3d3d3d;
        padding: 5px;
        width: 100%;
        border-radius: 5px;
        padding: 10px 10px;
        font-size: 20px;
        font-weight: 600;
    }

    #categoryDIVCustomer {
        display: none;
    }

    .AdduserAlternateLabel::after {
        content: '';
        color: #3d3d3d;
        margin-left: 2px;
        /* Add a small horizontal gap between label and asterisk */
    }

    .AdduserTickSameContact {
        display: flex;

    }

    .AdduserTickSameContact p {
        margin: 0;
    }

    .AddBranchesubmitDiv {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .AddUserBTNSubmit {
        background-color: rgb(26, 26, 188);
        color: white;
        font-weight: 600;
        font-size: 20px;
        width: 80%;
        border-radius: 5px;
    }

    .AddUserBTNSubmit:hover {
        cursor: pointer;
        background-color: blue;
        color: white;
    }



    .password-container {
        display: flex;
        justify-content: start;
        align-items: center;
    }

    .ViewBranchDiv {
        background-color: white;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 3px 7px 0 rgba(0, 0, 0, 0.19) !important;
        width: 65rem;
        max-height: 90vh;
        overflow-y: auto;
    }

    .ViewBRheader {
        text-align: right;
        display: flex;
        justify-content: end;
        padding: 10px;
    }

    .ViewBranchMain {
        padding: 0 2rem;
        color: #3d3d3d;
    }

    .BranchMainHeader,
    .BranchContactSec {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1rem;
    }

    .ViewBranchaName {
        gap: 1rem;
        font-size: 35px;
        font-weight: bold;
    }

    .BranchContactSec,
    .ViewBranchLocationDiv {
        gap: 1rem;
        font-size: 25px;
        font-weight: bold;
    }

    .ViewBranchLocationDiv {
        display: flex;
        justify-content: start;
        gap: 1rem;
    }

    .ViewBranchDirSlection {
        width: 90%;
        display: flex;
        justify-content: center;
        margin-top: 2rem;
        align-items: center;
    }

    .ViewBranchDirSlection button {
        color: #3d3d3d;
        background-color: transparent;
        padding: 1rem 2rem;
        font-size: 20px;
        font-weight: 600;
        margin: 0 2rem;
        margin-bottom: 2rem;
        stroke: #3d3d3d;
        border-radius: 4px;
        cursor: pointer;
        position: relative;
        transition: border-color 0.3s ease, background-color 0.3s ease;
    }

    .EmployeeAndStaffArea {
        border: 1px solid #3d3d3d;
        border-radius: ;
    }

    .ViewBranchDirSlection {
        display: flex;
        justify-content: space-around;
        position: relative;
    }

    .EmployeeAndStaffArea,
    .Inventory {
        display: none;
        border: 2px solid #ccc;
        border-radius: 8px;
        padding: 20px;
        transition: all 0.5s ease;
        position: relative;
        margin-bottom: 2rem;
    }

    .EmployeeAndStaffArea::before,
    .Inventory::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 2px solid transparent;
        border-radius: 8px;
        pointer-events: none;
        transition: border-color 0.3s ease;
    }

    .ViewBranchDirSlection .activeBtn {
        background-color: #3498db;
        color: whitesmoke;
    }



    .slide-in {
        animation: slideIn 0.5s ease-out;
    }

    @keyframes slideIn {
        0% {
            transform: translateY(-20px);
            opacity: 0;
        }

        100% {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .ManagerSection {
        font-size: 20px;
        font-weight: 600;
        display: flex;
        gap: 1rem;
    }

    /* Generic Table Styles */
    .employee_table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        border: 2px solid #ddd;
        margin-bottom: 20px;
    }

    .employee_table th,
    .employee_table td {
        border: 1px solid #ddd;
        padding: 15px;
        text-align: center;
        font-size: 20px;
        font-weight: 600;
    }

    .employee_table th {
        cursor: pointer;
        background-color: #f2f2f2;
    }

    .employee_table th:hover {
        background-color: #e6e6e6;
    }

    .employee_table tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .employee_table tr:hover {
        background-color: #e6e6e6;
    }

    /* Your Specific Table Styles */
    .employee_table {
        /* Add specific styles for this table */
    }

    .search-container {
        margin-bottom: 15px;
        display: flex;
        justify-content: end;
    }

    .search-container input {
        padding: 8px;
        margin-right: 8px;
    }

    #BinderStocks,
    #AdditivesStoks {
        display: none;
    }
</style>