<section class="AdminPage">
    <aside class="ADSidebar">
        <div class="ADSidebarLogoDiv">
            <img class="AdLogo" src="/images/Logo/MegaPaintsLogo.png" alt="">
        </div>
        <div class="ADSelectioSideBarDIv">
            <a href="/admin">
                <div class="Category ">
                    <p class="ADDelectionSideBarLabel">Category</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Sub-Category">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Sub-Category</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Product ">
                <div class="Category ADactiveButton">
                    <p class="ADDelectionSideBarLabel">Product</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Additives">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Additives</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Binders">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Binders</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Branches">
                <div class="Category ">
                    <p class="ADDelectionSideBarLabel">Branches</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Users">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Users</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            {{!-- <a href="/admin/Employees">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Employees</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a>
            <a href="/admin/Customers">
                <div class="Category">
                    <p class="ADDelectionSideBarLabel">Customers</p>
                    <img src="/images/Icons/MoreSelect.png" alt="" class="ADMoreIcon">
                </div>
            </a> --}}

            <div class="ADAccount">
                <p class="ADDelectionSideBarLabel">Account</p>
                <img src="/images/Icons/MoreSelect.png" alt="" class="ADAccountIcon">
            </div>

            <div class="ADAccountExpandDiv">
                <a href="/admin/change-password">
                    <div class="ADlogoutDiv">
                        <p>Change Password</p>
                        {{!-- <img src="/images/Icons/logout.png" alt="" class="ADLogoutIcon"> --}}
                    </div>
                </a>
                <a href="/admin/logout">
                    <div class="ADlogoutDiv">
                        <p>Logout</p>
                        <img src="/images/Icons/logout.png" alt="" class="ADLogoutIcon">
                    </div>
                </a>
            </div>

        </div>
    </aside>
    <section class="AdMainArea">
        <div class="ADMainAreaDiv">
            <div class="ADMainAreaHeaderDiv">
                <p class="ADMainAreaHeader">Products</p>
            </div>
            <div class="ADMainAddButtonDiv">
                <a href="/admin/addProduct">
                    <div class="ADMainAddButton">
                        <p>Add New</p>
                        <img src="/images/Icons/add.png" alt="" class="ADAddNewIcon">
                    </div>
                </a>
            </div>
            <div class="AddError text-center d-flex align-items-center justify-content-center" style="color: red;">
                <p class="text-center">{{AddError}}</p>
            </div>
            <div class="ProductGroupDivArea">
                <div class="ADCustomerCatDiv">
                    <div class="ADCustomerCatHeader">
                        <p class="ADCustomerCatHead">Product Groups</p>
                        <button id="ADAddCusCategoryBTN" class="ADAddCusCategoryBTN">Add New Group</button>
                        <img class="AdCustomerMoreIcon" onclick="toggleCategoryList()"
                            src="/images/Icons/MoreSelect.png" id="rotateIcon" alt="">
                    </div>
                    <div class="CategoryList" id="categoryList">
                        <hr>

                        {{#each AllProductGroup}}
                        <div class="ADCustomerCategoryRow">
                            <p class="ADCustomerCategory">{{this.GroupName}}</p>
                            <a href="/admin/removeProductGroup/{{this.GroupName}}" class="btn ADCusotmerdelete-button"
                                onclick="return confirm('Are you sure you want to delete this Group {{this.GroupName}} ?')">
                                <i class="fas fa-trash"></i> Delete</a>
                        </div>
                        {{/each}}
                    </div>
                </div>

                <div id="ADCUSpopup">
                    <div class="ADCUSpopup">
                        <form method="post" action="/admin/AddProductGroup" onsubmit="return validateForm()">
                            <div class="ADCusPopHeader">
                                <p class="ADCUSpopup-header">Add Group</p>
                                <button type="button" class="closeBtn" onclick="closePopup()">X</button>
                            </div>
                            <input type="text" required name="GroupName" id="categoryInput"
                                placeholder="Enter Group name">
                            <button type="submit" id="submitBtn">Submit</button>
                        </form>
                    </div>
                </div>
            </div>
            <div class="ADSubCategorySelectionArea">
                <div class="ADSubCategorySelectionDiv">
                    <p class="ADSubCategorySelectionLabel">Select Category</p>
                    <select class="ADSubCategorySelectionSelectBox" onchange="ADcategorySelect()" name="Category"
                        id="CategorySelect">
                        <option value="1" selected>All Category</option>
                        {{#each AllCategory}}
                        <option class="ADSelectCategoryOptions" value="{{this.Category_Id}}">{{this.Category_Id}} -
                            {{this.Category}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="ADSubCategorySelectionDiv">
                    <p class="ADSubCategorySelectionLabel">Select Sub Category</p>
                    <select class="ADSubCategorySelectionSelectBox" onchange="ADSubcategorySelect()" name="SubCategory"
                        id="SubCategorySelect" disabled>
                        <option value="0" selected>All Sub Category</option>
                    </select>
                </div>
            </div>
            <div class="ADMainTableDiv">
                <table id="" class="ADMainTable  table table-bordered text-center ADcustom-border">
                    <thead class="ADTableHead">
                        <tr class="ADTableHeadTR">
                            <th>ID</th>
                            <td>Abbreviation</td>
                            <th>Product Name</th>
                            <th>Density</th>
                            {{!-- <th>Stock (Ltr or Kg)</th> --}}
                            <th>Price</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </section>
</section>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.js"></script>


<script>

    $("#FormulaTable").DataTable();


    //ajax
    function ADgetAllSubCategories() {
        return fetch('/admin/Subcategories/api')
            .then(response => response.json())
            .catch(error => {
                // console.log('Error:', error);
            });
    }

    function ADgetAllCategories() {
        return fetch('/admin/Categories/api')
            .then(response => response.json())
            .catch(error => {
                // console.log('Error:', error);
            });
    }

    Promise.all([ADgetAllSubCategories(), ADgetAllCategories()])
        .then(([subCategories, categories]) => {
            // Process the retrieved subcategories and categories
            // console.log(subCategories);
            // console.log(categories);

            // Assign the values to the variables
            var subCategories = subCategories;
            var categories = categories;

            // Continue with your code here...



            // Get the category select element
            const categorySelect = document.getElementById('CategorySelect');

            // Get the subcategory select element
            const subCategorySelect = document.getElementById('SubCategorySelect');

            // Add an event listener to the category select element
            categorySelect.addEventListener('change', () => {
                // Get the selected category ID
                const categoryId = categorySelect.value;

                if (categoryId === "1") {
                    // Add a "No Subcategory" option
                    while (subCategorySelect.options.length > 0) {
                        subCategorySelect.remove(0);
                    }

                    const option = document.createElement('option');
                    option.textContent = 'All Sub Categories';
                    option.value = "0"
                    subCategorySelect.appendChild(option);

                    //alert(subCategorySelect.value)


                    // Disable the subcategory select box
                    subCategorySelect.disabled = true;
                    ADSubcategorySelect();
                } else {

                    // Filter the subcategories based on the selected category ID
                    const filteredSubCategories = subCategories.filter(subCategory => subCategory.Category_Id === categoryId);

                    // Clear the subcategory select box
                    subCategorySelect.innerHTML = '';

                    // Create and append the option elements for the filtered subcategories

                    if (filteredSubCategories.length > 0) {

                        /* const option = document.createElement('option');
                         option.value = "1";
                         option.textContent = "All Sub Category";
                         subCategorySelect.appendChild(option);*/

                        filteredSubCategories.forEach(subCategory => {
                            const option = document.createElement('option');
                            option.value = subCategory.SubCategory_Id;
                            option.textContent = subCategory.SubCategory;
                            subCategorySelect.appendChild(option);
                        });
                        // Enable the subcategory select box
                        ADSubcategorySelect();
                        subCategorySelect.disabled = false;
                    } else {
                        // Add a "No Subcategory" option
                        const option = document.createElement('option');
                        option.value = "0";
                        option.textContent = 'No SubCategory available';
                        subCategorySelect.appendChild(option);

                        // Disable the subcategory select box

                        subCategorySelect.disabled = true;
                    }
                }

                // console.log(subCategorySelect.value);
            });
        });


    function AddProductsToTable(data) {

        const categoryData = data.Category;
        const subCategoryData = data.SubCategory;
        const productData = data.Products;

        // console.log("Calling Addproducts to Table");
        /*console.table(categoryData);
        console.table(subCategoryData);*/
        console.table(productData);

        function populateTable(categoryData, subCategoryData, productData) {
            const tableBody = document.querySelector('.ADMainTable tbody');

            // Clear existing table rows
            tableBody.innerHTML = '';
            console.log('Subcategory called: ', subCategoryData)
            // Function to match category and subcategory IDs and update product data
            function updateProductData() {
                productData.forEach((product) => {
                    if (product) {
                        console.log("Product: ", product);
                        const category = categoryData.find((category) => category.Category_Id === parseInt(product.Category));
                        // console.log("Product: ", product.Product_Name, " category: ", category);
                        const subCategory = subCategoryData.find((subCategory) => subCategory.SubCategory_Id === parseInt(product.SubCategory));
                        // console.log("Product: ", product.Product_Name, " category: ", subCategory);

                        if (category) {
                            product.CategoryName = category.Category;
                        }
                        if (subCategory) {
                            product.SubCategoryName = subCategory.SubCategory;
                        }
                    }
                });
                // console.log("Updates Product Data with category and sub category");
                //// console.log(productData[0].CategoryName);
            }

            // Call the function to update product data
            updateProductData(productData);

            //console.table()

            if (productData.length > 0) {
                // Iterate over productData array and create table rows
                productData.forEach((product) => {
                    if (product) {
                        // Find the category and subcategory names based on IDs
                        const category = categoryData.find((category) => category.Category_Id === product.Category);
                        const subCategory = subCategoryData.find((subCategory) => subCategory.SubCategory_Id === product.SubCategory);

                        // Create a new table row
                        const row = document.createElement('tr');

                        var ProductStock = parseFloat(product.Stock) * parseFloat(product.StandardQuatity)
                        // Populate table cells with data
                        row.innerHTML = `
      <td>${product.Product_Id}</td>
      <td>${product.Abbreviation ? product.Abbreviation : ""}</td>
      <td>${product.Product_Name}</td>
      <td>${product.Product_Density}</td>
      {{!-- <td>${ProductStock}</td> --}}
      <td>${product.Price} Per ${product.PriceUnit}</td>
      <td><a class="btn btn-primary ADProductEditBTN" href="/admin/editProduct/${product.Product_Id}">Edit</a></td>
    `;

                        // Append the row to the table body
                        tableBody.appendChild(row);
                    }       
                });
            } else {
                // Iterate over productData array and create table rows


                // Create a new table row
                const row = document.createElement('tr');

                // Populate table cells with data
                row.innerHTML = `
     <td class="ADSubCategoryNotAvailable" colspan="9">No Product is Added</td>
    `;

                // Append the row to the table body
                tableBody.appendChild(row);

            }


        }

        // Call the function to populate the table
        populateTable(categoryData, subCategoryData, productData);
    }


    function ADSubcategorySelect(value) {
        const subCategorySelect = document.getElementById('SubCategorySelect');
        //alert(subCategorySelect.value)

        var SubCategory_Id = subCategorySelect.value;

        if (SubCategory_Id === "0") {
            // call all  products
            async function fetchData() {
                try {
                    const response = await fetch(`/admin/GetAllProduct-Cat-Sub/api`, {
                        method: 'GET', // Specify the HTTP method (e.g., GET, POST, etc.)
                        headers: {
                            'Content-Type': 'application/json' // Specify the content type of the request
                            // Add any additional headers as needed
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        // Process the data received from the backend
                        // console.log(data);
                        // Call a function or perform any actions with the data
                        AddProductsToTable(data);

                    } else {
                        throw new Error('Request failed with status ' + response.status);
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            }

            fetchData();
        } else {
            async function fetchData() {
                try {
                    const response = await fetch(`/admin/GetAllProduct-Cat-Sub/api/${SubCategory_Id}`, {
                        method: 'GET', // Specify the HTTP method (e.g., GET, POST, etc.)
                        headers: {
                            'Content-Type': 'application/json' // Specify the content type of the request
                            // Add any additional headers as needed
                        }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        // Process the data received from the backend
                        // console.log(data);

                        // Call a function or perform any actions with the data
                        AddProductsToTable(data);

                    } else {
                        throw new Error('Request failed with status ' + response.status);
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            }

            fetchData();


        }
    }


    window.onload = function () {
        async function fetchData() {
            try {
                const response = await fetch(`/admin/GetAllProduct-Cat-Sub/api`, {
                    method: 'GET', // Specify the HTTP method (e.g., GET, POST, etc.)
                    headers: {
                        'Content-Type': 'application/json' // Specify the content type of the request
                        // Add any additional headers as needed
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    // Process the data received from the backend
                    // console.log(data);
                    // Call a function or perform any actions with the data
                    //console.log(data);
                    AddProductsToTable(data);

                } else {
                    throw new Error('Request failed with status ' + response.status);
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }
        fetchData();
    };

    // Groups works starts

    var CustomeraddButton = document.getElementById('ADAddCusCategoryBTN');
    var popup = document.getElementById('ADCUSpopup');
    var categoryInput = document.getElementById('categoryInput');

    function validateForm() {
        var categoryInput = document.getElementById('categoryInput');
        var categoryValue = categoryInput.value.trim(); // Trim leading and trailing spaces

        // Validate that the input contains only letters, numbers, spaces, and special characters
        var validInput = /^[a-zA-Z0-9\s\W]+$/.test(categoryValue);

        if (!validInput) {
            alert('Invalid input. Only letters, numbers, spaces, and special characters are allowed.');
            return false; // Prevent form submission
        }

        return true; // Allow form submission
    }

    function toggleCategoryList() {

        var categoryList = document.getElementById('categoryList');
        var icon = document.getElementById('rotateIcon');
        var BTN = document.getElementById('ADAddCusCategoryBTN');

        if (categoryList.style.maxHeight === '0px') {

            categoryList.style.maxHeight = categoryList.scrollHeight + 'px';
            icon.style.transform = 'rotate(-90deg)';
            BTN.style.display = 'block';
        } else {
            closePopup()
            categoryList.style.maxHeight = '0px';
            icon.style.transform = 'rotate(90deg)';
            BTN.style.display = 'none';

        }
    }

    CustomeraddButton.addEventListener('click', function () {
        popup.style.display = 'flex';
        // Disable scrolling
        document.body.style.overflow = 'hidden';
    });

    function closePopup() {
        popup.style.display = 'none';
        // Enable scrolling
        document.body.style.overflow = 'auto';

    }



</script>